// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package scheduler

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetMembersRequest struct {
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *GetMembersRequest) Reset()                    { *m = GetMembersRequest{} }
func (m *GetMembersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMembersRequest) ProtoMessage()               {}
func (*GetMembersRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *GetMembersRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type Member struct {
	// name is the name of the PD member.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// member_id is the unique id of the PD member.
	MemberId   uint64   `protobuf:"varint,2,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
	PeerUrls   []string `protobuf:"bytes,3,rep,name=peer_urls,json=peerUrls" json:"peer_urls,omitempty"`
	ClientUrls []string `protobuf:"bytes,4,rep,name=client_urls,json=clientUrls" json:"client_urls,omitempty"`
}

func (m *Member) Reset()                    { *m = Member{} }
func (m *Member) String() string            { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()               {}
func (*Member) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Member) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Member) GetMemberId() uint64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *Member) GetPeerUrls() []string {
	if m != nil {
		return m.PeerUrls
	}
	return nil
}

func (m *Member) GetClientUrls() []string {
	if m != nil {
		return m.ClientUrls
	}
	return nil
}

type GetMembersResponse struct {
	Header     *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Members    []*Member       `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	Leader     *Member         `protobuf:"bytes,3,opt,name=leader" json:"leader,omitempty"`
	EtcdLeader *Member         `protobuf:"bytes,4,opt,name=etcd_leader,json=etcdLeader" json:"etcd_leader,omitempty"`
}

func (m *GetMembersResponse) Reset()                    { *m = GetMembersResponse{} }
func (m *GetMembersResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMembersResponse) ProtoMessage()               {}
func (*GetMembersResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *GetMembersResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetMembersResponse) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *GetMembersResponse) GetLeader() *Member {
	if m != nil {
		return m.Leader
	}
	return nil
}

func (m *GetMembersResponse) GetEtcdLeader() *Member {
	if m != nil {
		return m.EtcdLeader
	}
	return nil
}

func init() {
	proto.RegisterType((*GetMembersRequest)(nil), "scheduler.GetMembersRequest")
	proto.RegisterType((*Member)(nil), "scheduler.Member")
	proto.RegisterType((*GetMembersResponse)(nil), "scheduler.GetMembersResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MessageService service

type MessageServiceClient interface {
	// 返回调度集群的member信息
	GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error)
	WorkerHeartBeart(ctx context.Context, opts ...grpc.CallOption) (MessageService_WorkerHeartBeartClient, error)
}

type messageServiceClient struct {
	cc *grpc.ClientConn
}

func NewMessageServiceClient(cc *grpc.ClientConn) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error) {
	out := new(GetMembersResponse)
	err := grpc.Invoke(ctx, "/scheduler.MessageService/GetMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) WorkerHeartBeart(ctx context.Context, opts ...grpc.CallOption) (MessageService_WorkerHeartBeartClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessageService_serviceDesc.Streams[0], c.cc, "/scheduler.MessageService/WorkerHeartBeart", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceWorkerHeartBeartClient{stream}
	return x, nil
}

type MessageService_WorkerHeartBeartClient interface {
	Send(*WorkerHeartBeatRequest) error
	Recv() (*WorkerHeartBeatResponse, error)
	grpc.ClientStream
}

type messageServiceWorkerHeartBeartClient struct {
	grpc.ClientStream
}

func (x *messageServiceWorkerHeartBeartClient) Send(m *WorkerHeartBeatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceWorkerHeartBeartClient) Recv() (*WorkerHeartBeatResponse, error) {
	m := new(WorkerHeartBeatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MessageService service

type MessageServiceServer interface {
	// 返回调度集群的member信息
	GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error)
	WorkerHeartBeart(MessageService_WorkerHeartBeartServer) error
}

func RegisterMessageServiceServer(s *grpc.Server, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.MessageService/GetMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetMembers(ctx, req.(*GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_WorkerHeartBeart_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).WorkerHeartBeart(&messageServiceWorkerHeartBeartServer{stream})
}

type MessageService_WorkerHeartBeartServer interface {
	Send(*WorkerHeartBeatResponse) error
	Recv() (*WorkerHeartBeatRequest, error)
	grpc.ServerStream
}

type messageServiceWorkerHeartBeartServer struct {
	grpc.ServerStream
}

func (x *messageServiceWorkerHeartBeartServer) Send(m *WorkerHeartBeatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceWorkerHeartBeartServer) Recv() (*WorkerHeartBeatRequest, error) {
	m := new(WorkerHeartBeatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMembers",
			Handler:    _MessageService_GetMembers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WorkerHeartBeart",
			Handler:       _MessageService_WorkerHeartBeart_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xdf, 0x4e, 0xab, 0x40,
	0x10, 0xc6, 0xcf, 0x16, 0xc2, 0x29, 0xc3, 0xf9, 0x63, 0xe7, 0x0a, 0xab, 0x46, 0xe4, 0x0a, 0x63,
	0xd2, 0x54, 0x7c, 0x03, 0x13, 0x63, 0x8d, 0xf6, 0x06, 0x63, 0xbc, 0x32, 0x0d, 0x85, 0x89, 0x6d,
	0xa4, 0xa5, 0xee, 0x6e, 0xf5, 0xe5, 0x7c, 0x0b, 0x5f, 0xc8, 0xb0, 0x43, 0x95, 0xaa, 0xf5, 0x86,
	0xc0, 0xfc, 0x7e, 0xf3, 0x85, 0x2f, 0xbb, 0xf0, 0x57, 0x91, 0x7c, 0x9a, 0x66, 0xd4, 0x5b, 0xc8,
	0x52, 0x97, 0xe8, 0xaa, 0x6c, 0x42, 0xf9, 0xb2, 0x20, 0xd9, 0xfd, 0x3f, 0xa1, 0x54, 0xea, 0x31,
	0xa5, 0x9a, 0x59, 0xf7, 0xcf, 0x84, 0xd2, 0x9c, 0x24, 0x7f, 0x85, 0x67, 0xd0, 0x39, 0x27, 0x3d,
	0xa4, 0xd9, 0x98, 0xa4, 0x4a, 0xe8, 0x71, 0x49, 0x4a, 0x63, 0x1f, 0x1c, 0x96, 0x7c, 0x11, 0x88,
	0xc8, 0x8b, 0xfd, 0xde, 0x7b, 0x5e, 0xaf, 0x76, 0x06, 0x86, 0x27, 0xb5, 0x17, 0x3e, 0x83, 0xc3,
	0x19, 0x88, 0x60, 0xcf, 0xd3, 0x19, 0x99, 0x4d, 0x37, 0x31, 0xef, 0xb8, 0x03, 0xee, 0xcc, 0xd0,
	0xd1, 0x34, 0xf7, 0x5b, 0x81, 0x88, 0xec, 0xa4, 0xcd, 0x83, 0x8b, 0xbc, 0x82, 0x0b, 0x22, 0x39,
	0x5a, 0xca, 0x42, 0xf9, 0x56, 0x60, 0x45, 0x6e, 0xd2, 0xae, 0x06, 0x37, 0xb2, 0x50, 0xb8, 0x0f,
	0x5e, 0x56, 0x4c, 0x69, 0xae, 0x19, 0xdb, 0x06, 0x03, 0x8f, 0x2a, 0x21, 0x7c, 0x15, 0x80, 0xcd,
	0x02, 0x6a, 0x51, 0xce, 0x15, 0xe1, 0xf1, 0xa7, 0x06, 0xdb, 0x6b, 0x0d, 0x58, 0x5a, 0xaf, 0x80,
	0x47, 0xf0, 0x9b, 0xff, 0x49, 0xf9, 0xad, 0xc0, 0x8a, 0xbc, 0xb8, 0xd3, 0xd8, 0xe1, 0xfc, 0x64,
	0x65, 0xe0, 0x21, 0x38, 0x05, 0xe7, 0x5b, 0x26, 0xff, 0x1b, 0xb7, 0x16, 0x30, 0x06, 0x8f, 0x74,
	0x96, 0x8f, 0x6a, 0xdf, 0xde, 0xe4, 0x43, 0x65, 0x5d, 0x19, 0x29, 0x7e, 0x11, 0xf0, 0x6f, 0x48,
	0x4a, 0xa5, 0xf7, 0x74, 0xcd, 0x07, 0x8b, 0x97, 0x00, 0x1f, 0x3d, 0x71, 0xb7, 0xb1, 0xff, 0xe5,
	0xfc, 0xba, 0x7b, 0x1b, 0x28, 0xf7, 0x0e, 0x7f, 0xe1, 0x1d, 0x6c, 0xdd, 0x96, 0xf2, 0x81, 0xe4,
	0xa0, 0xba, 0x1c, 0xa7, 0xd5, 0x03, 0x0f, 0x1a, 0x4b, 0xeb, 0x50, 0xaf, 0x72, 0xc3, 0x9f, 0x14,
	0x0e, 0x8f, 0x44, 0x5f, 0x8c, 0x1d, 0x73, 0xb7, 0x4e, 0xde, 0x02, 0x00, 0x00, 0xff, 0xff, 0x57,
	0x57, 0xbf, 0xdb, 0x96, 0x02, 0x00, 0x00,
}
