// Code generated by protoc-gen-twirp v5.4.1, DO NOT EDIT.
// source: share.proto

package budao

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"
import cityhash "github.com/zhenjl/cityhash"
import glog "github.com/sumaig/glog"
import strconv "strconv"

// ======================
// ShareService Interface
// ======================

type ShareService interface {
	ShareVideoBottomPage(context.Context, *ShareVideoBottomPageRequest) (*ShareVideoBottomPageResponse, error)

	ShareTopicPage(context.Context, *ShareTopicPageRequest) (*ShareTopicPageResponse, error)
}

// ============================
// ShareService Protobuf Client
// ============================

type shareServiceProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewShareServiceProtobufClient creates a Protobuf client that implements the ShareService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewShareServiceProtobufClient(addr string, client HTTPClient) ShareService {
	prefix := urlBase(addr) + ShareServicePathPrefix
	urls := [2]string{
		prefix + "ShareVideoBottomPage",
		prefix + "ShareTopicPage",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &shareServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &shareServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *shareServiceProtobufClient) ShareVideoBottomPage(ctx context.Context, in *ShareVideoBottomPageRequest) (*ShareVideoBottomPageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "ShareService")
	ctx = ctxsetters.WithMethodName(ctx, "ShareVideoBottomPage")
	out := new(ShareVideoBottomPageResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceProtobufClient) ShareTopicPage(ctx context.Context, in *ShareTopicPageRequest) (*ShareTopicPageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "ShareService")
	ctx = ctxsetters.WithMethodName(ctx, "ShareTopicPage")
	out := new(ShareTopicPageResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ========================
// ShareService JSON Client
// ========================

type shareServiceJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewShareServiceJSONClient creates a JSON client that implements the ShareService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewShareServiceJSONClient(addr string, client HTTPClient) ShareService {
	prefix := urlBase(addr) + ShareServicePathPrefix
	urls := [2]string{
		prefix + "ShareVideoBottomPage",
		prefix + "ShareTopicPage",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &shareServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &shareServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *shareServiceJSONClient) ShareVideoBottomPage(ctx context.Context, in *ShareVideoBottomPageRequest) (*ShareVideoBottomPageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "ShareService")
	ctx = ctxsetters.WithMethodName(ctx, "ShareVideoBottomPage")
	out := new(ShareVideoBottomPageResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceJSONClient) ShareTopicPage(ctx context.Context, in *ShareTopicPageRequest) (*ShareTopicPageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "ShareService")
	ctx = ctxsetters.WithMethodName(ctx, "ShareTopicPage")
	out := new(ShareTopicPageResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===========================
// ShareService Server Handler
// ===========================

type shareServiceServer struct {
	ShareService
	hooks *twirp.ServerHooks
}

func NewShareServiceServer(svc ShareService, hooks *twirp.ServerHooks) TwirpServer {
	return &shareServiceServer{
		ShareService: svc,
		hooks:        hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *shareServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// ShareServicePathPrefix is used for all URL paths on a twirp ShareService server.
// Requests are always: POST ShareServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const ShareServicePathPrefix = "/budao.ShareService/"

func (s *shareServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "ShareService")
	ctx = ctxsetters.WithRequestIp(ctx, req.Header.Get("Remote_addr"))
	ctx = ctxsetters.WithSIG(ctx, req.Header.Get("sig"))
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/budao.ShareService/ShareVideoBottomPage":
		s.serveShareVideoBottomPage(ctx, resp, req)
		return
	case "/budao.ShareService/ShareTopicPage":
		s.serveShareTopicPage(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *shareServiceServer) serveShareVideoBottomPage(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveShareVideoBottomPageJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveShareVideoBottomPageProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *shareServiceServer) serveShareVideoBottomPageJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ShareVideoBottomPage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ShareVideoBottomPageRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *ShareVideoBottomPageResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ShareVideoBottomPage(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShareVideoBottomPageResponse and nil error while calling ShareVideoBottomPage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shareServiceServer) serveShareVideoBottomPageProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ShareVideoBottomPage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(ShareVideoBottomPageRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *ShareVideoBottomPageResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ShareVideoBottomPage(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShareVideoBottomPageResponse and nil error while calling ShareVideoBottomPage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shareServiceServer) serveShareTopicPage(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveShareTopicPageJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveShareTopicPageProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *shareServiceServer) serveShareTopicPageJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ShareTopicPage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ShareTopicPageRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *ShareTopicPageResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ShareTopicPage(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShareTopicPageResponse and nil error while calling ShareTopicPage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shareServiceServer) serveShareTopicPageProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ShareTopicPage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(ShareTopicPageRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *ShareTopicPageResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ShareTopicPage(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ShareTopicPageResponse and nil error while calling ShareTopicPage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *shareServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor8, 0
}

func (s *shareServiceServer) ProtocGenTwirpVersion() string {
	return "v5.4.1"
}

var twirpFileDescriptor8 = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xcf, 0x6a, 0xdb, 0x40,
	0x10, 0xc6, 0x91, 0x65, 0xbb, 0xf5, 0x48, 0x6e, 0xcd, 0xd2, 0x16, 0x57, 0x75, 0xc1, 0x55, 0x29,
	0xf4, 0xa4, 0x82, 0x4a, 0xe9, 0x39, 0xce, 0xc9, 0x21, 0x01, 0x23, 0x25, 0x21, 0xe4, 0x62, 0x64,
	0x69, 0x49, 0x14, 0x24, 0xad, 0xa2, 0x5d, 0x39, 0x21, 0x8f, 0x93, 0xc7, 0xc8, 0x21, 0x97, 0xbc,
	0x58, 0xd0, 0xec, 0x0a, 0xff, 0x0f, 0xb9, 0xe4, 0xb6, 0xb3, 0xdf, 0xfc, 0x56, 0xf3, 0x7d, 0xbb,
	0x02, 0x83, 0x5f, 0x06, 0x05, 0x75, 0xf2, 0x82, 0x09, 0x46, 0x5a, 0xb3, 0x32, 0x0a, 0x98, 0x65,
	0x86, 0x2c, 0x4d, 0x59, 0x26, 0x37, 0x6d, 0x1f, 0xbe, 0xf9, 0x55, 0xcf, 0x69, 0x1c, 0x51, 0x36,
	0x62, 0x42, 0xb0, 0x74, 0x12, 0x5c, 0x50, 0x8f, 0x5e, 0x97, 0x94, 0x0b, 0xf2, 0x15, 0xde, 0x0b,
	0x96, 0xc7, 0xe1, 0x34, 0x8e, 0xfa, 0xda, 0x50, 0xfb, 0xdd, 0xf1, 0xde, 0x61, 0x3d, 0x8e, 0x2a,
	0x69, 0x5e, 0x41, 0x95, 0xd4, 0x90, 0x12, 0xd6, 0xe3, 0xc8, 0x7e, 0x68, 0xc0, 0x60, 0xfb, 0xa9,
	0x3c, 0x67, 0x19, 0xa7, 0xe4, 0x17, 0xb4, 0xb9, 0x08, 0x44, 0xc9, 0xf1, 0x50, 0xc3, 0xed, 0x3a,
	0x38, 0x9b, 0xe3, 0xe3, 0xa6, 0xa7, 0x44, 0xf2, 0x07, 0x40, 0x7d, 0x5d, 0xd0, 0x14, 0x3f, 0x62,
	0xb8, 0x3d, 0xd5, 0x7a, 0x8c, 0x63, 0x08, 0x9a, 0x7a, 0x1d, 0x51, 0x2f, 0x2b, 0x40, 0xcd, 0x54,
	0x01, 0xfa, 0x0a, 0x80, 0xb3, 0x48, 0x60, 0x5e, 0x2f, 0xc9, 0x3f, 0x30, 0x83, 0x42, 0xc4, 0x61,
	0x42, 0x25, 0xd2, 0x44, 0x84, 0x28, 0x64, 0x4f, 0x4a, 0x08, 0x19, 0xc1, 0xa2, 0x20, 0xff, 0xa1,
	0x5b, 0xa5, 0x48, 0x33, 0x81, 0x18, 0xef, 0xb7, 0x86, 0xfa, 0x12, 0xb7, 0x2f, 0x35, 0xe4, 0xcc,
	0x70, 0x51, 0x70, 0xf2, 0x03, 0xcc, 0x88, 0xdd, 0x64, 0x09, 0x0b, 0xa2, 0x69, 0x59, 0x24, 0xfd,
	0x36, 0x06, 0x67, 0xd4, 0x7b, 0x27, 0x45, 0x62, 0xbb, 0xf0, 0x19, 0xb3, 0x43, 0x83, 0xaf, 0xbb,
	0x0b, 0xfb, 0x49, 0x83, 0x2f, 0xeb, 0xd0, 0x1b, 0x47, 0xed, 0x00, 0x24, 0x31, 0xaf, 0xfd, 0xeb,
	0xe8, 0xff, 0xa3, 0x02, 0x0e, 0x63, 0x2e, 0xcd, 0x77, 0x12, 0xb5, 0xda, 0x74, 0xde, 0xdc, 0x70,
	0xee, 0x3e, 0x6a, 0x60, 0xa2, 0x0b, 0x9f, 0x16, 0xf3, 0x38, 0xa4, 0x64, 0x0a, 0x9f, 0xb6, 0x3d,
	0x23, 0x62, 0xd7, 0x1e, 0x76, 0xbf, 0x5c, 0xeb, 0xe7, 0x8b, 0x3d, 0x2a, 0x9c, 0x23, 0xf8, 0xb0,
	0x1a, 0x1b, 0x19, 0x2c, 0x63, 0xeb, 0x57, 0x60, 0x7d, 0xdf, 0xa1, 0xca, 0xe3, 0x46, 0x16, 0xf4,
	0x42, 0x96, 0x3a, 0x57, 0xb7, 0x77, 0x4e, 0x3e, 0x93, 0xad, 0x13, 0xed, 0xbe, 0xa1, 0x1f, 0x9c,
	0x9d, 0xcf, 0xda, 0xf8, 0xbf, 0xfd, 0x7d, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x49, 0x8e, 0xe6,
	0x93, 0x03, 0x00, 0x00,
}
