// Code generated by protoc-gen-twirp v5.4.1, DO NOT EDIT.
// source: transfer.proto

package budao

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"
import cityhash "github.com/zhenjl/cityhash"
import glog "github.com/sumaig/glog"
import strconv "strconv"

// ==================
// Transfer Interface
// ==================

type Transfer interface {
	PostVideos(context.Context, *PostVideosRequest) (*PostVideosResponse, error)

	AuditContent(context.Context, *AuditContentRequest) (*AuditContentResponse, error)
}

// ========================
// Transfer Protobuf Client
// ========================

type transferProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewTransferProtobufClient creates a Protobuf client that implements the Transfer interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewTransferProtobufClient(addr string, client HTTPClient) Transfer {
	prefix := urlBase(addr) + TransferPathPrefix
	urls := [2]string{
		prefix + "PostVideos",
		prefix + "AuditContent",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &transferProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &transferProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *transferProtobufClient) PostVideos(ctx context.Context, in *PostVideosRequest) (*PostVideosResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "Transfer")
	ctx = ctxsetters.WithMethodName(ctx, "PostVideos")
	out := new(PostVideosResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferProtobufClient) AuditContent(ctx context.Context, in *AuditContentRequest) (*AuditContentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "Transfer")
	ctx = ctxsetters.WithMethodName(ctx, "AuditContent")
	out := new(AuditContentResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ====================
// Transfer JSON Client
// ====================

type transferJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewTransferJSONClient creates a JSON client that implements the Transfer interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewTransferJSONClient(addr string, client HTTPClient) Transfer {
	prefix := urlBase(addr) + TransferPathPrefix
	urls := [2]string{
		prefix + "PostVideos",
		prefix + "AuditContent",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &transferJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &transferJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *transferJSONClient) PostVideos(ctx context.Context, in *PostVideosRequest) (*PostVideosResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "Transfer")
	ctx = ctxsetters.WithMethodName(ctx, "PostVideos")
	out := new(PostVideosResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferJSONClient) AuditContent(ctx context.Context, in *AuditContentRequest) (*AuditContentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "Transfer")
	ctx = ctxsetters.WithMethodName(ctx, "AuditContent")
	out := new(AuditContentResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =======================
// Transfer Server Handler
// =======================

type transferServer struct {
	Transfer
	hooks *twirp.ServerHooks
}

func NewTransferServer(svc Transfer, hooks *twirp.ServerHooks) TwirpServer {
	return &transferServer{
		Transfer: svc,
		hooks:    hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *transferServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// TransferPathPrefix is used for all URL paths on a twirp Transfer server.
// Requests are always: POST TransferPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const TransferPathPrefix = "/budao.Transfer/"

func (s *transferServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "Transfer")
	ctx = ctxsetters.WithRequestIp(ctx, req.Header.Get("Remote_addr"))
	ctx = ctxsetters.WithSIG(ctx, req.Header.Get("sig"))
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/budao.Transfer/PostVideos":
		s.servePostVideos(ctx, resp, req)
		return
	case "/budao.Transfer/AuditContent":
		s.serveAuditContent(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *transferServer) servePostVideos(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePostVideosJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePostVideosProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *transferServer) servePostVideosJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PostVideos")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(PostVideosRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *PostVideosResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.PostVideos(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PostVideosResponse and nil error while calling PostVideos. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *transferServer) servePostVideosProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PostVideos")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(PostVideosRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *PostVideosResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.PostVideos(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PostVideosResponse and nil error while calling PostVideos. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *transferServer) serveAuditContent(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAuditContentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAuditContentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *transferServer) serveAuditContentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AuditContent")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(AuditContentRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *AuditContentResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.AuditContent(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AuditContentResponse and nil error while calling AuditContent. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *transferServer) serveAuditContentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AuditContent")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(AuditContentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *AuditContentResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.AuditContent(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AuditContentResponse and nil error while calling AuditContent. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *transferServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor10, 0
}

func (s *transferServer) ProtocGenTwirpVersion() string {
	return "v5.4.1"
}

var twirpFileDescriptor10 = []byte{
	// 813 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xd1, 0x72, 0xda, 0x46,
	0x14, 0xb5, 0x00, 0x63, 0xb8, 0x50, 0xbc, 0xbd, 0x76, 0x3c, 0xb2, 0x1c, 0x27, 0x84, 0xe9, 0x03,
	0xc3, 0x03, 0x0f, 0x74, 0xa6, 0x7d, 0x4c, 0x85, 0x51, 0x41, 0x21, 0x91, 0x18, 0x81, 0xe2, 0xc4,
	0x2f, 0x1a, 0x19, 0x6d, 0x6b, 0x75, 0x08, 0x52, 0x56, 0x12, 0x6d, 0xda, 0xff, 0xe8, 0x4c, 0x5f,
	0x3b, 0xd3, 0x3f, 0xea, 0x47, 0xf4, 0x33, 0x3a, 0x92, 0x16, 0x10, 0x58, 0x4c, 0xa6, 0xd3, 0x37,
	0xdd, 0x73, 0xce, 0xde, 0x7b, 0xf6, 0x68, 0xb5, 0x82, 0x46, 0xc8, 0xec, 0x65, 0xf0, 0x03, 0x65,
	0x5d, 0x9f, 0x79, 0xa1, 0x87, 0xc7, 0xf7, 0x91, 0x63, 0x7b, 0x52, 0xc3, 0xb7, 0x59, 0x40, 0x23,
	0xb6, 0x48, 0xe1, 0xd6, 0xdf, 0x05, 0xa8, 0x4e, 0xbc, 0x20, 0x7c, 0xeb, 0x3a, 0xd4, 0xc3, 0x6b,
	0x80, 0xc0, 0x8b, 0xd8, 0x9c, 0x5a, 0x2b, 0xd7, 0x11, 0x85, 0xa6, 0xd0, 0xae, 0x1a, 0xd5, 0x14,
	0x79, 0xeb, 0x3a, 0xf8, 0x1c, 0x6a, 0xab, 0x0c, 0x5f, 0x48, 0x78, 0x58, 0x6d, 0x05, 0x04, 0x8a,
	0xbe, 0x3b, 0x17, 0x8b, 0x09, 0x11, 0x3f, 0xe2, 0x15, 0x54, 0x57, 0x71, 0x6b, 0x2b, 0x62, 0x0b,
	0xb1, 0x94, 0xe0, 0x95, 0x04, 0x30, 0xd9, 0x02, 0xcf, 0xe1, 0x38, 0x74, 0xc3, 0x05, 0x15, 0x8f,
	0x13, 0x22, 0x2d, 0x62, 0xf4, 0x67, 0xd7, 0x09, 0x1f, 0xc4, 0x72, 0x53, 0x68, 0x7f, 0x61, 0xa4,
	0x05, 0x5e, 0x40, 0xf9, 0x81, 0xba, 0x3f, 0x3e, 0x84, 0xe2, 0x49, 0x02, 0xf3, 0x0a, 0x25, 0xa8,
	0x38, 0x11, 0xb3, 0x43, 0xd7, 0x5b, 0x8a, 0x95, 0x84, 0xd9, 0xd4, 0xf8, 0x2d, 0xd4, 0x69, 0xb2,
	0xb1, 0x69, 0xe2, 0x50, 0xac, 0x36, 0x85, 0x76, 0xa3, 0x77, 0xd6, 0x4d, 0xa2, 0xe8, 0x2a, 0x19,
	0xca, 0xd8, 0x11, 0xe2, 0x4b, 0x38, 0x4d, 0xeb, 0x49, 0x9c, 0x96, 0x11, 0x2d, 0xa8, 0x08, 0xc9,
	0xda, 0x27, 0x7c, 0xed, 0x2e, 0x69, 0xec, 0xab, 0x5b, 0xff, 0x08, 0x70, 0xba, 0x89, 0xd5, 0xa0,
	0x41, 0xb4, 0x08, 0xe3, 0x70, 0xb6, 0xa9, 0xc6, 0x8f, 0x7b, 0x71, 0x17, 0xf6, 0xe3, 0xde, 0xb7,
	0x5f, 0xfc, 0x1f, 0xf6, 0x4b, 0xff, 0xc5, 0x3e, 0x76, 0xa0, 0xcc, 0x12, 0xd3, 0xc9, 0x9b, 0x69,
	0xf4, 0x70, 0x3d, 0x33, 0xde, 0x53, 0xba, 0x1d, 0x83, 0x2b, 0x5a, 0x2f, 0xe1, 0xcb, 0xcd, 0x4e,
	0x03, 0x83, 0x7e, 0x8c, 0x68, 0x10, 0x62, 0x07, 0x4e, 0x38, 0x22, 0x0a, 0xcd, 0x62, 0xbb, 0xd6,
	0x23, 0xbc, 0xc3, 0x36, 0x94, 0xb5, 0xa0, 0x35, 0x02, 0xcc, 0x36, 0x08, 0x7c, 0x6f, 0x19, 0x50,
	0xec, 0x41, 0x85, 0x4f, 0x5a, 0xb7, 0xb8, 0x78, 0xd4, 0x22, 0x35, 0xb2, 0xd1, 0xb5, 0x3e, 0xc2,
	0x99, 0x1c, 0x39, 0x6e, 0x78, 0xe3, 0x2d, 0x43, 0xba, 0x0c, 0xd7, 0x66, 0xae, 0x01, 0xe6, 0x29,
	0x62, 0xf1, 0xfc, 0x4b, 0x46, 0x95, 0x23, 0xaa, 0x83, 0x22, 0x9c, 0xf0, 0x82, 0xbf, 0x82, 0x75,
	0x89, 0x2f, 0xa0, 0xbe, 0x5e, 0x18, 0x7e, 0xf2, 0x29, 0x3f, 0xd7, 0x35, 0x8e, 0xcd, 0x3e, 0xf9,
	0xb4, 0xf5, 0x87, 0x00, 0xe7, 0xbb, 0x33, 0xb9, 0xff, 0xcf, 0x0c, 0xdd, 0x26, 0x5c, 0xf8, 0x5c,
	0xc2, 0xf8, 0x0d, 0xd4, 0xed, 0x78, 0x84, 0xc5, 0x57, 0xec, 0x9d, 0x83, 0x64, 0x3c, 0x5f, 0x52,
	0xb3, 0xb7, 0x45, 0xe7, 0xaf, 0x12, 0xd4, 0xb3, 0xa7, 0x04, 0xaf, 0xe1, 0x52, 0xb1, 0x32, 0x80,
	0x75, 0x63, 0xc8, 0xb7, 0xaf, 0xad, 0x77, 0xea, 0xd0, 0x94, 0xc9, 0x11, 0x3e, 0x03, 0x29, 0x8f,
	0x1e, 0xe8, 0xe6, 0x7b, 0x55, 0x23, 0x02, 0x36, 0xe1, 0x69, 0x1e, 0x3f, 0x36, 0x65, 0x75, 0x3a,
	0xd2, 0x4d, 0x52, 0xc0, 0xaf, 0xa0, 0x99, 0xa7, 0xd0, 0x14, 0x75, 0x24, 0x6b, 0x03, 0x53, 0xd6,
	0xee, 0x54, 0x52, 0xc4, 0xa7, 0x20, 0xe6, 0xa9, 0x5e, 0xa9, 0x63, 0x85, 0x94, 0x0e, 0xb9, 0x18,
	0xc9, 0xfa, 0x58, 0xd6, 0xc8, 0xf1, 0xa1, 0xd5, 0x7d, 0xbd, 0xaf, 0x93, 0x32, 0x3e, 0x87, 0xab,
	0x3c, 0xf6, 0x8d, 0x2a, 0xeb, 0x13, 0x59, 0x25, 0x27, 0x87, 0xda, 0xbf, 0x51, 0xd4, 0x98, 0xaf,
	0x1c, 0xca, 0xa8, 0x7f, 0x37, 0x92, 0x35, 0x52, 0x3d, 0x44, 0xdf, 0x2a, 0x6a, 0x5f, 0x27, 0x80,
	0x12, 0x5c, 0xe4, 0xd1, 0xaf, 0x55, 0x52, 0xc3, 0x16, 0x3c, 0xcb, 0xe3, 0xbe, 0x57, 0xd4, 0x81,
	0xaa, 0x4c, 0x47, 0xa6, 0x4e, 0xea, 0xf8, 0x02, 0xae, 0xf3, 0x34, 0xef, 0x65, 0x6d, 0x38, 0x34,
	0x65, 0x6d, 0x48, 0x1a, 0x78, 0x09, 0x4f, 0x76, 0x25, 0xfa, 0xad, 0x66, 0xe9, 0x93, 0x29, 0x99,
	0xe7, 0x53, 0x37, 0x03, 0x8d, 0x38, 0x8f, 0x8d, 0xc5, 0xd4, 0x4c, 0x99, 0xce, 0x08, 0xed, 0xfc,
	0x06, 0xb5, 0xcc, 0xb1, 0xc3, 0x33, 0x38, 0x55, 0xac, 0x6d, 0x6d, 0xe9, 0x63, 0x72, 0x94, 0xee,
	0x3b, 0x03, 0x4e, 0x29, 0x5b, 0x51, 0x66, 0x29, 0x8c, 0x79, 0x8c, 0x08, 0x8f, 0xe8, 0x89, 0xcd,
	0xec, 0x0f, 0x01, 0xa7, 0x0b, 0xa9, 0xb1, 0x0c, 0x6d, 0x50, 0x9f, 0xda, 0x21, 0x75, 0x48, 0xb1,
	0xf3, 0x1d, 0xd4, 0xb3, 0x27, 0x18, 0x2f, 0x00, 0x15, 0x2b, 0x03, 0x58, 0x13, 0x3b, 0x08, 0xc8,
	0x11, 0x8a, 0x70, 0xbe, 0x8b, 0x9b, 0x4b, 0x3f, 0x66, 0x84, 0xde, 0xef, 0x02, 0x54, 0x66, 0xfc,
	0x67, 0x87, 0x32, 0xc0, 0xf6, 0x32, 0x41, 0x71, 0xff, 0xca, 0x58, 0x5f, 0x50, 0xd2, 0x65, 0x0e,
	0xc3, 0xbf, 0xdc, 0x21, 0xd4, 0xb3, 0x5f, 0x34, 0x4a, 0x5c, 0x9a, 0x73, 0xb5, 0x48, 0x57, 0xb9,
	0x5c, 0xda, 0xa8, 0x2f, 0x01, 0x99, 0x7b, 0x1f, 0xba, 0x3f, 0xfd, 0xf2, 0x6b, 0xd7, 0xbf, 0x4f,
	0x85, 0x13, 0xe1, 0xcf, 0x42, 0xf1, 0xd5, 0xbb, 0xbb, 0xfb, 0x72, 0xf2, 0xfb, 0xfd, 0xfa, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x92, 0xcd, 0x36, 0x50, 0xa7, 0x07, 0x00, 0x00,
}
