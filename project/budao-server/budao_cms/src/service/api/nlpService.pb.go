// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nlpService.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SimCommentResponse struct {
	Code string      `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Msg  string      `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Data []*Sentence `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *SimCommentResponse) Reset()                    { *m = SimCommentResponse{} }
func (m *SimCommentResponse) String() string            { return proto.CompactTextString(m) }
func (*SimCommentResponse) ProtoMessage()               {}
func (*SimCommentResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *SimCommentResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *SimCommentResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SimCommentResponse) GetData() []*Sentence {
	if m != nil {
		return m.Data
	}
	return nil
}

type SimCommentRequest struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *SimCommentRequest) Reset()                    { *m = SimCommentRequest{} }
func (m *SimCommentRequest) String() string            { return proto.CompactTextString(m) }
func (*SimCommentRequest) ProtoMessage()               {}
func (*SimCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *SimCommentRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*SimCommentResponse)(nil), "api.SimCommentResponse")
	proto.RegisterType((*SimCommentRequest)(nil), "api.SimCommentRequest")
}

func init() { proto.RegisterFile("nlpService.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0xcb, 0x29, 0x08,
	0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c,
	0xc8, 0x94, 0x12, 0x28, 0xce, 0xcc, 0x75, 0xce, 0xcf, 0xcd, 0x4d, 0xcd, 0x2b, 0x81, 0x08, 0x2b,
	0xc5, 0x72, 0x09, 0x05, 0xc3, 0xc5, 0x82, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x84,
	0xb8, 0x58, 0x92, 0xf3, 0x53, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21,
	0x01, 0x2e, 0xe6, 0xdc, 0xe2, 0x74, 0x09, 0x26, 0xb0, 0x10, 0x88, 0x29, 0xa4, 0xc8, 0xc5, 0x92,
	0x92, 0x58, 0x92, 0x28, 0xc1, 0xac, 0xc0, 0xac, 0xc1, 0x6d, 0xc4, 0xab, 0x97, 0x58, 0x90, 0xa9,
	0x17, 0x9c, 0x9a, 0x57, 0x92, 0x9a, 0x97, 0x9c, 0x1a, 0x04, 0x96, 0x52, 0xd2, 0xe5, 0x12, 0x44,
	0x36, 0xbe, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x82, 0x8b, 0x3d, 0x39, 0x1f, 0xa4, 0xac, 0x04,
	0x6a, 0x01, 0x8c, 0x6b, 0xe4, 0xcd, 0xc5, 0xe5, 0x07, 0x77, 0xb8, 0x90, 0x2d, 0x17, 0x17, 0xc2,
	0xbd, 0x42, 0x62, 0x10, 0xf3, 0xd1, 0x4d, 0x93, 0x12, 0xc7, 0x10, 0x87, 0x78, 0x22, 0x89, 0x0d,
	0xec, 0x43, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x32, 0x7e, 0xec, 0x2f, 0x0c, 0x01, 0x00,
	0x00,
}
