// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package mms_report_interface

import (
	"bytes"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// 监控/举报信息签名认证包
//
// Attributes:
//  - AppKey: 密钥编码
//  - Sign: 签名
//  - SignParNames: 签名参数名列表
type MmsSign struct {
	AppKey       string   `thrift:"appKey,1" db:"appKey" json:"appKey"`
	Sign         string   `thrift:"sign,2" db:"sign" json:"sign"`
	SignParNames []string `thrift:"signParNames,3" db:"signParNames" json:"signParNames"`
}

func NewMmsSign() *MmsSign {
	return &MmsSign{}
}

func (p *MmsSign) GetAppKey() string {
	return p.AppKey
}

func (p *MmsSign) GetSign() string {
	return p.Sign
}

func (p *MmsSign) GetSignParNames() []string {
	return p.SignParNames
}
func (p *MmsSign) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MmsSign) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppKey = v
	}
	return nil
}

func (p *MmsSign) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Sign = v
	}
	return nil
}

func (p *MmsSign) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.SignParNames = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.SignParNames = append(p.SignParNames, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MmsSign) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MmsSign"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MmsSign) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appKey", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appKey (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appKey: ", p), err)
	}
	return err
}

func (p *MmsSign) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sign", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sign: ", p), err)
	}
	if err := oprot.WriteString(string(p.Sign)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sign (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sign: ", p), err)
	}
	return err
}

func (p *MmsSign) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("signParNames", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:signParNames: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.SignParNames)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SignParNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:signParNames: ", p), err)
	}
	return err
}

func (p *MmsSign) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MmsSign(%+v)", *p)
}

// 监控/举报信息上传附件
//
// Attributes:
//  - AttcType: 上报类型TEXT，IMG，AUDIO，VIDEO，VIDEO_FILE，JSON
//  - AttcText: 上报文本，由产品接入方按照规定 json 结构上传，接入服务按照给定格式检查
//  - AttcUrl: 上报链接
//  - AttcFile: (取消)二进制文件
type MmsReportAttc struct {
	AttcType string `thrift:"attcType,1" db:"attcType" json:"attcType"`
	AttcText string `thrift:"attcText,2" db:"attcText" json:"attcText"`
	AttcUrl  string `thrift:"attcUrl,3" db:"attcUrl" json:"attcUrl"`
	AttcFile []byte `thrift:"attcFile,4" db:"attcFile" json:"attcFile"`
}

func NewMmsReportAttc() *MmsReportAttc {
	return &MmsReportAttc{}
}

func (p *MmsReportAttc) GetAttcType() string {
	return p.AttcType
}

func (p *MmsReportAttc) GetAttcText() string {
	return p.AttcText
}

func (p *MmsReportAttc) GetAttcUrl() string {
	return p.AttcUrl
}

func (p *MmsReportAttc) GetAttcFile() []byte {
	return p.AttcFile
}
func (p *MmsReportAttc) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MmsReportAttc) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AttcType = v
	}
	return nil
}

func (p *MmsReportAttc) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AttcText = v
	}
	return nil
}

func (p *MmsReportAttc) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AttcUrl = v
	}
	return nil
}

func (p *MmsReportAttc) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AttcFile = v
	}
	return nil
}

func (p *MmsReportAttc) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MmsReportAttc"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MmsReportAttc) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attcType", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:attcType: ", p), err)
	}
	if err := oprot.WriteString(string(p.AttcType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attcType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:attcType: ", p), err)
	}
	return err
}

func (p *MmsReportAttc) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attcText", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attcText: ", p), err)
	}
	if err := oprot.WriteString(string(p.AttcText)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attcText (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attcText: ", p), err)
	}
	return err
}

func (p *MmsReportAttc) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attcUrl", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:attcUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.AttcUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attcUrl (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:attcUrl: ", p), err)
	}
	return err
}

func (p *MmsReportAttc) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attcFile", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attcFile: ", p), err)
	}
	if err := oprot.WriteBinary(p.AttcFile); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attcFile (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attcFile: ", p), err)
	}
	return err
}

func (p *MmsReportAttc) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MmsReportAttc(%+v)", *p)
}

// 监控/举报信息
//
// Attributes:
//  - Serial: 流水号（视频流系列编号 programid）
//  - UID: 待审用户uid
//  - ReportTime: 上报时间
//  - ReportComment: 上报主体 （备注）， 由接入双方按照约定 json 结构上传，接入服务按照给定格式检查
//  - Attachments: 上报附件
//  - UploadUid: 上传人uid（非必填）
//  - Severity: 举报级别（非必填）
//  - Sid: 频道ID（非必填）
//  - Ssid: 子频道ID（非必填）
//  - Owid: OWID（非必填）
//  - Pcu: 人气（非必填）
//  - ExtPar: 附带参数（非必填）
//  - Title: 标题
type MmsReport struct {
	Serial        string           `thrift:"serial,1" db:"serial" json:"serial"`
	UID           int64            `thrift:"uid,2" db:"uid" json:"uid"`
	ReportTime    string           `thrift:"reportTime,3" db:"reportTime" json:"reportTime"`
	ReportComment string           `thrift:"reportComment,4" db:"reportComment" json:"reportComment"`
	Attachments   []*MmsReportAttc `thrift:"attachments,5" db:"attachments" json:"attachments"`
	UploadUid     int64            `thrift:"uploadUid,6" db:"uploadUid" json:"uploadUid"`
	Severity      string           `thrift:"severity,7" db:"severity" json:"severity"`
	Sid           int64            `thrift:"sid,8" db:"sid" json:"sid"`
	Ssid          int64            `thrift:"ssid,9" db:"ssid" json:"ssid"`
	Owid          int64            `thrift:"owid,10" db:"owid" json:"owid"`
	Pcu           int64            `thrift:"pcu,11" db:"pcu" json:"pcu"`
	ExtPar        string           `thrift:"extPar,12" db:"extPar" json:"extPar"`
	Title         string           `thrift:"title,13" db:"title" json:"title"`
}

func NewMmsReport() *MmsReport {
	return &MmsReport{}
}

func (p *MmsReport) GetSerial() string {
	return p.Serial
}

func (p *MmsReport) GetUID() int64 {
	return p.UID
}

func (p *MmsReport) GetReportTime() string {
	return p.ReportTime
}

func (p *MmsReport) GetReportComment() string {
	return p.ReportComment
}

func (p *MmsReport) GetAttachments() []*MmsReportAttc {
	return p.Attachments
}

func (p *MmsReport) GetUploadUid() int64 {
	return p.UploadUid
}

func (p *MmsReport) GetSeverity() string {
	return p.Severity
}

func (p *MmsReport) GetSid() int64 {
	return p.Sid
}

func (p *MmsReport) GetSsid() int64 {
	return p.Ssid
}

func (p *MmsReport) GetOwid() int64 {
	return p.Owid
}

func (p *MmsReport) GetPcu() int64 {
	return p.Pcu
}

func (p *MmsReport) GetExtPar() string {
	return p.ExtPar
}

func (p *MmsReport) GetTitle() string {
	return p.Title
}
func (p *MmsReport) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MmsReport) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Serial = v
	}
	return nil
}

func (p *MmsReport) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UID = v
	}
	return nil
}

func (p *MmsReport) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ReportTime = v
	}
	return nil
}

func (p *MmsReport) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ReportComment = v
	}
	return nil
}

func (p *MmsReport) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*MmsReportAttc, 0, size)
	p.Attachments = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &MmsReportAttc{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Attachments = append(p.Attachments, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MmsReport) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.UploadUid = v
	}
	return nil
}

func (p *MmsReport) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Severity = v
	}
	return nil
}

func (p *MmsReport) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Sid = v
	}
	return nil
}

func (p *MmsReport) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Ssid = v
	}
	return nil
}

func (p *MmsReport) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Owid = v
	}
	return nil
}

func (p *MmsReport) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Pcu = v
	}
	return nil
}

func (p *MmsReport) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.ExtPar = v
	}
	return nil
}

func (p *MmsReport) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *MmsReport) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MmsReport"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MmsReport) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serial", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serial: ", p), err)
	}
	if err := oprot.WriteString(string(p.Serial)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serial (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serial: ", p), err)
	}
	return err
}

func (p *MmsReport) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err)
	}
	return err
}

func (p *MmsReport) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reportTime", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reportTime: ", p), err)
	}
	if err := oprot.WriteString(string(p.ReportTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reportTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reportTime: ", p), err)
	}
	return err
}

func (p *MmsReport) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reportComment", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reportComment: ", p), err)
	}
	if err := oprot.WriteString(string(p.ReportComment)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reportComment (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reportComment: ", p), err)
	}
	return err
}

func (p *MmsReport) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attachments", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:attachments: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Attachments)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Attachments {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:attachments: ", p), err)
	}
	return err
}

func (p *MmsReport) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uploadUid", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:uploadUid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UploadUid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uploadUid (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:uploadUid: ", p), err)
	}
	return err
}

func (p *MmsReport) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("severity", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:severity: ", p), err)
	}
	if err := oprot.WriteString(string(p.Severity)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.severity (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:severity: ", p), err)
	}
	return err
}

func (p *MmsReport) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sid", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Sid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sid (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sid: ", p), err)
	}
	return err
}

func (p *MmsReport) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ssid", thrift.I64, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ssid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Ssid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ssid (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ssid: ", p), err)
	}
	return err
}

func (p *MmsReport) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("owid", thrift.I64, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:owid: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Owid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.owid (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:owid: ", p), err)
	}
	return err
}

func (p *MmsReport) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pcu", thrift.I64, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:pcu: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Pcu)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pcu (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:pcu: ", p), err)
	}
	return err
}

func (p *MmsReport) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extPar", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:extPar: ", p), err)
	}
	if err := oprot.WriteString(string(p.ExtPar)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.extPar (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:extPar: ", p), err)
	}
	return err
}

func (p *MmsReport) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:title: ", p), err)
	}
	return err
}

func (p *MmsReport) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MmsReport(%+v)", *p)
}

// 监控/举报信息上传请求包
//
// Attributes:
//  - MmsSign: 认证签名
//  - Chid: 通道ID
//  - Appid: 应用appid
//  - Reports: 上报材料
type MmsReportReq struct {
	MmsSign *MmsSign     `thrift:"mmsSign,1" db:"mmsSign" json:"mmsSign"`
	Chid    string       `thrift:"chid,2" db:"chid" json:"chid"`
	Appid   string       `thrift:"appid,3" db:"appid" json:"appid"`
	Reports []*MmsReport `thrift:"reports,4" db:"reports" json:"reports"`
}

func NewMmsReportReq() *MmsReportReq {
	return &MmsReportReq{}
}

var MmsReportReq_MmsSign_DEFAULT *MmsSign

func (p *MmsReportReq) GetMmsSign() *MmsSign {
	if !p.IsSetMmsSign() {
		return MmsReportReq_MmsSign_DEFAULT
	}
	return p.MmsSign
}

func (p *MmsReportReq) GetChid() string {
	return p.Chid
}

func (p *MmsReportReq) GetAppid() string {
	return p.Appid
}

func (p *MmsReportReq) GetReports() []*MmsReport {
	return p.Reports
}
func (p *MmsReportReq) IsSetMmsSign() bool {
	return p.MmsSign != nil
}

func (p *MmsReportReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MmsReportReq) ReadField1(iprot thrift.TProtocol) error {
	p.MmsSign = &MmsSign{}
	if err := p.MmsSign.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MmsSign), err)
	}
	return nil
}

func (p *MmsReportReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Chid = v
	}
	return nil
}

func (p *MmsReportReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Appid = v
	}
	return nil
}

func (p *MmsReportReq) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*MmsReport, 0, size)
	p.Reports = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &MmsReport{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Reports = append(p.Reports, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MmsReportReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MmsReportReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MmsReportReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mmsSign", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mmsSign: ", p), err)
	}
	if err := p.MmsSign.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MmsSign), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mmsSign: ", p), err)
	}
	return err
}

func (p *MmsReportReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Chid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chid: ", p), err)
	}
	return err
}

func (p *MmsReportReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appid", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Appid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appid: ", p), err)
	}
	return err
}

func (p *MmsReportReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reports", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reports: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Reports)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Reports {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reports: ", p), err)
	}
	return err
}

func (p *MmsReportReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MmsReportReq(%+v)", *p)
}

// 监控/举报信息响应记录
//
// Attributes:
//  - Code: 编码
//  - Msg: 反馈
//  - Serial: 流水号
type MmsReportRspRec struct {
	Code   int32  `thrift:"code,1" db:"code" json:"code"`
	Msg    string `thrift:"msg,2" db:"msg" json:"msg"`
	Serial string `thrift:"serial,3" db:"serial" json:"serial"`
}

func NewMmsReportRspRec() *MmsReportRspRec {
	return &MmsReportRspRec{}
}

func (p *MmsReportRspRec) GetCode() int32 {
	return p.Code
}

func (p *MmsReportRspRec) GetMsg() string {
	return p.Msg
}

func (p *MmsReportRspRec) GetSerial() string {
	return p.Serial
}
func (p *MmsReportRspRec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MmsReportRspRec) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *MmsReportRspRec) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *MmsReportRspRec) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Serial = v
	}
	return nil
}

func (p *MmsReportRspRec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MmsReportRspRec"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MmsReportRspRec) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *MmsReportRspRec) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *MmsReportRspRec) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serial", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serial: ", p), err)
	}
	if err := oprot.WriteString(string(p.Serial)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serial (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serial: ", p), err)
	}
	return err
}

func (p *MmsReportRspRec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MmsReportRspRec(%+v)", *p)
}

// 监控/举报信息响应
//
// Attributes:
//  - Code: 编码
//  - Msg: 反馈
//  - MmsReportRspRecs: 流水号
type MmsReportRsp struct {
	Code             int32              `thrift:"code,1" db:"code" json:"code"`
	Msg              string             `thrift:"msg,2" db:"msg" json:"msg"`
	MmsReportRspRecs []*MmsReportRspRec `thrift:"mmsReportRspRecs,3" db:"mmsReportRspRecs" json:"mmsReportRspRecs"`
}

func NewMmsReportRsp() *MmsReportRsp {
	return &MmsReportRsp{}
}

func (p *MmsReportRsp) GetCode() int32 {
	return p.Code
}

func (p *MmsReportRsp) GetMsg() string {
	return p.Msg
}

func (p *MmsReportRsp) GetMmsReportRspRecs() []*MmsReportRspRec {
	return p.MmsReportRspRecs
}
func (p *MmsReportRsp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MmsReportRsp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *MmsReportRsp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *MmsReportRsp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*MmsReportRspRec, 0, size)
	p.MmsReportRspRecs = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &MmsReportRspRec{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.MmsReportRspRecs = append(p.MmsReportRspRecs, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MmsReportRsp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MmsReportRsp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MmsReportRsp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *MmsReportRsp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *MmsReportRsp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mmsReportRspRecs", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mmsReportRspRecs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MmsReportRspRecs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MmsReportRspRecs {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mmsReportRspRecs: ", p), err)
	}
	return err
}

func (p *MmsReportRsp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MmsReportRsp(%+v)", *p)
}

// 处罚指令执行请求包
//
// Attributes:
//  - AppKey: 密钥编码
//  - Serial: 流水号
//  - Cmd: 指令
//  - Reason: 处罚理由
//  - Msg: 反馈信息
//  - ExtPar: 附带参数
//  - Sign: 签名
//  - Status: 审核状态
type MmsReportCmdReq struct {
	AppKey string `thrift:"appKey,1" db:"appKey" json:"appKey"`
	Serial string `thrift:"serial,2" db:"serial" json:"serial"`
	Cmd    string `thrift:"cmd,3" db:"cmd" json:"cmd"`
	Reason string `thrift:"reason,4" db:"reason" json:"reason"`
	Msg    string `thrift:"msg,5" db:"msg" json:"msg"`
	ExtPar string `thrift:"extPar,6" db:"extPar" json:"extPar"`
	Sign   string `thrift:"sign,7" db:"sign" json:"sign"`
	Status string `thrift:"status,8" db:"status" json:"status"`
}

func NewMmsReportCmdReq() *MmsReportCmdReq {
	return &MmsReportCmdReq{}
}

func (p *MmsReportCmdReq) GetAppKey() string {
	return p.AppKey
}

func (p *MmsReportCmdReq) GetSerial() string {
	return p.Serial
}

func (p *MmsReportCmdReq) GetCmd() string {
	return p.Cmd
}

func (p *MmsReportCmdReq) GetReason() string {
	return p.Reason
}

func (p *MmsReportCmdReq) GetMsg() string {
	return p.Msg
}

func (p *MmsReportCmdReq) GetExtPar() string {
	return p.ExtPar
}

func (p *MmsReportCmdReq) GetSign() string {
	return p.Sign
}

func (p *MmsReportCmdReq) GetStatus() string {
	return p.Status
}
func (p *MmsReportCmdReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MmsReportCmdReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppKey = v
	}
	return nil
}

func (p *MmsReportCmdReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Serial = v
	}
	return nil
}

func (p *MmsReportCmdReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Cmd = v
	}
	return nil
}

func (p *MmsReportCmdReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Reason = v
	}
	return nil
}

func (p *MmsReportCmdReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *MmsReportCmdReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ExtPar = v
	}
	return nil
}

func (p *MmsReportCmdReq) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Sign = v
	}
	return nil
}

func (p *MmsReportCmdReq) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *MmsReportCmdReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MmsReportCmdReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MmsReportCmdReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appKey", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appKey (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appKey: ", p), err)
	}
	return err
}

func (p *MmsReportCmdReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serial", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serial: ", p), err)
	}
	if err := oprot.WriteString(string(p.Serial)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serial (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serial: ", p), err)
	}
	return err
}

func (p *MmsReportCmdReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cmd", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cmd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Cmd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cmd (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cmd: ", p), err)
	}
	return err
}

func (p *MmsReportCmdReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reason", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reason: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reason (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reason: ", p), err)
	}
	return err
}

func (p *MmsReportCmdReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:msg: ", p), err)
	}
	return err
}

func (p *MmsReportCmdReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extPar", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:extPar: ", p), err)
	}
	if err := oprot.WriteString(string(p.ExtPar)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.extPar (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:extPar: ", p), err)
	}
	return err
}

func (p *MmsReportCmdReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sign", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:sign: ", p), err)
	}
	if err := oprot.WriteString(string(p.Sign)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sign (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:sign: ", p), err)
	}
	return err
}

func (p *MmsReportCmdReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:status: ", p), err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:status: ", p), err)
	}
	return err
}

func (p *MmsReportCmdReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MmsReportCmdReq(%+v)", *p)
}

// 处罚指令执行结果
//
// Attributes:
//  - Code: 编码
//  - Msg: 反馈
type MmsReportCmdRsp struct {
	Code int32  `thrift:"code,1" db:"code" json:"code"`
	Msg  string `thrift:"msg,2" db:"msg" json:"msg"`
}

func NewMmsReportCmdRsp() *MmsReportCmdRsp {
	return &MmsReportCmdRsp{}
}

func (p *MmsReportCmdRsp) GetCode() int32 {
	return p.Code
}

func (p *MmsReportCmdRsp) GetMsg() string {
	return p.Msg
}
func (p *MmsReportCmdRsp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MmsReportCmdRsp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *MmsReportCmdRsp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *MmsReportCmdRsp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MmsReportCmdRsp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MmsReportCmdRsp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *MmsReportCmdRsp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *MmsReportCmdRsp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MmsReportCmdRsp(%+v)", *p)
}

// 查询审核结果
//
// Attributes:
//  - Serial
//  - Status
//  - Reason
type AuditResult_ struct {
	Serial string `thrift:"serial,1" db:"serial" json:"serial"`
	Status string `thrift:"status,2" db:"status" json:"status"`
	Reason string `thrift:"reason,3" db:"reason" json:"reason"`
}

func NewAuditResult_() *AuditResult_ {
	return &AuditResult_{}
}

func (p *AuditResult_) GetSerial() string {
	return p.Serial
}

func (p *AuditResult_) GetStatus() string {
	return p.Status
}

func (p *AuditResult_) GetReason() string {
	return p.Reason
}
func (p *AuditResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuditResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Serial = v
	}
	return nil
}

func (p *AuditResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *AuditResult_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Reason = v
	}
	return nil
}

func (p *AuditResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AuditResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuditResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serial", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serial: ", p), err)
	}
	if err := oprot.WriteString(string(p.Serial)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serial (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serial: ", p), err)
	}
	return err
}

func (p *AuditResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err)
	}
	if err := oprot.WriteString(string(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err)
	}
	return err
}

func (p *AuditResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reason", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reason: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reason (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reason: ", p), err)
	}
	return err
}

func (p *AuditResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuditResult_(%+v)", *p)
}

type BaseMmsThriftServ interface { //基本的接口，其他接口类都需要继承此类
	//

	Ping(ctx context.Context) (err error)
	// Parameters:
	//  - RandomId
	PingWithParam(ctx context.Context, randomId int32) (err error)
}

//基本的接口，其他接口类都需要继承此类
//
type BaseMmsThriftServClient struct {
	c thrift.TClient
}

func NewBaseMmsThriftServClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BaseMmsThriftServClient {
	return &BaseMmsThriftServClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewBaseMmsThriftServClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BaseMmsThriftServClient {
	return &BaseMmsThriftServClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewBaseMmsThriftServClient(c thrift.TClient) *BaseMmsThriftServClient {
	return &BaseMmsThriftServClient{
		c: c,
	}
}

func (p *BaseMmsThriftServClient) Client_() thrift.TClient {
	return p.c
}
func (p *BaseMmsThriftServClient) Ping(ctx context.Context) (err error) {
	var _args4 BaseMmsThriftServPingArgs
	var _result5 BaseMmsThriftServPingResult
	if err = p.Client_().Call(ctx, "ping", &_args4, &_result5); err != nil {
		return
	}
	return nil
}

// Parameters:
//  - RandomId
func (p *BaseMmsThriftServClient) PingWithParam(ctx context.Context, randomId int32) (err error) {
	var _args6 BaseMmsThriftServPingWithParamArgs
	_args6.RandomId = randomId
	var _result7 BaseMmsThriftServPingWithParamResult
	if err = p.Client_().Call(ctx, "pingWithParam", &_args6, &_result7); err != nil {
		return
	}
	return nil
}

type BaseMmsThriftServProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BaseMmsThriftServ
}

func (p *BaseMmsThriftServProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BaseMmsThriftServProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BaseMmsThriftServProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBaseMmsThriftServProcessor(handler BaseMmsThriftServ) *BaseMmsThriftServProcessor {

	self8 := &BaseMmsThriftServProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self8.processorMap["ping"] = &baseMmsThriftServProcessorPing{handler: handler}
	self8.processorMap["pingWithParam"] = &baseMmsThriftServProcessorPingWithParam{handler: handler}
	return self8
}

func (p *BaseMmsThriftServProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x9.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x9

}

type baseMmsThriftServProcessorPing struct {
	handler BaseMmsThriftServ
}

func (p *baseMmsThriftServProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BaseMmsThriftServPingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BaseMmsThriftServPingResult{}
	var err2 error
	if err2 = p.handler.Ping(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: "+err2.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type baseMmsThriftServProcessorPingWithParam struct {
	handler BaseMmsThriftServ
}

func (p *baseMmsThriftServProcessorPingWithParam) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BaseMmsThriftServPingWithParamArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("pingWithParam", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BaseMmsThriftServPingWithParamResult{}
	var err2 error
	if err2 = p.handler.PingWithParam(ctx, args.RandomId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing pingWithParam: "+err2.Error())
		oprot.WriteMessageBegin("pingWithParam", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("pingWithParam", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type BaseMmsThriftServPingArgs struct {
}

func NewBaseMmsThriftServPingArgs() *BaseMmsThriftServPingArgs {
	return &BaseMmsThriftServPingArgs{}
}

func (p *BaseMmsThriftServPingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseMmsThriftServPingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ping_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseMmsThriftServPingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseMmsThriftServPingArgs(%+v)", *p)
}

type BaseMmsThriftServPingResult struct {
}

func NewBaseMmsThriftServPingResult() *BaseMmsThriftServPingResult {
	return &BaseMmsThriftServPingResult{}
}

func (p *BaseMmsThriftServPingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseMmsThriftServPingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ping_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseMmsThriftServPingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseMmsThriftServPingResult(%+v)", *p)
}

// Attributes:
//  - RandomId
type BaseMmsThriftServPingWithParamArgs struct {
	RandomId int32 `thrift:"randomId,1" db:"randomId" json:"randomId"`
}

func NewBaseMmsThriftServPingWithParamArgs() *BaseMmsThriftServPingWithParamArgs {
	return &BaseMmsThriftServPingWithParamArgs{}
}

func (p *BaseMmsThriftServPingWithParamArgs) GetRandomId() int32 {
	return p.RandomId
}
func (p *BaseMmsThriftServPingWithParamArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseMmsThriftServPingWithParamArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RandomId = v
	}
	return nil
}

func (p *BaseMmsThriftServPingWithParamArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("pingWithParam_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseMmsThriftServPingWithParamArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("randomId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:randomId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RandomId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.randomId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:randomId: ", p), err)
	}
	return err
}

func (p *BaseMmsThriftServPingWithParamArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseMmsThriftServPingWithParamArgs(%+v)", *p)
}

type BaseMmsThriftServPingWithParamResult struct {
}

func NewBaseMmsThriftServPingWithParamResult() *BaseMmsThriftServPingWithParamResult {
	return &BaseMmsThriftServPingWithParamResult{}
}

func (p *BaseMmsThriftServPingWithParamResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BaseMmsThriftServPingWithParamResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("pingWithParam_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BaseMmsThriftServPingWithParamResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseMmsThriftServPingWithParamResult(%+v)", *p)
}

type MmsReportServ interface {
	BaseMmsThriftServ
	//服务接口
	//

	//  推送监控、举报记录        由接入方实现客户端。对接到监控系统服务器
	// @param MmsReportReq 举报信息列表
	// @return MmsReportRsp
	//
	// Parameters:
	//  - MmsReportReq
	PushReports(ctx context.Context, mmsReportReq *MmsReportReq) (r *MmsReportRsp, err error)
	//  推送处罚指令    由接入方实现服务端，供监控系统调用
	// @param MmsReportCmdReq 处罚指令
	// @return MmsReportCmdRsp 处罚指令执行结果
	//
	// Parameters:
	//  - MmsReportCmdReq
	PushReportsCmd(ctx context.Context, mmsReportCmdReq *MmsReportCmdReq) (r *MmsReportCmdRsp, err error)
	//  批量查询审核记录
	// @param serialList 流水号列表
	// @return AuditResult 查询结果
	//
	// Parameters:
	//  - SerialList
	//  - AppId
	BatchQueryAuditStatus(ctx context.Context, serialList []string, appId string) (r []*AuditResult_, err error)
}

//服务接口
//
type MmsReportServClient struct {
	*BaseMmsThriftServClient
}

func NewMmsReportServClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MmsReportServClient {
	return &MmsReportServClient{BaseMmsThriftServClient: NewBaseMmsThriftServClientFactory(t, f)}
}

func NewMmsReportServClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MmsReportServClient {
	return &MmsReportServClient{BaseMmsThriftServClient: NewBaseMmsThriftServClientProtocol(t, iprot, oprot)}
}

func NewMmsReportServClient(c thrift.TClient) *MmsReportServClient {
	return &MmsReportServClient{
		BaseMmsThriftServClient: NewBaseMmsThriftServClient(c),
	}
}

//  推送监控、举报记录        由接入方实现客户端。对接到监控系统服务器
// @param MmsReportReq 举报信息列表
// @return MmsReportRsp
//
// Parameters:
//  - MmsReportReq
func (p *MmsReportServClient) PushReports(ctx context.Context, mmsReportReq *MmsReportReq) (r *MmsReportRsp, err error) {
	var _args11 MmsReportServPushReportsArgs
	_args11.MmsReportReq = mmsReportReq
	var _result12 MmsReportServPushReportsResult
	if err = p.Client_().Call(ctx, "pushReports", &_args11, &_result12); err != nil {
		return
	}
	return _result12.GetSuccess(), nil
}

//  推送处罚指令    由接入方实现服务端，供监控系统调用
// @param MmsReportCmdReq 处罚指令
// @return MmsReportCmdRsp 处罚指令执行结果
//
// Parameters:
//  - MmsReportCmdReq
func (p *MmsReportServClient) PushReportsCmd(ctx context.Context, mmsReportCmdReq *MmsReportCmdReq) (r *MmsReportCmdRsp, err error) {
	var _args13 MmsReportServPushReportsCmdArgs
	_args13.MmsReportCmdReq = mmsReportCmdReq
	var _result14 MmsReportServPushReportsCmdResult
	if err = p.Client_().Call(ctx, "pushReportsCmd", &_args13, &_result14); err != nil {
		return
	}
	return _result14.GetSuccess(), nil
}

//  批量查询审核记录
// @param serialList 流水号列表
// @return AuditResult 查询结果
//
// Parameters:
//  - SerialList
//  - AppId
func (p *MmsReportServClient) BatchQueryAuditStatus(ctx context.Context, serialList []string, appId string) (r []*AuditResult_, err error) {
	var _args15 MmsReportServBatchQueryAuditStatusArgs
	_args15.SerialList = serialList
	_args15.AppId = appId
	var _result16 MmsReportServBatchQueryAuditStatusResult
	if err = p.Client_().Call(ctx, "batchQueryAuditStatus", &_args15, &_result16); err != nil {
		return
	}
	return _result16.GetSuccess(), nil
}

type MmsReportServProcessor struct {
	*BaseMmsThriftServProcessor
}

func NewMmsReportServProcessor(handler MmsReportServ) *MmsReportServProcessor {
	self17 := &MmsReportServProcessor{NewBaseMmsThriftServProcessor(handler)}
	self17.AddToProcessorMap("pushReports", &mmsReportServProcessorPushReports{handler: handler})
	self17.AddToProcessorMap("pushReportsCmd", &mmsReportServProcessorPushReportsCmd{handler: handler})
	self17.AddToProcessorMap("batchQueryAuditStatus", &mmsReportServProcessorBatchQueryAuditStatus{handler: handler})
	return self17
}

type mmsReportServProcessorPushReports struct {
	handler MmsReportServ
}

func (p *mmsReportServProcessorPushReports) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MmsReportServPushReportsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("pushReports", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MmsReportServPushReportsResult{}
	var retval *MmsReportRsp
	var err2 error
	if retval, err2 = p.handler.PushReports(ctx, args.MmsReportReq); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing pushReports: "+err2.Error())
		oprot.WriteMessageBegin("pushReports", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("pushReports", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mmsReportServProcessorPushReportsCmd struct {
	handler MmsReportServ
}

func (p *mmsReportServProcessorPushReportsCmd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MmsReportServPushReportsCmdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("pushReportsCmd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MmsReportServPushReportsCmdResult{}
	var retval *MmsReportCmdRsp
	var err2 error
	if retval, err2 = p.handler.PushReportsCmd(ctx, args.MmsReportCmdReq); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing pushReportsCmd: "+err2.Error())
		oprot.WriteMessageBegin("pushReportsCmd", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("pushReportsCmd", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type mmsReportServProcessorBatchQueryAuditStatus struct {
	handler MmsReportServ
}

func (p *mmsReportServProcessorBatchQueryAuditStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MmsReportServBatchQueryAuditStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("batchQueryAuditStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MmsReportServBatchQueryAuditStatusResult{}
	var retval []*AuditResult_
	var err2 error
	if retval, err2 = p.handler.BatchQueryAuditStatus(ctx, args.SerialList, args.AppId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing batchQueryAuditStatus: "+err2.Error())
		oprot.WriteMessageBegin("batchQueryAuditStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("batchQueryAuditStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - MmsReportReq
type MmsReportServPushReportsArgs struct {
	MmsReportReq *MmsReportReq `thrift:"mmsReportReq,1" db:"mmsReportReq" json:"mmsReportReq"`
}

func NewMmsReportServPushReportsArgs() *MmsReportServPushReportsArgs {
	return &MmsReportServPushReportsArgs{}
}

var MmsReportServPushReportsArgs_MmsReportReq_DEFAULT *MmsReportReq

func (p *MmsReportServPushReportsArgs) GetMmsReportReq() *MmsReportReq {
	if !p.IsSetMmsReportReq() {
		return MmsReportServPushReportsArgs_MmsReportReq_DEFAULT
	}
	return p.MmsReportReq
}
func (p *MmsReportServPushReportsArgs) IsSetMmsReportReq() bool {
	return p.MmsReportReq != nil
}

func (p *MmsReportServPushReportsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MmsReportServPushReportsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.MmsReportReq = &MmsReportReq{}
	if err := p.MmsReportReq.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MmsReportReq), err)
	}
	return nil
}

func (p *MmsReportServPushReportsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("pushReports_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MmsReportServPushReportsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mmsReportReq", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mmsReportReq: ", p), err)
	}
	if err := p.MmsReportReq.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MmsReportReq), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mmsReportReq: ", p), err)
	}
	return err
}

func (p *MmsReportServPushReportsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MmsReportServPushReportsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MmsReportServPushReportsResult struct {
	Success *MmsReportRsp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMmsReportServPushReportsResult() *MmsReportServPushReportsResult {
	return &MmsReportServPushReportsResult{}
}

var MmsReportServPushReportsResult_Success_DEFAULT *MmsReportRsp

func (p *MmsReportServPushReportsResult) GetSuccess() *MmsReportRsp {
	if !p.IsSetSuccess() {
		return MmsReportServPushReportsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MmsReportServPushReportsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MmsReportServPushReportsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MmsReportServPushReportsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MmsReportRsp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MmsReportServPushReportsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("pushReports_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MmsReportServPushReportsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MmsReportServPushReportsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MmsReportServPushReportsResult(%+v)", *p)
}

// Attributes:
//  - MmsReportCmdReq
type MmsReportServPushReportsCmdArgs struct {
	MmsReportCmdReq *MmsReportCmdReq `thrift:"mmsReportCmdReq,1" db:"mmsReportCmdReq" json:"mmsReportCmdReq"`
}

func NewMmsReportServPushReportsCmdArgs() *MmsReportServPushReportsCmdArgs {
	return &MmsReportServPushReportsCmdArgs{}
}

var MmsReportServPushReportsCmdArgs_MmsReportCmdReq_DEFAULT *MmsReportCmdReq

func (p *MmsReportServPushReportsCmdArgs) GetMmsReportCmdReq() *MmsReportCmdReq {
	if !p.IsSetMmsReportCmdReq() {
		return MmsReportServPushReportsCmdArgs_MmsReportCmdReq_DEFAULT
	}
	return p.MmsReportCmdReq
}
func (p *MmsReportServPushReportsCmdArgs) IsSetMmsReportCmdReq() bool {
	return p.MmsReportCmdReq != nil
}

func (p *MmsReportServPushReportsCmdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MmsReportServPushReportsCmdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.MmsReportCmdReq = &MmsReportCmdReq{}
	if err := p.MmsReportCmdReq.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MmsReportCmdReq), err)
	}
	return nil
}

func (p *MmsReportServPushReportsCmdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("pushReportsCmd_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MmsReportServPushReportsCmdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mmsReportCmdReq", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mmsReportCmdReq: ", p), err)
	}
	if err := p.MmsReportCmdReq.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MmsReportCmdReq), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mmsReportCmdReq: ", p), err)
	}
	return err
}

func (p *MmsReportServPushReportsCmdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MmsReportServPushReportsCmdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MmsReportServPushReportsCmdResult struct {
	Success *MmsReportCmdRsp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMmsReportServPushReportsCmdResult() *MmsReportServPushReportsCmdResult {
	return &MmsReportServPushReportsCmdResult{}
}

var MmsReportServPushReportsCmdResult_Success_DEFAULT *MmsReportCmdRsp

func (p *MmsReportServPushReportsCmdResult) GetSuccess() *MmsReportCmdRsp {
	if !p.IsSetSuccess() {
		return MmsReportServPushReportsCmdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MmsReportServPushReportsCmdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MmsReportServPushReportsCmdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MmsReportServPushReportsCmdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MmsReportCmdRsp{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MmsReportServPushReportsCmdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("pushReportsCmd_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MmsReportServPushReportsCmdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MmsReportServPushReportsCmdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MmsReportServPushReportsCmdResult(%+v)", *p)
}

// Attributes:
//  - SerialList
//  - AppId
type MmsReportServBatchQueryAuditStatusArgs struct {
	SerialList []string `thrift:"serialList,1" db:"serialList" json:"serialList"`
	AppId      string   `thrift:"appId,2" db:"appId" json:"appId"`
}

func NewMmsReportServBatchQueryAuditStatusArgs() *MmsReportServBatchQueryAuditStatusArgs {
	return &MmsReportServBatchQueryAuditStatusArgs{}
}

func (p *MmsReportServBatchQueryAuditStatusArgs) GetSerialList() []string {
	return p.SerialList
}

func (p *MmsReportServBatchQueryAuditStatusArgs) GetAppId() string {
	return p.AppId
}
func (p *MmsReportServBatchQueryAuditStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MmsReportServBatchQueryAuditStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.SerialList = tSlice
	for i := 0; i < size; i++ {
		var _elem18 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem18 = v
		}
		p.SerialList = append(p.SerialList, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MmsReportServBatchQueryAuditStatusArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *MmsReportServBatchQueryAuditStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("batchQueryAuditStatus_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MmsReportServBatchQueryAuditStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serialList", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serialList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.SerialList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SerialList {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serialList: ", p), err)
	}
	return err
}

func (p *MmsReportServBatchQueryAuditStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appId: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appId: ", p), err)
	}
	return err
}

func (p *MmsReportServBatchQueryAuditStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MmsReportServBatchQueryAuditStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MmsReportServBatchQueryAuditStatusResult struct {
	Success []*AuditResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMmsReportServBatchQueryAuditStatusResult() *MmsReportServBatchQueryAuditStatusResult {
	return &MmsReportServBatchQueryAuditStatusResult{}
}

var MmsReportServBatchQueryAuditStatusResult_Success_DEFAULT []*AuditResult_

func (p *MmsReportServBatchQueryAuditStatusResult) GetSuccess() []*AuditResult_ {
	return p.Success
}
func (p *MmsReportServBatchQueryAuditStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MmsReportServBatchQueryAuditStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MmsReportServBatchQueryAuditStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AuditResult_, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem19 := &AuditResult_{}
		if err := _elem19.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
		}
		p.Success = append(p.Success, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MmsReportServBatchQueryAuditStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("batchQueryAuditStatus_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MmsReportServBatchQueryAuditStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MmsReportServBatchQueryAuditStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MmsReportServBatchQueryAuditStatusResult(%+v)", *p)
}
