// Code generated by protoc-gen-twirp v5.4.1, DO NOT EDIT.
// source: recommend.proto

package budao

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"
import cityhash "github.com/zhenjl/cityhash"
import glog "github.com/sumaig/glog"
import strconv "strconv"

// ==========================
// RecommendService Interface
// ==========================

type RecommendService interface {
	GetRecommendVideo(context.Context, *GetRecommendVideoRequest) (*GetRecommendVideoResponse, error)

	ReloadIndex(context.Context, *ReloadIndexRequest) (*ReloadIndexResponse, error)
}

// ================================
// RecommendService Protobuf Client
// ================================

type recommendServiceProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewRecommendServiceProtobufClient creates a Protobuf client that implements the RecommendService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewRecommendServiceProtobufClient(addr string, client HTTPClient) RecommendService {
	prefix := urlBase(addr) + RecommendServicePathPrefix
	urls := [2]string{
		prefix + "GetRecommendVideo",
		prefix + "ReloadIndex",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &recommendServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &recommendServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *recommendServiceProtobufClient) GetRecommendVideo(ctx context.Context, in *GetRecommendVideoRequest) (*GetRecommendVideoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "RecommendService")
	ctx = ctxsetters.WithMethodName(ctx, "GetRecommendVideo")
	out := new(GetRecommendVideoResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendServiceProtobufClient) ReloadIndex(ctx context.Context, in *ReloadIndexRequest) (*ReloadIndexResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "RecommendService")
	ctx = ctxsetters.WithMethodName(ctx, "ReloadIndex")
	out := new(ReloadIndexResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ============================
// RecommendService JSON Client
// ============================

type recommendServiceJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewRecommendServiceJSONClient creates a JSON client that implements the RecommendService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewRecommendServiceJSONClient(addr string, client HTTPClient) RecommendService {
	prefix := urlBase(addr) + RecommendServicePathPrefix
	urls := [2]string{
		prefix + "GetRecommendVideo",
		prefix + "ReloadIndex",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &recommendServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &recommendServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *recommendServiceJSONClient) GetRecommendVideo(ctx context.Context, in *GetRecommendVideoRequest) (*GetRecommendVideoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "RecommendService")
	ctx = ctxsetters.WithMethodName(ctx, "GetRecommendVideo")
	out := new(GetRecommendVideoResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendServiceJSONClient) ReloadIndex(ctx context.Context, in *ReloadIndexRequest) (*ReloadIndexResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "RecommendService")
	ctx = ctxsetters.WithMethodName(ctx, "ReloadIndex")
	out := new(ReloadIndexResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===============================
// RecommendService Server Handler
// ===============================

type recommendServiceServer struct {
	RecommendService
	hooks *twirp.ServerHooks
}

func NewRecommendServiceServer(svc RecommendService, hooks *twirp.ServerHooks) TwirpServer {
	return &recommendServiceServer{
		RecommendService: svc,
		hooks:            hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *recommendServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// RecommendServicePathPrefix is used for all URL paths on a twirp RecommendService server.
// Requests are always: POST RecommendServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const RecommendServicePathPrefix = "/budao.RecommendService/"

func (s *recommendServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "RecommendService")
	ctx = ctxsetters.WithRequestIp(ctx, req.Header.Get("Remote_addr"))
	ctx = ctxsetters.WithSIG(ctx, req.Header.Get("sig"))
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/budao.RecommendService/GetRecommendVideo":
		s.serveGetRecommendVideo(ctx, resp, req)
		return
	case "/budao.RecommendService/ReloadIndex":
		s.serveReloadIndex(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *recommendServiceServer) serveGetRecommendVideo(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetRecommendVideoJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetRecommendVideoProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *recommendServiceServer) serveGetRecommendVideoJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetRecommendVideo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetRecommendVideoRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *GetRecommendVideoResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.GetRecommendVideo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetRecommendVideoResponse and nil error while calling GetRecommendVideo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *recommendServiceServer) serveGetRecommendVideoProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetRecommendVideo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(GetRecommendVideoRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *GetRecommendVideoResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.GetRecommendVideo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetRecommendVideoResponse and nil error while calling GetRecommendVideo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *recommendServiceServer) serveReloadIndex(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReloadIndexJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReloadIndexProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *recommendServiceServer) serveReloadIndexJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReloadIndex")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ReloadIndexRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *ReloadIndexResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReloadIndex(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReloadIndexResponse and nil error while calling ReloadIndex. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *recommendServiceServer) serveReloadIndexProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReloadIndex")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(ReloadIndexRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *ReloadIndexResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReloadIndex(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReloadIndexResponse and nil error while calling ReloadIndex. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *recommendServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor6, 0
}

func (s *recommendServiceServer) ProtocGenTwirpVersion() string {
	return "v5.4.1"
}

var twirpFileDescriptor6 = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xd1, 0x6a, 0xd4, 0x40,
	0x14, 0x25, 0xbb, 0xee, 0xd6, 0xbd, 0x69, 0x68, 0x3b, 0x55, 0xc9, 0x06, 0x8a, 0x4b, 0x40, 0xe9,
	0x53, 0x1e, 0xb6, 0x3e, 0xfa, 0xa2, 0x08, 0x1a, 0x41, 0x29, 0x53, 0x28, 0xe2, 0x4b, 0x98, 0x64,
	0x2e, 0x24, 0xd2, 0xcc, 0x64, 0x67, 0x26, 0xa5, 0x8a, 0x3f, 0xe1, 0x2f, 0xf8, 0x05, 0x7e, 0x8c,
	0x1f, 0x24, 0x33, 0x99, 0xae, 0xb6, 0xbb, 0xfb, 0xe0, 0x5b, 0xce, 0x39, 0x33, 0x37, 0xe7, 0xdc,
	0x93, 0xc0, 0x81, 0xc2, 0x4a, 0xb6, 0x2d, 0x0a, 0x9e, 0x75, 0x4a, 0x1a, 0x49, 0x26, 0x65, 0xcf,
	0x99, 0x4c, 0xf6, 0x2d, 0x2b, 0xc5, 0x40, 0xa6, 0xdf, 0x81, 0xd0, 0xdb, 0x73, 0x97, 0x0d, 0x47,
	0x99, 0x1b, 0x6c, 0xc9, 0x1c, 0x1e, 0x5e, 0x5b, 0x50, 0x34, 0x3c, 0x0e, 0x16, 0xc1, 0xe9, 0x8c,
	0xee, 0x39, 0x9c, 0x73, 0xf2, 0x04, 0xa6, 0x0a, 0x99, 0x96, 0x22, 0x1e, 0x39, 0xc1, 0x23, 0x12,
	0xc3, 0x5e, 0xc7, 0xbe, 0x5e, 0x49, 0xc6, 0xe3, 0xf1, 0x70, 0xc3, 0x43, 0x3b, 0xcc, 0x28, 0x56,
	0xa1, 0x1d, 0xf6, 0x60, 0x90, 0x1c, 0xce, 0x79, 0xfa, 0x3b, 0x80, 0xf8, 0x2d, 0x9a, 0xbb, 0x0e,
	0x28, 0xae, 0x7a, 0xd4, 0x86, 0x3c, 0x83, 0x69, 0x8d, 0x8c, 0xa3, 0x72, 0x16, 0xc2, 0x65, 0x94,
	0xb9, 0x00, 0xd9, 0x3b, 0x47, 0x52, 0x2f, 0x92, 0x13, 0x80, 0xaa, 0x66, 0x42, 0xe0, 0x95, 0x7d,
	0xc1, 0x60, 0x6a, 0xe6, 0x99, 0x9c, 0x93, 0x47, 0x30, 0xa9, 0x64, 0x2f, 0x8c, 0x73, 0x15, 0xd1,
	0x01, 0x90, 0xe7, 0x70, 0xa0, 0x51, 0xeb, 0x46, 0x8a, 0x42, 0xe1, 0xaa, 0x10, 0x7d, 0xeb, 0xac,
	0x45, 0x34, 0xf2, 0x34, 0xc5, 0xd5, 0xc7, 0xbe, 0x25, 0x2f, 0x60, 0x9f, 0x95, 0x06, 0xb5, 0x29,
	0x1a, 0x83, 0xad, 0x8e, 0x27, 0x8b, 0xf1, 0x69, 0xb8, 0x3c, 0xf2, 0x4e, 0x5e, 0x39, 0xc9, 0x6e,
	0x8c, 0x86, 0x6c, 0xfd, 0xac, 0xd3, 0x1f, 0x01, 0xcc, 0xb7, 0xc4, 0xd2, 0x9d, 0x14, 0x1a, 0x6d,
	0x2e, 0x6d, 0x98, 0xe9, 0xf5, 0xbd, 0x5c, 0x17, 0x8e, 0xa4, 0x5e, 0x24, 0x1f, 0xe0, 0xf1, 0xba,
	0xc1, 0xc2, 0xb7, 0xe1, 0x3c, 0x8c, 0x9c, 0x87, 0xb9, 0xbf, 0xb5, 0xd9, 0x1e, 0x3d, 0x56, 0x1b,
	0x9c, 0x4e, 0xcf, 0x6c, 0xd1, 0xb6, 0x8f, 0x5c, 0x70, 0xbc, 0xb9, 0xdd, 0xf1, 0x09, 0x40, 0x63,
	0x71, 0xd1, 0x31, 0x53, 0xfb, 0xaa, 0x67, 0x8e, 0x39, 0x67, 0xa6, 0x4e, 0x5f, 0xc2, 0xf1, 0x9d,
	0x4b, 0xff, 0x95, 0x60, 0xf9, 0x2b, 0x80, 0xc3, 0xb5, 0xbd, 0x0b, 0x54, 0xd7, 0x4d, 0x85, 0xe4,
	0x12, 0x8e, 0x36, 0x56, 0x43, 0x9e, 0xfa, 0x01, 0xbb, 0xbe, 0x85, 0x64, 0xb1, 0xfb, 0x80, 0xf7,
	0xf4, 0x06, 0xc2, 0x7f, 0xac, 0x92, 0xbf, 0xeb, 0xb9, 0x9f, 0x39, 0x49, 0xb6, 0x49, 0xc3, 0x94,
	0xd7, 0x09, 0x1c, 0x56, 0xb2, 0xcd, 0xbe, 0xdc, 0x7c, 0xcb, 0xba, 0x72, 0x38, 0x77, 0x1e, 0xfc,
	0x1c, 0x8d, 0xdf, 0x7f, 0xfa, 0x5c, 0x4e, 0xdd, 0x1f, 0x73, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff,
	0xd4, 0x21, 0xcb, 0x1e, 0x59, 0x03, 0x00, 0x00,
}
