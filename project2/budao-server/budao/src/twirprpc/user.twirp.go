// Code generated by protoc-gen-twirp v5.4.1, DO NOT EDIT.
// source: user.proto

package budao

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"
import cityhash "github.com/zhenjl/cityhash"
import glog "github.com/sumaig/glog"
import strconv "strconv"

// =====================
// UserService Interface
// =====================

type UserService interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
}

// ===========================
// UserService Protobuf Client
// ===========================

type userServiceProtobufClient struct {
	client HTTPClient
	urls   [1]string
}

// NewUserServiceProtobufClient creates a Protobuf client that implements the UserService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewUserServiceProtobufClient(addr string, client HTTPClient) UserService {
	prefix := urlBase(addr) + UserServicePathPrefix
	urls := [1]string{
		prefix + "Login",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &userServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &userServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *userServiceProtobufClient) Login(ctx context.Context, in *LoginRequest) (*LoginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "Login")
	out := new(LoginResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =======================
// UserService JSON Client
// =======================

type userServiceJSONClient struct {
	client HTTPClient
	urls   [1]string
}

// NewUserServiceJSONClient creates a JSON client that implements the UserService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewUserServiceJSONClient(addr string, client HTTPClient) UserService {
	prefix := urlBase(addr) + UserServicePathPrefix
	urls := [1]string{
		prefix + "Login",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &userServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &userServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *userServiceJSONClient) Login(ctx context.Context, in *LoginRequest) (*LoginResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithMethodName(ctx, "Login")
	out := new(LoginResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// UserService Server Handler
// ==========================

type userServiceServer struct {
	UserService
	hooks *twirp.ServerHooks
}

func NewUserServiceServer(svc UserService, hooks *twirp.ServerHooks) TwirpServer {
	return &userServiceServer{
		UserService: svc,
		hooks:       hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *userServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// UserServicePathPrefix is used for all URL paths on a twirp UserService server.
// Requests are always: POST UserServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const UserServicePathPrefix = "/budao.UserService/"

func (s *userServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "UserService")
	ctx = ctxsetters.WithRequestIp(ctx, req.Header.Get("Remote_addr"))
	ctx = ctxsetters.WithSIG(ctx, req.Header.Get("sig"))
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/budao.UserService/Login":
		s.serveLogin(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *userServiceServer) serveLogin(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveLoginJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveLoginProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *userServiceServer) serveLoginJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Login")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(LoginRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *LoginResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Login(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LoginResponse and nil error while calling Login. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) serveLoginProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Login")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(LoginRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *LoginResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.Login(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LoginResponse and nil error while calling Login. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *userServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor11, 0
}

func (s *userServiceServer) ProtocGenTwirpVersion() string {
	return "v5.4.1"
}

var twirpFileDescriptor11 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xed, 0x6a, 0xd4, 0x50,
	0x10, 0x35, 0xd9, 0x26, 0xdd, 0xcc, 0xb6, 0x1a, 0xc7, 0xa2, 0x61, 0x45, 0x58, 0x02, 0xc2, 0x52,
	0x24, 0x42, 0xc4, 0x07, 0x68, 0x21, 0xda, 0x48, 0xdd, 0x6e, 0x53, 0xa5, 0xc5, 0x3f, 0x4b, 0x76,
	0x33, 0x6d, 0xa3, 0xcd, 0xbd, 0x31, 0x1f, 0x62, 0xfd, 0xed, 0x93, 0xf8, 0xa4, 0x72, 0xe7, 0xde,
	0x6a, 0xbb, 0x88, 0xff, 0x26, 0xe7, 0xcc, 0xdc, 0x39, 0xe7, 0x64, 0x00, 0xfa, 0x96, 0x9a, 0xa8,
	0x6e, 0x64, 0x27, 0xd1, 0x59, 0xf6, 0x45, 0x2e, 0xc7, 0x5b, 0x2b, 0x59, 0x55, 0x52, 0x68, 0x30,
	0xfc, 0x69, 0xc3, 0xd6, 0xa1, 0xbc, 0x28, 0x45, 0x46, 0x5f, 0x7b, 0x6a, 0x3b, 0x7c, 0x0e, 0xee,
	0x25, 0xe5, 0x05, 0x35, 0x81, 0x35, 0xb1, 0xa6, 0xa3, 0x78, 0x3b, 0xe2, 0xb1, 0xe8, 0x80, 0xc1,
	0xcc, 0x90, 0xf8, 0x12, 0xe0, 0x4a, 0x8d, 0x2d, 0xba, 0xeb, 0x9a, 0x02, 0x7b, 0x62, 0x4d, 0xef,
	0xc7, 0xbe, 0x69, 0xe5, 0xf7, 0x3e, 0x5c, 0xd7, 0x94, 0x79, 0x57, 0x37, 0x25, 0x3e, 0x06, 0x57,
	0xd6, 0x24, 0xca, 0x22, 0x18, 0x4c, 0xac, 0xa9, 0x97, 0x99, 0x2f, 0xdc, 0x01, 0xa7, 0x93, 0x5f,
	0x48, 0x04, 0x1b, 0x0c, 0xeb, 0x0f, 0x7c, 0x0a, 0x9e, 0x52, 0xbe, 0x10, 0x79, 0x45, 0x81, 0xc3,
	0xcc, 0x50, 0x01, 0xb3, 0xbc, 0x22, 0x7c, 0xa6, 0x6d, 0x2d, 0xea, 0x4b, 0xd9, 0xc9, 0xc0, 0x65,
	0x96, 0xdb, 0xe7, 0x0a, 0xc0, 0x18, 0x46, 0x4c, 0x5f, 0x90, 0x50, 0x36, 0x36, 0x59, 0xdb, 0x43,
	0xa3, 0xed, 0x63, 0x4b, 0xcd, 0x5b, 0x26, 0x32, 0x7e, 0x44, 0xd7, 0x61, 0x01, 0xdb, 0x26, 0x85,
	0xb6, 0x96, 0xa2, 0x25, 0x15, 0x43, 0xdb, 0xe5, 0x5d, 0xdf, 0xae, 0xc5, 0x70, 0xc2, 0x60, 0x66,
	0x48, 0x7c, 0x61, 0x74, 0x96, 0xe2, 0x5c, 0x72, 0x0a, 0xa3, 0xf8, 0xc1, 0xad, 0x4d, 0xa9, 0x38,
	0x97, 0x5a, 0xb8, 0xaa, 0xc2, 0x1e, 0x86, 0x37, 0x28, 0x3e, 0x81, 0x4d, 0x3d, 0x59, 0xf0, 0x06,
	0x2f, 0x73, 0xb9, 0xad, 0xb8, 0x6b, 0xdd, 0xfe, 0xaf, 0xf5, 0xc1, 0xba, 0xf5, 0x7f, 0x86, 0xb9,
	0xfb, 0x1a, 0xbc, 0x3f, 0xbf, 0x04, 0x3d, 0x70, 0xe6, 0x07, 0x47, 0xb3, 0xc4, 0xbf, 0x87, 0x00,
	0xee, 0x69, 0x92, 0x9e, 0xa5, 0x33, 0xdf, 0x42, 0x17, 0xec, 0xe3, 0x63, 0xdf, 0x56, 0xf4, 0x69,
	0x92, 0xee, 0x1f, 0xf9, 0x83, 0xdd, 0x10, 0xe0, 0x6f, 0x5a, 0x38, 0x84, 0x8d, 0xf7, 0x7b, 0x87,
	0x66, 0xec, 0x4d, 0xc2, 0xb5, 0x15, 0xef, 0xc1, 0x48, 0xf5, 0x9c, 0x50, 0xf3, 0xad, 0x5c, 0x11,
	0xc6, 0xe0, 0xf0, 0x26, 0x7c, 0x74, 0xfb, 0x14, 0xcc, 0x69, 0x8d, 0x77, 0xee, 0x82, 0x3a, 0xe9,
	0xfd, 0x31, 0xf8, 0x2b, 0x59, 0x45, 0x9f, 0xbf, 0xff, 0x88, 0xea, 0xa5, 0xee, 0x98, 0x5b, 0xbf,
	0xec, 0xc1, 0xbb, 0xb3, 0x4f, 0x4b, 0x97, 0x8f, 0xf4, 0xd5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xee, 0xbb, 0xe3, 0x3b, 0xc7, 0x02, 0x00, 0x00,
}
