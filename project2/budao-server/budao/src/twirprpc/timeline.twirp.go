// Code generated by protoc-gen-twirp v5.4.1, DO NOT EDIT.
// source: timeline.proto

package budao

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"
import cityhash "github.com/zhenjl/cityhash"
import glog "github.com/sumaig/glog"
import strconv "strconv"

// =========================
// TimeLineService Interface
// =========================

type TimeLineService interface {
	GetTimeLine(context.Context, *GetTimeLineRequest) (*GetTimeLineResponse, error)

	GetSubscribedTimeLine(context.Context, *GetSubscribedTimeLineRequest) (*GetSubscribedTimeLineResponse, error)
}

// ===============================
// TimeLineService Protobuf Client
// ===============================

type timeLineServiceProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewTimeLineServiceProtobufClient creates a Protobuf client that implements the TimeLineService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewTimeLineServiceProtobufClient(addr string, client HTTPClient) TimeLineService {
	prefix := urlBase(addr) + TimeLineServicePathPrefix
	urls := [2]string{
		prefix + "GetTimeLine",
		prefix + "GetSubscribedTimeLine",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &timeLineServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &timeLineServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *timeLineServiceProtobufClient) GetTimeLine(ctx context.Context, in *GetTimeLineRequest) (*GetTimeLineResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "TimeLineService")
	ctx = ctxsetters.WithMethodName(ctx, "GetTimeLine")
	out := new(GetTimeLineResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeLineServiceProtobufClient) GetSubscribedTimeLine(ctx context.Context, in *GetSubscribedTimeLineRequest) (*GetSubscribedTimeLineResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "TimeLineService")
	ctx = ctxsetters.WithMethodName(ctx, "GetSubscribedTimeLine")
	out := new(GetSubscribedTimeLineResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===========================
// TimeLineService JSON Client
// ===========================

type timeLineServiceJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewTimeLineServiceJSONClient creates a JSON client that implements the TimeLineService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewTimeLineServiceJSONClient(addr string, client HTTPClient) TimeLineService {
	prefix := urlBase(addr) + TimeLineServicePathPrefix
	urls := [2]string{
		prefix + "GetTimeLine",
		prefix + "GetSubscribedTimeLine",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &timeLineServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &timeLineServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *timeLineServiceJSONClient) GetTimeLine(ctx context.Context, in *GetTimeLineRequest) (*GetTimeLineResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "TimeLineService")
	ctx = ctxsetters.WithMethodName(ctx, "GetTimeLine")
	out := new(GetTimeLineResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeLineServiceJSONClient) GetSubscribedTimeLine(ctx context.Context, in *GetSubscribedTimeLineRequest) (*GetSubscribedTimeLineResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "TimeLineService")
	ctx = ctxsetters.WithMethodName(ctx, "GetSubscribedTimeLine")
	out := new(GetSubscribedTimeLineResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==============================
// TimeLineService Server Handler
// ==============================

type timeLineServiceServer struct {
	TimeLineService
	hooks *twirp.ServerHooks
}

func NewTimeLineServiceServer(svc TimeLineService, hooks *twirp.ServerHooks) TwirpServer {
	return &timeLineServiceServer{
		TimeLineService: svc,
		hooks:           hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *timeLineServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// TimeLineServicePathPrefix is used for all URL paths on a twirp TimeLineService server.
// Requests are always: POST TimeLineServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const TimeLineServicePathPrefix = "/budao.TimeLineService/"

func (s *timeLineServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "TimeLineService")
	ctx = ctxsetters.WithRequestIp(ctx, req.Header.Get("Remote_addr"))
	ctx = ctxsetters.WithSIG(ctx, req.Header.Get("sig"))
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/budao.TimeLineService/GetTimeLine":
		s.serveGetTimeLine(ctx, resp, req)
		return
	case "/budao.TimeLineService/GetSubscribedTimeLine":
		s.serveGetSubscribedTimeLine(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *timeLineServiceServer) serveGetTimeLine(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetTimeLineJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetTimeLineProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *timeLineServiceServer) serveGetTimeLineJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetTimeLine")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetTimeLineRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *GetTimeLineResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.GetTimeLine(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetTimeLineResponse and nil error while calling GetTimeLine. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *timeLineServiceServer) serveGetTimeLineProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetTimeLine")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(GetTimeLineRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *GetTimeLineResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.GetTimeLine(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetTimeLineResponse and nil error while calling GetTimeLine. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *timeLineServiceServer) serveGetSubscribedTimeLine(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetSubscribedTimeLineJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetSubscribedTimeLineProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *timeLineServiceServer) serveGetSubscribedTimeLineJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSubscribedTimeLine")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetSubscribedTimeLineRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *GetSubscribedTimeLineResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.GetSubscribedTimeLine(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetSubscribedTimeLineResponse and nil error while calling GetSubscribedTimeLine. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *timeLineServiceServer) serveGetSubscribedTimeLineProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSubscribedTimeLine")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(GetSubscribedTimeLineRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *GetSubscribedTimeLineResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.GetSubscribedTimeLine(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetSubscribedTimeLineResponse and nil error while calling GetSubscribedTimeLine. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *timeLineServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor8, 0
}

func (s *timeLineServiceServer) ProtocGenTwirpVersion() string {
	return "v5.4.1"
}

var twirpFileDescriptor8 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0xdf, 0x6a, 0xd4, 0x40,
	0x14, 0xc6, 0x99, 0xfd, 0xe7, 0xe6, 0xec, 0xba, 0x2d, 0x23, 0x42, 0x1a, 0x2d, 0x86, 0xb5, 0xc2,
	0x5e, 0xe5, 0x22, 0xbe, 0x81, 0x16, 0xea, 0x4a, 0x15, 0x99, 0x15, 0x11, 0x6f, 0x42, 0x32, 0x39,
	0x25, 0x23, 0x99, 0x4c, 0x9c, 0x99, 0x14, 0xf1, 0x11, 0x7c, 0x0c, 0x5f, 0x43, 0x7d, 0x1a, 0x5f,
	0x44, 0x32, 0x9b, 0x25, 0x56, 0xbb, 0xbd, 0xb3, 0x77, 0xe1, 0x77, 0xbe, 0x43, 0xbe, 0x73, 0xbe,
	0x33, 0xb0, 0xb0, 0x42, 0x62, 0x29, 0x2a, 0x8c, 0x6a, 0xad, 0xac, 0xa2, 0xe3, 0xac, 0xc9, 0x53,
	0x15, 0xcc, 0xb9, 0x92, 0x52, 0x55, 0x5b, 0xb8, 0xfc, 0x4a, 0x80, 0x9e, 0xa1, 0x7d, 0x2b, 0x24,
	0x9e, 0x8b, 0x0a, 0x19, 0x7e, 0x6a, 0xd0, 0x58, 0xfa, 0x04, 0x26, 0x05, 0xa6, 0x39, 0x6a, 0x9f,
	0x84, 0x64, 0x35, 0x8b, 0xef, 0x46, 0xae, 0x39, 0x7a, 0xe1, 0x20, 0xeb, 0x8a, 0x34, 0x02, 0x2f,
	0x17, 0x1a, 0xb9, 0x15, 0xaa, 0xf2, 0x07, 0x21, 0x59, 0x2d, 0xe2, 0xc3, 0x4e, 0x79, 0xba, 0xe3,
	0xac, 0x97, 0xd0, 0x63, 0x00, 0x5e, 0xa4, 0x55, 0x85, 0x65, 0x22, 0x72, 0x7f, 0x18, 0x92, 0x95,
	0xc7, 0xbc, 0x8e, 0xac, 0xf3, 0xe5, 0x0f, 0x02, 0xf7, 0xae, 0x98, 0x31, 0xb5, 0xaa, 0x0c, 0xb6,
	0x6e, 0x8c, 0x4d, 0x6d, 0x63, 0xfe, 0x72, 0xb3, 0x71, 0x90, 0x75, 0x45, 0x1a, 0x01, 0x94, 0xc2,
	0xd8, 0x44, 0x58, 0x94, 0xc6, 0x1f, 0x84, 0xc3, 0xd5, 0x2c, 0x3e, 0xe8, 0xa4, 0xe7, 0xc2, 0xd8,
	0xb5, 0x45, 0xc9, 0xbc, 0xb2, 0xfb, 0x32, 0xf4, 0x08, 0xa6, 0x45, 0x6a, 0x12, 0xa9, 0x34, 0x3a,
	0x2f, 0x53, 0x76, 0xa7, 0x48, 0xcd, 0x2b, 0xa5, 0x91, 0x3e, 0x82, 0x19, 0x2f, 0x31, 0xd5, 0x09,
	0x4f, 0x79, 0x81, 0xfe, 0xc8, 0x55, 0xc1, 0xa1, 0xe7, 0x2d, 0xa1, 0x14, 0x46, 0x56, 0xd4, 0xc6,
	0x1f, 0xbb, 0x19, 0xdc, 0xf7, 0xf2, 0x27, 0x81, 0x87, 0x67, 0x68, 0x37, 0x4d, 0x66, 0xb8, 0x16,
	0x19, 0xe6, 0xb7, 0xb4, 0xd5, 0x10, 0xe6, 0x1a, 0x2f, 0x92, 0x4b, 0x91, 0xa3, 0xea, 0xf7, 0x0a,
	0x1a, 0x2f, 0xde, 0xb5, 0x68, 0x9d, 0xd3, 0x13, 0x58, 0xf4, 0x8a, 0xf6, 0x2c, 0xdc, 0x44, 0x23,
	0x36, 0xdf, 0x69, 0x5a, 0xa7, 0xcb, 0x5f, 0x04, 0x8e, 0xf7, 0xf8, 0xff, 0xbf, 0x41, 0x3c, 0x00,
	0xcf, 0xaa, 0x5a, 0xf0, 0xa4, 0x6a, 0xa4, 0x73, 0x3f, 0x66, 0x53, 0x07, 0x5e, 0x37, 0xf2, 0x4a,
	0x4a, 0xa3, 0x1b, 0x53, 0x1a, 0xef, 0x4d, 0x69, 0xd2, 0xa7, 0x14, 0x7f, 0x27, 0x70, 0xb0, 0x1b,
	0x6c, 0x83, 0xfa, 0x52, 0x70, 0xa4, 0xa7, 0x30, 0xfb, 0xe3, 0xee, 0xe8, 0x51, 0xe7, 0xf5, 0xdf,
	0x87, 0x11, 0x04, 0xd7, 0x95, 0xba, 0xed, 0x64, 0x70, 0xff, 0xda, 0xf5, 0xd1, 0xc7, 0x7d, 0xd3,
	0xde, 0xe3, 0x08, 0x4e, 0x6e, 0x16, 0x6d, 0xff, 0xf1, 0x2c, 0x80, 0x43, 0xae, 0x64, 0xf4, 0xf1,
	0xf3, 0x97, 0xa8, 0xce, 0xb6, 0x1d, 0x6f, 0xc8, 0xb7, 0xc1, 0xf0, 0xe5, 0xfb, 0x0f, 0xd9, 0xc4,
	0x3d, 0xe9, 0xa7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x7d, 0xa5, 0xfb, 0xf9, 0x03, 0x00,
	0x00,
}
