// Code generated by protoc-gen-twirp v5.4.1, DO NOT EDIT.
// source: config.proto

package budao

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"
import cityhash "github.com/zhenjl/cityhash"
import glog "github.com/sumaig/glog"
import strconv "strconv"

// =======================
// ConfigService Interface
// =======================

type ConfigService interface {
	GetChannelList(context.Context, *GetChannelListRequest) (*GetChannelListResponse, error)

	GetTabList(context.Context, *GetTabListRequest) (*GetTabListResponse, error)
}

// =============================
// ConfigService Protobuf Client
// =============================

type configServiceProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewConfigServiceProtobufClient creates a Protobuf client that implements the ConfigService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewConfigServiceProtobufClient(addr string, client HTTPClient) ConfigService {
	prefix := urlBase(addr) + ConfigServicePathPrefix
	urls := [2]string{
		prefix + "GetChannelList",
		prefix + "GetTabList",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &configServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &configServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *configServiceProtobufClient) GetChannelList(ctx context.Context, in *GetChannelListRequest) (*GetChannelListResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "ConfigService")
	ctx = ctxsetters.WithMethodName(ctx, "GetChannelList")
	out := new(GetChannelListResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceProtobufClient) GetTabList(ctx context.Context, in *GetTabListRequest) (*GetTabListResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "ConfigService")
	ctx = ctxsetters.WithMethodName(ctx, "GetTabList")
	out := new(GetTabListResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =========================
// ConfigService JSON Client
// =========================

type configServiceJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewConfigServiceJSONClient creates a JSON client that implements the ConfigService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewConfigServiceJSONClient(addr string, client HTTPClient) ConfigService {
	prefix := urlBase(addr) + ConfigServicePathPrefix
	urls := [2]string{
		prefix + "GetChannelList",
		prefix + "GetTabList",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &configServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &configServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *configServiceJSONClient) GetChannelList(ctx context.Context, in *GetChannelListRequest) (*GetChannelListResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "ConfigService")
	ctx = ctxsetters.WithMethodName(ctx, "GetChannelList")
	out := new(GetChannelListResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceJSONClient) GetTabList(ctx context.Context, in *GetTabListRequest) (*GetTabListResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "ConfigService")
	ctx = ctxsetters.WithMethodName(ctx, "GetTabList")
	out := new(GetTabListResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ============================
// ConfigService Server Handler
// ============================

type configServiceServer struct {
	ConfigService
	hooks *twirp.ServerHooks
}

func NewConfigServiceServer(svc ConfigService, hooks *twirp.ServerHooks) TwirpServer {
	return &configServiceServer{
		ConfigService: svc,
		hooks:         hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *configServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// ConfigServicePathPrefix is used for all URL paths on a twirp ConfigService server.
// Requests are always: POST ConfigServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const ConfigServicePathPrefix = "/budao.ConfigService/"

func (s *configServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "ConfigService")
	ctx = ctxsetters.WithRequestIp(ctx, req.Header.Get("Remote_addr"))
	ctx = ctxsetters.WithSIG(ctx, req.Header.Get("sig"))
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/budao.ConfigService/GetChannelList":
		s.serveGetChannelList(ctx, resp, req)
		return
	case "/budao.ConfigService/GetTabList":
		s.serveGetTabList(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *configServiceServer) serveGetChannelList(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetChannelListJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetChannelListProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *configServiceServer) serveGetChannelListJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetChannelList")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetChannelListRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *GetChannelListResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.GetChannelList(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetChannelListResponse and nil error while calling GetChannelList. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *configServiceServer) serveGetChannelListProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetChannelList")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(GetChannelListRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *GetChannelListResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.GetChannelList(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetChannelListResponse and nil error while calling GetChannelList. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *configServiceServer) serveGetTabList(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetTabListJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetTabListProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *configServiceServer) serveGetTabListJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetTabList")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetTabListRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *GetTabListResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.GetTabList(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetTabListResponse and nil error while calling GetTabList. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *configServiceServer) serveGetTabListProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetTabList")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(GetTabListRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *GetTabListResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.GetTabList(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetTabListResponse and nil error while calling GetTabList. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *configServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *configServiceServer) ProtocGenTwirpVersion() string {
	return "v5.4.1"
}

var twirpFileDescriptor1 = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4f, 0x4b, 0xc3, 0x30,
	0x14, 0xa7, 0x1b, 0x0e, 0x7d, 0xfb, 0x83, 0x06, 0x94, 0x5a, 0x14, 0x46, 0x41, 0x18, 0x08, 0x3d,
	0xd4, 0x83, 0xe0, 0x41, 0xd0, 0x1d, 0xa6, 0xa2, 0x20, 0xdd, 0x0e, 0xe2, 0x45, 0x92, 0xec, 0x69,
	0x2b, 0xb6, 0xa9, 0xcd, 0xab, 0x0c, 0xbf, 0x8d, 0x7e, 0x52, 0x31, 0x0d, 0xd4, 0x8e, 0x79, 0xd0,
	0x5b, 0xf2, 0xfb, 0xc7, 0x2f, 0xef, 0x05, 0x7a, 0x52, 0x65, 0x8f, 0xc9, 0x53, 0x90, 0x17, 0x8a,
	0x14, 0x5b, 0x13, 0xe5, 0x9c, 0x2b, 0xaf, 0x27, 0x55, 0x9a, 0xaa, 0xac, 0x02, 0xfd, 0x53, 0xd8,
	0x9e, 0x20, 0x8d, 0x63, 0x9e, 0x65, 0xf8, 0x72, 0x9d, 0x68, 0x8a, 0xf0, 0xb5, 0x44, 0x4d, 0xec,
	0x00, 0x3a, 0x31, 0xf2, 0x39, 0x16, 0xae, 0x33, 0x74, 0x46, 0xdd, 0xb0, 0x1f, 0x18, 0x7b, 0x70,
	0x61, 0xc0, 0xc8, 0x92, 0xfe, 0x02, 0x76, 0x96, 0xfd, 0x3a, 0x57, 0x99, 0xc6, 0xef, 0x00, 0x4d,
	0x9c, 0x4a, 0xbd, 0x14, 0x30, 0x35, 0x60, 0x64, 0x49, 0x76, 0x0c, 0x7d, 0x59, 0xb9, 0x1f, 0x12,
	0xc2, 0x54, 0xbb, 0xad, 0x61, 0x7b, 0xd4, 0x0d, 0x99, 0x55, 0xdb, 0xe4, 0x4b, 0xc2, 0x34, 0xea,
	0xc9, 0xfa, 0xa2, 0xfd, 0x13, 0xd8, 0x9a, 0x20, 0xcd, 0xb8, 0xf8, 0x47, 0xeb, 0x18, 0xd8, 0x4f,
	0xef, 0xdf, 0x1a, 0x1f, 0xc2, 0x06, 0x71, 0xd1, 0x68, 0x3b, 0xb0, 0xca, 0x19, 0x17, 0xa6, 0xe9,
	0x3a, 0x55, 0x07, 0x1d, 0x7e, 0x38, 0xd0, 0x1f, 0x9b, 0x2d, 0x4c, 0xb1, 0x78, 0x4b, 0x24, 0xb2,
	0x1b, 0x18, 0x34, 0x27, 0xc6, 0xf6, 0xac, 0x7b, 0xe5, 0x22, 0xbc, 0xfd, 0x5f, 0x58, 0x5b, 0xfa,
	0x0c, 0xa0, 0x7e, 0x0a, 0x73, 0x6b, 0x71, 0x73, 0x32, 0xde, 0xee, 0x0a, 0xa6, 0x8a, 0x38, 0xf7,
	0x60, 0x53, 0xaa, 0x34, 0x78, 0x5e, 0xbc, 0x07, 0xb9, 0xa8, 0x64, 0xb7, 0xce, 0x67, 0xab, 0x7d,
	0x75, 0x77, 0x2f, 0x3a, 0xe6, 0x9b, 0x1c, 0x7d, 0x05, 0x00, 0x00, 0xff, 0xff, 0x61, 0x47, 0x14,
	0x08, 0x4b, 0x02, 0x00, 0x00,
}
