// Code generated by protoc-gen-go. DO NOT EDIT.
// source: parseurl.proto

package budao

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 视频解析规则
type VideoParseRule int32

const (
	VideoParseRule_PARSE_RULE_XIGUA           VideoParseRule = 0
	VideoParseRule_PARSE_RULE_DOUYIN          VideoParseRule = 1
	VideoParseRule_PARSE_RULE_KUAISHOU        VideoParseRule = 2
	VideoParseRule_PARSE_RULE_NEIHANDUANZI    VideoParseRule = 3
	VideoParseRule_PARSE_RULE_HAOKAN          VideoParseRule = 4
	VideoParseRule_PARSE_RULE_BOBO            VideoParseRule = 5
	VideoParseRule_PARSE_RULE_MIAOPAI         VideoParseRule = 6
	VideoParseRule_PARSE_RULE_MEIPAI          VideoParseRule = 7
	VideoParseRule_PARSE_RULE_BZHAN           VideoParseRule = 8
	VideoParseRule_PARSE_RULE_WEIBO           VideoParseRule = 9
	VideoParseRule_PARSE_RULE_LI              VideoParseRule = 10
	VideoParseRule_PARSE_RULE_FEIDIESHUO      VideoParseRule = 11
	VideoParseRule_PARSE_RULE_YANGGUANGSHIPIN VideoParseRule = 12
)

var VideoParseRule_name = map[int32]string{
	0:  "PARSE_RULE_XIGUA",
	1:  "PARSE_RULE_DOUYIN",
	2:  "PARSE_RULE_KUAISHOU",
	3:  "PARSE_RULE_NEIHANDUANZI",
	4:  "PARSE_RULE_HAOKAN",
	5:  "PARSE_RULE_BOBO",
	6:  "PARSE_RULE_MIAOPAI",
	7:  "PARSE_RULE_MEIPAI",
	8:  "PARSE_RULE_BZHAN",
	9:  "PARSE_RULE_WEIBO",
	10: "PARSE_RULE_LI",
	11: "PARSE_RULE_FEIDIESHUO",
	12: "PARSE_RULE_YANGGUANGSHIPIN",
}
var VideoParseRule_value = map[string]int32{
	"PARSE_RULE_XIGUA":           0,
	"PARSE_RULE_DOUYIN":          1,
	"PARSE_RULE_KUAISHOU":        2,
	"PARSE_RULE_NEIHANDUANZI":    3,
	"PARSE_RULE_HAOKAN":          4,
	"PARSE_RULE_BOBO":            5,
	"PARSE_RULE_MIAOPAI":         6,
	"PARSE_RULE_MEIPAI":          7,
	"PARSE_RULE_BZHAN":           8,
	"PARSE_RULE_WEIBO":           9,
	"PARSE_RULE_LI":              10,
	"PARSE_RULE_FEIDIESHUO":      11,
	"PARSE_RULE_YANGGUANGSHIPIN": 12,
}

func (x VideoParseRule) String() string {
	return proto.EnumName(VideoParseRule_name, int32(x))
}
func (VideoParseRule) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type ParseURLRequest struct {
	Header  *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	VideoId string  `protobuf:"bytes,2,opt,name=video_id,json=videoId" json:"video_id,omitempty"`
}

func (m *ParseURLRequest) Reset()                    { *m = ParseURLRequest{} }
func (m *ParseURLRequest) String() string            { return proto.CompactTextString(m) }
func (*ParseURLRequest) ProtoMessage()               {}
func (*ParseURLRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *ParseURLRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ParseURLRequest) GetVideoId() string {
	if m != nil {
		return m.VideoId
	}
	return ""
}

type ParseExternalURLRequest struct {
	Header      *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Code        uint32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Body        string  `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	Func        string  `protobuf:"bytes,4,opt,name=func" json:"func,omitempty"`
	VideoId     string  `protobuf:"bytes,5,opt,name=video_id,json=videoId" json:"video_id,omitempty"`
	RequestNum  uint32  `protobuf:"varint,6,opt,name=request_num,json=requestNum" json:"request_num,omitempty"`
	RequestTime uint32  `protobuf:"varint,7,opt,name=request_time,json=requestTime" json:"request_time,omitempty"`
}

func (m *ParseExternalURLRequest) Reset()                    { *m = ParseExternalURLRequest{} }
func (m *ParseExternalURLRequest) String() string            { return proto.CompactTextString(m) }
func (*ParseExternalURLRequest) ProtoMessage()               {}
func (*ParseExternalURLRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *ParseExternalURLRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ParseExternalURLRequest) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ParseExternalURLRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *ParseExternalURLRequest) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *ParseExternalURLRequest) GetVideoId() string {
	if m != nil {
		return m.VideoId
	}
	return ""
}

func (m *ParseExternalURLRequest) GetRequestNum() uint32 {
	if m != nil {
		return m.RequestNum
	}
	return 0
}

func (m *ParseExternalURLRequest) GetRequestTime() uint32 {
	if m != nil {
		return m.RequestTime
	}
	return 0
}

type ParseURLResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*ParseURLResponse_Play_
	//	*ParseURLResponse_Craw_
	//	*ParseURLResponse_Web_
	Type isParseURLResponse_Type `protobuf_oneof:"Type"`
}

func (m *ParseURLResponse) Reset()                    { *m = ParseURLResponse{} }
func (m *ParseURLResponse) String() string            { return proto.CompactTextString(m) }
func (*ParseURLResponse) ProtoMessage()               {}
func (*ParseURLResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

type isParseURLResponse_Type interface {
	isParseURLResponse_Type()
}

type ParseURLResponse_Play_ struct {
	Play *ParseURLResponse_Play `protobuf:"bytes,2,opt,name=play,oneof"`
}
type ParseURLResponse_Craw_ struct {
	Craw *ParseURLResponse_Craw `protobuf:"bytes,3,opt,name=craw,oneof"`
}
type ParseURLResponse_Web_ struct {
	Web *ParseURLResponse_Web `protobuf:"bytes,4,opt,name=web,oneof"`
}

func (*ParseURLResponse_Play_) isParseURLResponse_Type() {}
func (*ParseURLResponse_Craw_) isParseURLResponse_Type() {}
func (*ParseURLResponse_Web_) isParseURLResponse_Type()  {}

func (m *ParseURLResponse) GetType() isParseURLResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ParseURLResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ParseURLResponse) GetPlay() *ParseURLResponse_Play {
	if x, ok := m.GetType().(*ParseURLResponse_Play_); ok {
		return x.Play
	}
	return nil
}

func (m *ParseURLResponse) GetCraw() *ParseURLResponse_Craw {
	if x, ok := m.GetType().(*ParseURLResponse_Craw_); ok {
		return x.Craw
	}
	return nil
}

func (m *ParseURLResponse) GetWeb() *ParseURLResponse_Web {
	if x, ok := m.GetType().(*ParseURLResponse_Web_); ok {
		return x.Web
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ParseURLResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ParseURLResponse_OneofMarshaler, _ParseURLResponse_OneofUnmarshaler, _ParseURLResponse_OneofSizer, []interface{}{
		(*ParseURLResponse_Play_)(nil),
		(*ParseURLResponse_Craw_)(nil),
		(*ParseURLResponse_Web_)(nil),
	}
}

func _ParseURLResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ParseURLResponse)
	// Type
	switch x := m.Type.(type) {
	case *ParseURLResponse_Play_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Play); err != nil {
			return err
		}
	case *ParseURLResponse_Craw_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Craw); err != nil {
			return err
		}
	case *ParseURLResponse_Web_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Web); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ParseURLResponse.Type has unexpected type %T", x)
	}
	return nil
}

func _ParseURLResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ParseURLResponse)
	switch tag {
	case 2: // Type.play
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ParseURLResponse_Play)
		err := b.DecodeMessage(msg)
		m.Type = &ParseURLResponse_Play_{msg}
		return true, err
	case 3: // Type.craw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ParseURLResponse_Craw)
		err := b.DecodeMessage(msg)
		m.Type = &ParseURLResponse_Craw_{msg}
		return true, err
	case 4: // Type.web
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ParseURLResponse_Web)
		err := b.DecodeMessage(msg)
		m.Type = &ParseURLResponse_Web_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ParseURLResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ParseURLResponse)
	// Type
	switch x := m.Type.(type) {
	case *ParseURLResponse_Play_:
		s := proto.Size(x.Play)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ParseURLResponse_Craw_:
		s := proto.Size(x.Craw)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ParseURLResponse_Web_:
		s := proto.Size(x.Web)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ParseURLResponse_Play struct {
	VideoUrl string            `protobuf:"bytes,1,opt,name=video_url,json=videoUrl" json:"video_url,omitempty"`
	Header   map[string]string `protobuf:"bytes,2,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ParseURLResponse_Play) Reset()                    { *m = ParseURLResponse_Play{} }
func (m *ParseURLResponse_Play) String() string            { return proto.CompactTextString(m) }
func (*ParseURLResponse_Play) ProtoMessage()               {}
func (*ParseURLResponse_Play) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2, 0} }

func (m *ParseURLResponse_Play) GetVideoUrl() string {
	if m != nil {
		return m.VideoUrl
	}
	return ""
}

func (m *ParseURLResponse_Play) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

type ParseURLResponse_Craw struct {
	Next        string            `protobuf:"bytes,1,opt,name=next" json:"next,omitempty"`
	VideoUrl    string            `protobuf:"bytes,2,opt,name=video_url,json=videoUrl" json:"video_url,omitempty"`
	RequestPost bool              `protobuf:"varint,3,opt,name=request_post,json=requestPost" json:"request_post,omitempty"`
	Header      map[string]string `protobuf:"bytes,4,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Field       []byte            `protobuf:"bytes,5,opt,name=field,proto3" json:"field,omitempty"`
}

func (m *ParseURLResponse_Craw) Reset()                    { *m = ParseURLResponse_Craw{} }
func (m *ParseURLResponse_Craw) String() string            { return proto.CompactTextString(m) }
func (*ParseURLResponse_Craw) ProtoMessage()               {}
func (*ParseURLResponse_Craw) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2, 1} }

func (m *ParseURLResponse_Craw) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

func (m *ParseURLResponse_Craw) GetVideoUrl() string {
	if m != nil {
		return m.VideoUrl
	}
	return ""
}

func (m *ParseURLResponse_Craw) GetRequestPost() bool {
	if m != nil {
		return m.RequestPost
	}
	return false
}

func (m *ParseURLResponse_Craw) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ParseURLResponse_Craw) GetField() []byte {
	if m != nil {
		return m.Field
	}
	return nil
}

type ParseURLResponse_Web struct {
	WebUrl string `protobuf:"bytes,1,opt,name=web_url,json=webUrl" json:"web_url,omitempty"`
}

func (m *ParseURLResponse_Web) Reset()                    { *m = ParseURLResponse_Web{} }
func (m *ParseURLResponse_Web) String() string            { return proto.CompactTextString(m) }
func (*ParseURLResponse_Web) ProtoMessage()               {}
func (*ParseURLResponse_Web) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2, 2} }

func (m *ParseURLResponse_Web) GetWebUrl() string {
	if m != nil {
		return m.WebUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*ParseURLRequest)(nil), "budao.ParseURLRequest")
	proto.RegisterType((*ParseExternalURLRequest)(nil), "budao.ParseExternalURLRequest")
	proto.RegisterType((*ParseURLResponse)(nil), "budao.ParseURLResponse")
	proto.RegisterType((*ParseURLResponse_Play)(nil), "budao.ParseURLResponse.Play")
	proto.RegisterType((*ParseURLResponse_Craw)(nil), "budao.ParseURLResponse.Craw")
	proto.RegisterType((*ParseURLResponse_Web)(nil), "budao.ParseURLResponse.Web")
	proto.RegisterEnum("budao.VideoParseRule", VideoParseRule_name, VideoParseRule_value)
}

func init() { proto.RegisterFile("parseurl.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 723 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0x13, 0xe7, 0x36, 0x49, 0xdb, 0xed, 0xf6, 0x92, 0x34, 0x45, 0xa5, 0x54, 0x42, 0x8a,
	0x78, 0x08, 0x52, 0x78, 0xe1, 0xf2, 0x82, 0x43, 0x4d, 0xbc, 0xb4, 0xb5, 0x23, 0xa7, 0xa6, 0x97,
	0x97, 0xc8, 0x4e, 0xb6, 0x22, 0xe0, 0xc4, 0xc1, 0x97, 0xa6, 0xe1, 0x1f, 0xf8, 0x02, 0x5e, 0x10,
	0x5f, 0xc3, 0x3f, 0xf0, 0x0d, 0xfc, 0x03, 0xda, 0xb5, 0xd3, 0x6e, 0x53, 0x5a, 0x09, 0xf1, 0xb6,
	0x7b, 0xf6, 0xcc, 0xec, 0x39, 0x33, 0xa3, 0x81, 0xa5, 0xb1, 0xed, 0x07, 0x34, 0xf2, 0xdd, 0xfa,
	0xd8, 0xf7, 0x42, 0x0f, 0x67, 0x9c, 0xa8, 0x6f, 0x7b, 0xd5, 0x52, 0xcf, 0x1b, 0x0e, 0xbd, 0x51,
	0x0c, 0xee, 0x76, 0x60, 0xb9, 0xcd, 0x68, 0x96, 0x79, 0x60, 0xd2, 0xcf, 0x11, 0x0d, 0x42, 0xfc,
	0x18, 0xb2, 0x1f, 0xa8, 0xdd, 0xa7, 0x7e, 0x45, 0xda, 0x91, 0x6a, 0xc5, 0xc6, 0x62, 0x9d, 0x07,
	0xd6, 0x35, 0x0e, 0x9a, 0xc9, 0x23, 0xde, 0x84, 0xfc, 0xc5, 0xa0, 0x4f, 0xbd, 0xee, 0xa0, 0x5f,
	0x49, 0xed, 0x48, 0xb5, 0x82, 0x99, 0xe3, 0x77, 0xd2, 0xdf, 0xfd, 0x25, 0x41, 0x99, 0x67, 0x55,
	0x2f, 0x43, 0xea, 0x8f, 0x6c, 0xf7, 0xdf, 0xb3, 0x63, 0x90, 0x7b, 0x5e, 0x9f, 0xf2, 0xcc, 0x8b,
	0x26, 0x3f, 0x33, 0xcc, 0xf1, 0xfa, 0xd3, 0x4a, 0x9a, 0xff, 0xc6, 0xcf, 0x0c, 0x3b, 0x8f, 0x46,
	0xbd, 0x8a, 0x1c, 0x63, 0xec, 0x7c, 0x43, 0x59, 0xe6, 0x86, 0x32, 0xfc, 0x10, 0x8a, 0x7e, 0x2c,
	0xa4, 0x3b, 0x8a, 0x86, 0x95, 0x2c, 0xcf, 0x0e, 0x09, 0xa4, 0x47, 0x43, 0xfc, 0x08, 0x4a, 0x33,
	0x42, 0x38, 0x18, 0xd2, 0x4a, 0x8e, 0x33, 0x66, 0x41, 0x47, 0x83, 0x21, 0xdd, 0xfd, 0x9a, 0x01,
	0x74, 0x5d, 0xb3, 0x60, 0xec, 0x8d, 0x02, 0xca, 0x6c, 0x05, 0xa1, 0x1d, 0x46, 0xc1, 0x9c, 0xad,
	0x0e, 0x07, 0xcd, 0xe4, 0x11, 0x37, 0x40, 0x1e, 0xbb, 0xf6, 0x94, 0xdb, 0x2a, 0x36, 0x1e, 0x24,
	0xa4, 0xf9, 0x6c, 0xf5, 0xb6, 0x6b, 0x4f, 0xb5, 0x05, 0x93, 0x73, 0x59, 0x4c, 0xcf, 0xb7, 0x27,
	0xdc, 0xf6, 0x3d, 0x31, 0x6f, 0x7c, 0x7b, 0xc2, 0x62, 0x18, 0x17, 0x3f, 0x85, 0xf4, 0x84, 0x3a,
	0xbc, 0x2a, 0xc5, 0xc6, 0xd6, 0x5d, 0x21, 0xc7, 0xd4, 0xd1, 0x16, 0x4c, 0xc6, 0xac, 0x7e, 0x97,
	0x40, 0x66, 0xbf, 0xe2, 0x2d, 0x28, 0xc4, 0xc5, 0x8b, 0x7c, 0x97, 0x7b, 0x29, 0x98, 0x71, 0x35,
	0x2d, 0xdf, 0xc5, 0xaf, 0xaf, 0x9a, 0x97, 0xda, 0x49, 0xd7, 0x8a, 0x8d, 0xda, 0x7d, 0x06, 0x92,
	0x96, 0xaa, 0xa3, 0xd0, 0x9f, 0xce, 0xfa, 0x5a, 0x7d, 0x01, 0x45, 0x01, 0xc6, 0x08, 0xd2, 0x9f,
	0xe8, 0x34, 0xf9, 0x87, 0x1d, 0xf1, 0x1a, 0x64, 0x2e, 0x6c, 0x37, 0xa2, 0xc9, 0x4c, 0xc5, 0x97,
	0x97, 0xa9, 0xe7, 0x52, 0xf5, 0xb7, 0x04, 0x32, 0x33, 0xc9, 0x7a, 0x3e, 0xa2, 0x97, 0x61, 0x12,
	0xc5, 0xcf, 0x37, 0x65, 0xa7, 0xe6, 0x64, 0x0b, 0x4d, 0x1d, 0x7b, 0x41, 0xc8, 0x2b, 0x99, 0xbf,
	0x6a, 0x6a, 0xdb, 0x0b, 0x42, 0xc1, 0x99, 0x7c, 0xbf, 0x33, 0xa6, 0xe0, 0x6f, 0xce, 0x98, 0xf0,
	0xf3, 0x01, 0x75, 0xe3, 0x91, 0x2b, 0x99, 0xf1, 0xe5, 0x7f, 0xfc, 0x6e, 0x43, 0xfa, 0x98, 0x3a,
	0xb8, 0x0c, 0xb9, 0x09, 0x75, 0x84, 0x76, 0x64, 0x27, 0xd4, 0xb1, 0x7c, 0xb7, 0x99, 0x05, 0xf9,
	0x68, 0x3a, 0xa6, 0x4f, 0x7e, 0xa6, 0x60, 0xe9, 0x3d, 0xb3, 0xca, 0xb5, 0x9a, 0x91, 0x4b, 0xf1,
	0x1a, 0xa0, 0xb6, 0x62, 0x76, 0xd4, 0xae, 0x69, 0x1d, 0xa8, 0xdd, 0x13, 0xd2, 0xb2, 0x14, 0xb4,
	0x80, 0xd7, 0x61, 0x45, 0x40, 0xf7, 0x0c, 0xeb, 0x94, 0xe8, 0x48, 0xc2, 0x65, 0x58, 0x15, 0xe0,
	0x7d, 0x4b, 0x21, 0x1d, 0xcd, 0xb0, 0x50, 0x0a, 0x6f, 0x41, 0x59, 0x78, 0xd0, 0x55, 0xa2, 0x29,
	0xfa, 0x9e, 0xa5, 0xe8, 0x67, 0x04, 0xa5, 0xe7, 0x92, 0x69, 0x8a, 0xb1, 0xaf, 0xe8, 0x48, 0xc6,
	0xab, 0xb0, 0x2c, 0xc0, 0x4d, 0xa3, 0x69, 0xa0, 0x0c, 0xde, 0x00, 0x2c, 0x80, 0x87, 0x44, 0x31,
	0xda, 0x0a, 0x41, 0xd9, 0xb9, 0x1c, 0x87, 0x2a, 0x61, 0x70, 0x6e, 0x4e, 0x7d, 0xf3, 0x4c, 0x53,
	0x74, 0x94, 0x9f, 0x43, 0x8f, 0x55, 0xd2, 0x34, 0x50, 0x01, 0xaf, 0xc0, 0xa2, 0x80, 0x1e, 0x10,
	0x04, 0x78, 0x13, 0xd6, 0x05, 0xe8, 0xad, 0x4a, 0xf6, 0x88, 0xda, 0xd1, 0x2c, 0x03, 0x15, 0xf1,
	0x36, 0x54, 0x85, 0xa7, 0x53, 0x45, 0x6f, 0xb5, 0x2c, 0x45, 0x6f, 0x75, 0x34, 0xd2, 0x26, 0x3a,
	0x2a, 0x35, 0xbe, 0x49, 0xd7, 0xeb, 0xb0, 0x43, 0xfd, 0x8b, 0x41, 0x8f, 0xe2, 0x57, 0x90, 0x9f,
	0x41, 0x78, 0xe3, 0xd6, 0x54, 0xf0, 0x09, 0xaa, 0x96, 0xef, 0x98, 0x16, 0xbc, 0x9f, 0xac, 0x0a,
	0x61, 0x11, 0xe2, 0x6d, 0x91, 0x7c, 0x7b, 0x43, 0xde, 0x99, 0xac, 0x59, 0x05, 0xd4, 0xf3, 0x86,
	0xf5, 0x8f, 0x97, 0x5f, 0xea, 0x63, 0x27, 0x26, 0xb5, 0xa5, 0x1f, 0xa9, 0xf4, 0xbb, 0x93, 0x33,
	0x27, 0xcb, 0xd7, 0xf9, 0xb3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x09, 0x3d, 0xa5, 0xf5,
	0x05, 0x00, 0x00,
}
