// Code generated by protoc-gen-twirp v5.4.1, DO NOT EDIT.
// source: report.proto

package budao

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"
import cityhash "github.com/zhenjl/cityhash"
import glog "github.com/sumaig/glog"
import strconv "strconv"

// =======================
// ReportService Interface
// =======================

type ReportService interface {
	ReportStatisData(context.Context, *ReportStatisDataRequest) (*ReportStatisDataResponse, error)

	ReportBatchData(context.Context, *ReportBatchDataRequest) (*ReportBatchDataResponse, error)
}

// =============================
// ReportService Protobuf Client
// =============================

type reportServiceProtobufClient struct {
	client HTTPClient
	urls   [2]string
}

// NewReportServiceProtobufClient creates a Protobuf client that implements the ReportService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewReportServiceProtobufClient(addr string, client HTTPClient) ReportService {
	prefix := urlBase(addr) + ReportServicePathPrefix
	urls := [2]string{
		prefix + "ReportStatisData",
		prefix + "ReportBatchData",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &reportServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &reportServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *reportServiceProtobufClient) ReportStatisData(ctx context.Context, in *ReportStatisDataRequest) (*ReportStatisDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportStatisData")
	out := new(ReportStatisDataResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceProtobufClient) ReportBatchData(ctx context.Context, in *ReportBatchDataRequest) (*ReportBatchDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportBatchData")
	out := new(ReportBatchDataResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =========================
// ReportService JSON Client
// =========================

type reportServiceJSONClient struct {
	client HTTPClient
	urls   [2]string
}

// NewReportServiceJSONClient creates a JSON client that implements the ReportService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewReportServiceJSONClient(addr string, client HTTPClient) ReportService {
	prefix := urlBase(addr) + ReportServicePathPrefix
	urls := [2]string{
		prefix + "ReportStatisData",
		prefix + "ReportBatchData",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &reportServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &reportServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *reportServiceJSONClient) ReportStatisData(ctx context.Context, in *ReportStatisDataRequest) (*ReportStatisDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportStatisData")
	out := new(ReportStatisDataResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceJSONClient) ReportBatchData(ctx context.Context, in *ReportBatchDataRequest) (*ReportBatchDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportBatchData")
	out := new(ReportBatchDataResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ============================
// ReportService Server Handler
// ============================

type reportServiceServer struct {
	ReportService
	hooks *twirp.ServerHooks
}

func NewReportServiceServer(svc ReportService, hooks *twirp.ServerHooks) TwirpServer {
	return &reportServiceServer{
		ReportService: svc,
		hooks:         hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *reportServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// ReportServicePathPrefix is used for all URL paths on a twirp ReportService server.
// Requests are always: POST ReportServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const ReportServicePathPrefix = "/budao.ReportService/"

func (s *reportServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithRequestIp(ctx, req.Header.Get("Remote_addr"))
	ctx = ctxsetters.WithSIG(ctx, req.Header.Get("sig"))
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/budao.ReportService/ReportStatisData":
		s.serveReportStatisData(ctx, resp, req)
		return
	case "/budao.ReportService/ReportBatchData":
		s.serveReportBatchData(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *reportServiceServer) serveReportStatisData(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReportStatisDataJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReportStatisDataProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *reportServiceServer) serveReportStatisDataJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportStatisData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ReportStatisDataRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *ReportStatisDataResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportStatisData(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportStatisDataResponse and nil error while calling ReportStatisData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportStatisDataProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportStatisData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(ReportStatisDataRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *ReportStatisDataResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportStatisData(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportStatisDataResponse and nil error while calling ReportStatisData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportBatchData(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReportBatchDataJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReportBatchDataProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *reportServiceServer) serveReportBatchDataJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportBatchData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ReportBatchDataRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *ReportBatchDataResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportBatchData(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportBatchDataResponse and nil error while calling ReportBatchData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportBatchDataProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportBatchData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(ReportBatchDataRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *ReportBatchDataResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportBatchData(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportBatchDataResponse and nil error while calling ReportBatchData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor7, 0
}

func (s *reportServiceServer) ProtocGenTwirpVersion() string {
	return "v5.4.1"
}

var twirpFileDescriptor7 = []byte{
	// 529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xdd, 0x8e, 0xd2, 0x40,
	0x14, 0xc7, 0xf9, 0x5e, 0x38, 0x40, 0xc4, 0x89, 0x51, 0xc4, 0xec, 0x6a, 0xaa, 0xc6, 0x8f, 0x0b,
	0xb2, 0xa9, 0x31, 0xde, 0x2a, 0xae, 0x09, 0x78, 0x45, 0x06, 0x63, 0x8c, 0x37, 0x9b, 0x69, 0x67,
	0x22, 0x55, 0xe8, 0xd4, 0x99, 0x29, 0x59, 0xf6, 0x39, 0x7c, 0x02, 0x1f, 0xc2, 0xa7, 0xf0, 0xa1,
	0xcc, 0x7c, 0x14, 0x4a, 0xb5, 0xc9, 0xba, 0x97, 0xe7, 0xfc, 0xcf, 0x9f, 0xf3, 0x3f, 0xbf, 0x69,
	0x80, 0x9e, 0x60, 0x09, 0x17, 0x6a, 0x9c, 0x08, 0xae, 0x38, 0x6a, 0x06, 0x29, 0x25, 0x7c, 0xd4,
	0x0b, 0xf9, 0x7a, 0xcd, 0x63, 0xdb, 0xf4, 0x2e, 0xa1, 0xf3, 0x31, 0xa2, 0x8c, 0x4f, 0x88, 0x64,
	0xe8, 0x2e, 0xb4, 0x37, 0xba, 0x38, 0x8f, 0xe8, 0xb0, 0xfa, 0xa0, 0xfa, 0xb4, 0x83, 0x8f, 0x4c,
	0x3d, 0xa3, 0x5a, 0x52, 0x82, 0x84, 0x4c, 0x4b, 0x35, 0x2b, 0x99, 0x7a, 0x46, 0xd1, 0x31, 0x40,
	0xb8, 0x24, 0x71, 0xcc, 0x56, 0x5a, 0xac, 0x1b, 0xb1, 0xe3, 0x3a, 0x33, 0x8a, 0x86, 0x70, 0x94,
	0x90, 0xed, 0x8a, 0x13, 0x3a, 0x6c, 0x58, 0xa3, 0x2b, 0x3d, 0x1f, 0xc0, 0xec, 0x7e, 0xbb, 0x8a,
	0xc2, 0x6f, 0xe8, 0x11, 0x34, 0x02, 0x22, 0x99, 0x59, 0xdc, 0xf5, 0x07, 0x63, 0x93, 0x76, 0xbc,
	0x0b, 0x87, 0x8d, 0xea, 0x6d, 0xa0, 0x6f, 0x5a, 0x73, 0xc1, 0xbf, 0x08, 0x26, 0xe5, 0xd5, 0x6c,
	0x68, 0x04, 0x6d, 0x9a, 0x0a, 0xa2, 0x22, 0x1e, 0x9b, 0xf8, 0x7d, 0xbc, 0xab, 0xd1, 0x43, 0xe8,
	0x27, 0x2b, 0xb2, 0x3d, 0xdf, 0x0d, 0xe8, 0x13, 0x6a, 0xb8, 0xa7, 0x9b, 0x67, 0xae, 0xe7, 0xbd,
	0x74, 0x7b, 0xdf, 0x5d, 0x24, 0x5c, 0xa6, 0x82, 0x5d, 0x31, 0xee, 0x73, 0xe8, 0x4e, 0x34, 0x08,
	0x61, 0x6f, 0xbc, 0x07, 0x9d, 0xc0, 0x94, 0x7b, 0xc2, 0x6d, 0xdb, 0x98, 0x51, 0xef, 0x47, 0x0d,
	0xee, 0x60, 0xf3, 0x60, 0x0b, 0x45, 0x54, 0x24, 0xcf, 0x88, 0x22, 0x98, 0x7d, 0x4f, 0x99, 0x54,
	0xe8, 0x31, 0xb4, 0x96, 0x8c, 0x50, 0x26, 0xdc, 0xbe, 0xbe, 0xdb, 0x37, 0x35, 0x4d, 0xec, 0x44,
	0xf4, 0x0c, 0x9a, 0xa1, 0x5e, 0x64, 0x6e, 0xec, 0xfa, 0x37, 0xf3, 0xa9, 0x4c, 0x82, 0x69, 0x05,
	0xdb, 0x09, 0xe4, 0x43, 0x3b, 0x71, 0x0c, 0xcd, 0xc1, 0x5d, 0xff, 0x56, 0x7e, 0x3a, 0xe3, 0x3b,
	0xad, 0xe0, 0xdd, 0x9c, 0xf6, 0x30, 0x77, 0xbf, 0x79, 0xcb, 0x82, 0x27, 0x63, 0xa3, 0x3d, 0xd9,
	0x1c, 0x7a, 0x05, 0x3d, 0x77, 0xb2, 0x4d, 0xd6, 0x34, 0x3e, 0xe4, 0x7c, 0x39, 0x38, 0xd3, 0x0a,
	0xee, 0x06, 0xfb, 0x72, 0xd2, 0x82, 0xc6, 0x87, 0x6d, 0xc2, 0xbc, 0x37, 0x30, 0xfc, 0x9b, 0x8a,
	0x4c, 0x78, 0x2c, 0x99, 0xc6, 0x22, 0x15, 0x51, 0xa9, 0x2c, 0x60, 0x59, 0x98, 0x26, 0x76, 0xa2,
	0xf7, 0xbb, 0x0a, 0xb7, 0xed, 0x6f, 0x4c, 0x88, 0x0a, 0x97, 0xd7, 0x00, 0xfb, 0x64, 0x0f, 0xb6,
	0xfe, 0x4f, 0xb0, 0x19, 0xd6, 0xd3, 0x03, 0xac, 0xf5, 0x32, 0xac, 0x39, 0xa8, 0xa7, 0x07, 0x50,
	0xeb, 0x65, 0x50, 0xf7, 0x48, 0xbd, 0xd7, 0xd9, 0x77, 0x92, 0xbb, 0xe6, 0xbf, 0x80, 0xf8, 0xbf,
	0xaa, 0xd0, 0x77, 0x50, 0x99, 0xd8, 0x44, 0x21, 0x43, 0x0b, 0x18, 0x14, 0x29, 0xa3, 0x13, 0x67,
	0x2e, 0xf9, 0x28, 0x47, 0xf7, 0x4b, 0x75, 0x97, 0x66, 0x0e, 0x37, 0x0a, 0x41, 0xd1, 0xf1, 0x81,
	0xa7, 0xf8, 0x1c, 0xa3, 0x93, 0x32, 0xd9, 0xfe, 0xe2, 0x64, 0x04, 0x83, 0x90, 0xaf, 0xc7, 0x5f,
	0x2f, 0x2e, 0xc7, 0x49, 0x60, 0x67, 0xe7, 0xd5, 0x9f, 0xb5, 0xfa, 0xfb, 0x4f, 0x9f, 0x83, 0x96,
	0xf9, 0x47, 0x7b, 0xf1, 0x27, 0x00, 0x00, 0xff, 0xff, 0x28, 0xca, 0x36, 0x22, 0xf6, 0x04, 0x00,
	0x00,
}
