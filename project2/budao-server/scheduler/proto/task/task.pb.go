// Code generated by protoc-gen-go. DO NOT EDIT.
// source: task.proto

package task

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TaskStatus int32

const (
	TaskStatus_Ok       TaskStatus = 0
	TaskStatus_Finished TaskStatus = 1
	TaskStatus_Dropped  TaskStatus = 2
)

var TaskStatus_name = map[int32]string{
	0: "Ok",
	1: "Finished",
	2: "Dropped",
}
var TaskStatus_value = map[string]int32{
	"Ok":       0,
	"Finished": 1,
	"Dropped":  2,
}

func (x TaskStatus) String() string {
	return proto.EnumName(TaskStatus_name, int32(x))
}
func (TaskStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type Regular struct {
	StartAt        string `protobuf:"bytes,1,opt,name=start_at,json=startAt" json:"start_at,omitempty"`
	FinishAt       string `protobuf:"bytes,2,opt,name=finish_at,json=finishAt" json:"finish_at,omitempty"`
	PeriodSeconds  int64  `protobuf:"varint,3,opt,name=period_seconds,json=periodSeconds" json:"period_seconds,omitempty"`
	LatencySeconds int64  `protobuf:"varint,4,opt,name=latency_seconds,json=latencySeconds" json:"latency_seconds,omitempty"`
}

func (m *Regular) Reset()                    { *m = Regular{} }
func (m *Regular) String() string            { return proto.CompactTextString(m) }
func (*Regular) ProtoMessage()               {}
func (*Regular) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Regular) GetStartAt() string {
	if m != nil {
		return m.StartAt
	}
	return ""
}

func (m *Regular) GetFinishAt() string {
	if m != nil {
		return m.FinishAt
	}
	return ""
}

func (m *Regular) GetPeriodSeconds() int64 {
	if m != nil {
		return m.PeriodSeconds
	}
	return 0
}

func (m *Regular) GetLatencySeconds() int64 {
	if m != nil {
		return m.LatencySeconds
	}
	return 0
}

type Task struct {
	Id             string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type           string   `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Regular        *Regular `protobuf:"bytes,3,opt,name=regular" json:"regular,omitempty"`
	MaxWorkerCount int64    `protobuf:"varint,4,opt,name=max_worker_count,json=maxWorkerCount" json:"max_worker_count,omitempty"`
	ImplConf       []byte   `protobuf:"bytes,5,opt,name=impl_conf,json=implConf,proto3" json:"impl_conf,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Task) GetRegular() *Regular {
	if m != nil {
		return m.Regular
	}
	return nil
}

func (m *Task) GetMaxWorkerCount() int64 {
	if m != nil {
		return m.MaxWorkerCount
	}
	return 0
}

func (m *Task) GetImplConf() []byte {
	if m != nil {
		return m.ImplConf
	}
	return nil
}

type Data struct {
	Tasks map[string]*Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Data) GetTasks() map[string]*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func init() {
	proto.RegisterType((*Regular)(nil), "task.Regular")
	proto.RegisterType((*Task)(nil), "task.Task")
	proto.RegisterType((*Data)(nil), "task.Data")
	proto.RegisterEnum("task.TaskStatus", TaskStatus_name, TaskStatus_value)
}

func init() { proto.RegisterFile("task.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x91, 0xc1, 0x8b, 0x9b, 0x40,
	0x14, 0xc6, 0x3b, 0x6a, 0xa2, 0x79, 0x26, 0xa9, 0x3c, 0x28, 0xd8, 0xf6, 0x22, 0x81, 0x12, 0x69,
	0x21, 0x85, 0xf4, 0x52, 0x7a, 0x0b, 0x49, 0x7b, 0x2d, 0x98, 0x85, 0x3d, 0xca, 0xac, 0x4e, 0x76,
	0x45, 0xe3, 0xc8, 0xcc, 0xb8, 0x1b, 0xff, 0x8c, 0xbd, 0xee, 0x5f, 0xbb, 0xcc, 0x8c, 0xd9, 0xbd,
	0x3d, 0x7f, 0xdf, 0x73, 0xbe, 0xef, 0xe3, 0x01, 0x28, 0x2a, 0xeb, 0x4d, 0x27, 0xb8, 0xe2, 0xe8,
	0xe9, 0x79, 0xf5, 0x4c, 0xc0, 0xcf, 0xd8, 0x7d, 0xdf, 0x50, 0x81, 0x9f, 0x21, 0x90, 0x8a, 0x0a,
	0x95, 0x53, 0x15, 0x93, 0x84, 0xa4, 0xb3, 0xcc, 0x37, 0xdf, 0x3b, 0x85, 0x5f, 0x61, 0x76, 0xaa,
	0xda, 0x4a, 0x3e, 0x68, 0xcd, 0x31, 0x5a, 0x60, 0xc1, 0x4e, 0xe1, 0x37, 0x58, 0x76, 0x4c, 0x54,
	0xbc, 0xcc, 0x25, 0x2b, 0x78, 0x5b, 0xca, 0xd8, 0x4d, 0x48, 0xea, 0x66, 0x0b, 0x4b, 0x8f, 0x16,
	0xe2, 0x1a, 0x3e, 0x36, 0x54, 0xb1, 0xb6, 0x18, 0xde, 0xf6, 0x3c, 0xb3, 0xb7, 0x1c, 0xf1, 0xb8,
	0xb8, 0x7a, 0x21, 0xe0, 0xdd, 0x50, 0x59, 0xe3, 0x12, 0x9c, 0xaa, 0x1c, 0xa3, 0x38, 0x55, 0x89,
	0x08, 0x9e, 0x1a, 0x3a, 0x36, 0x06, 0x30, 0x33, 0xae, 0xc1, 0x17, 0x36, 0xbf, 0x71, 0x0d, 0xb7,
	0x8b, 0x8d, 0x29, 0x39, 0x96, 0xca, 0xae, 0x2a, 0xa6, 0x10, 0x9d, 0xe9, 0x25, 0x7f, 0xe2, 0xa2,
	0x66, 0x22, 0x2f, 0x78, 0xdf, 0xaa, 0xab, 0xff, 0x99, 0x5e, 0x6e, 0x0d, 0xde, 0x6b, 0xaa, 0xcb,
	0x56, 0xe7, 0xae, 0xc9, 0x0b, 0xde, 0x9e, 0xe2, 0x49, 0x42, 0xd2, 0x79, 0x16, 0x68, 0xb0, 0xe7,
	0xed, 0x69, 0x35, 0x80, 0x77, 0xa0, 0x8a, 0xe2, 0x0f, 0x98, 0x68, 0x1f, 0x19, 0x93, 0xc4, 0x4d,
	0xc3, 0xed, 0x27, 0xeb, 0xaa, 0xa5, 0x8d, 0xce, 0x2e, 0xff, 0xb6, 0x4a, 0x0c, 0x99, 0xdd, 0xf9,
	0x72, 0x00, 0x78, 0x87, 0x18, 0x81, 0x5b, 0xb3, 0x61, 0xec, 0xa5, 0x47, 0x4c, 0x60, 0xf2, 0x48,
	0x9b, 0xde, 0x36, 0x0b, 0xb7, 0x60, 0x1f, 0xd3, 0xbf, 0x64, 0x56, 0xf8, 0xe3, 0xfc, 0x26, 0xdf,
	0x7f, 0xda, 0x57, 0x8e, 0x8a, 0xaa, 0x5e, 0xe2, 0x14, 0x9c, 0xff, 0x75, 0xf4, 0x01, 0xe7, 0x10,
	0xfc, 0x33, 0x97, 0x60, 0x65, 0x44, 0x30, 0x04, 0xff, 0x20, 0x78, 0xd7, 0xb1, 0x32, 0x72, 0xee,
	0xa6, 0xe6, 0xd2, 0xbf, 0x5e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x39, 0xe8, 0xf6, 0xf7, 0x01,
	0x00, 0x00,
}
