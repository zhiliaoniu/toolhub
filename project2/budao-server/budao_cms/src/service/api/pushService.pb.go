// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pushService.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// push删除
type PushDelRequest struct {
	PushId string `protobuf:"bytes,1,opt,name=pushId" json:"pushId,omitempty"`
}

func (m *PushDelRequest) Reset()                    { *m = PushDelRequest{} }
func (m *PushDelRequest) String() string            { return proto.CompactTextString(m) }
func (*PushDelRequest) ProtoMessage()               {}
func (*PushDelRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *PushDelRequest) GetPushId() string {
	if m != nil {
		return m.PushId
	}
	return ""
}

// push信息
type PushInfoRequest struct {
	PushId string `protobuf:"bytes,1,opt,name=pushId" json:"pushId,omitempty"`
}

func (m *PushInfoRequest) Reset()                    { *m = PushInfoRequest{} }
func (m *PushInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*PushInfoRequest) ProtoMessage()               {}
func (*PushInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *PushInfoRequest) GetPushId() string {
	if m != nil {
		return m.PushId
	}
	return ""
}

type PushInfoResponse struct {
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Data *Push  `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *PushInfoResponse) Reset()                    { *m = PushInfoResponse{} }
func (m *PushInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*PushInfoResponse) ProtoMessage()               {}
func (*PushInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *PushInfoResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *PushInfoResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PushInfoResponse) GetData() *Push {
	if m != nil {
		return m.Data
	}
	return nil
}

// push列表
type PushListResponse struct {
	Code string    `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Msg  string    `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Data *PushList `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *PushListResponse) Reset()                    { *m = PushListResponse{} }
func (m *PushListResponse) String() string            { return proto.CompactTextString(m) }
func (*PushListResponse) ProtoMessage()               {}
func (*PushListResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *PushListResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *PushListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PushListResponse) GetData() *PushList {
	if m != nil {
		return m.Data
	}
	return nil
}

type PushList struct {
	Data  []*Push `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Count uint64  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *PushList) Reset()                    { *m = PushList{} }
func (m *PushList) String() string            { return proto.CompactTextString(m) }
func (*PushList) ProtoMessage()               {}
func (*PushList) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *PushList) GetData() []*Push {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PushList) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*PushDelRequest)(nil), "api.PushDelRequest")
	proto.RegisterType((*PushInfoRequest)(nil), "api.PushInfoRequest")
	proto.RegisterType((*PushInfoResponse)(nil), "api.PushInfoResponse")
	proto.RegisterType((*PushListResponse)(nil), "api.PushListResponse")
	proto.RegisterType((*PushList)(nil), "api.PushList")
}

func init() { proto.RegisterFile("pushService.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4d, 0x4b, 0xf3, 0x40,
	0x10, 0xc7, 0x49, 0xd3, 0xa7, 0x4f, 0x3b, 0xf5, 0xa5, 0x4e, 0x5b, 0x09, 0x01, 0x21, 0xe6, 0x94,
	0x82, 0xe4, 0xd0, 0x1e, 0xf4, 0x26, 0x62, 0x2f, 0x05, 0x85, 0x1a, 0x0f, 0x1e, 0x3c, 0xc5, 0xec,
	0xd6, 0x06, 0x9a, 0xec, 0x9a, 0x4d, 0x84, 0x7e, 0x09, 0x3f, 0xb3, 0xec, 0x6e, 0x93, 0x34, 0x50,
	0x28, 0xde, 0x66, 0x87, 0xff, 0xff, 0xb7, 0xf3, 0x06, 0x17, 0xbc, 0x10, 0xeb, 0x57, 0x9a, 0x7d,
	0xc7, 0x11, 0xf5, 0x79, 0xc6, 0x72, 0x86, 0x66, 0xc8, 0x63, 0xfb, 0x24, 0x62, 0x49, 0xc2, 0x52,
	0x9d, 0x72, 0x3d, 0x38, 0x5b, 0x16, 0x62, 0x3d, 0xa7, 0x9b, 0x80, 0x7e, 0x15, 0x54, 0xe4, 0x78,
	0x09, 0x1d, 0xe9, 0x5c, 0x10, 0xcb, 0x70, 0x0c, 0xaf, 0x17, 0xec, 0x5e, 0xee, 0x04, 0xce, 0xa5,
	0x72, 0x91, 0xae, 0xd8, 0x31, 0xe9, 0x1b, 0x0c, 0x6a, 0xa9, 0xe0, 0x2c, 0x15, 0x14, 0x11, 0xda,
	0x11, 0x23, 0x74, 0xa7, 0x54, 0x31, 0x0e, 0xc0, 0x4c, 0xc4, 0xa7, 0xd5, 0x52, 0x29, 0x19, 0xe2,
	0x15, 0xb4, 0x49, 0x98, 0x87, 0x96, 0xe9, 0x18, 0x5e, 0x7f, 0xda, 0xf3, 0x43, 0x1e, 0xfb, 0x12,
	0x15, 0xa8, 0xb4, 0xfb, 0xae, 0xc1, 0x4f, 0xb1, 0xc8, 0xff, 0x08, 0xbe, 0x6e, 0x80, 0x4f, 0x2b,
	0xb0, 0x42, 0x69, 0xf8, 0x3d, 0x74, 0xcb, 0x4c, 0x55, 0x87, 0xe1, 0x98, 0x07, 0xea, 0xc0, 0x11,
	0xfc, 0x8b, 0x58, 0x91, 0xe6, 0xea, 0x87, 0x76, 0xa0, 0x1f, 0xd3, 0x9f, 0x16, 0xf4, 0x97, 0xf5,
	0xd0, 0x71, 0x02, 0xff, 0xe5, 0x40, 0x1e, 0x08, 0xc1, 0x9a, 0x60, 0x0f, 0x55, 0xf8, 0xa8, 0x96,
	0x50, 0x35, 0x71, 0x07, 0x5d, 0x5e, 0xfe, 0x3d, 0x56, 0x82, 0x97, 0x82, 0x66, 0x5b, 0xdd, 0xa8,
	0x1a, 0xb6, 0x3d, 0x6e, 0xd6, 0x5c, 0x3a, 0x6f, 0xb5, 0x53, 0xce, 0x1a, 0x47, 0x95, 0x64, 0x6f,
	0x4b, 0x7b, 0xc6, 0xc6, 0x42, 0x6e, 0x00, 0xa4, 0xf1, 0x99, 0x91, 0x78, 0xb5, 0x3d, 0x5a, 0xe0,
	0x4c, 0xf7, 0x32, 0xa7, 0x1b, 0x1c, 0x56, 0xd2, 0xfa, 0x6a, 0x0e, 0x9a, 0x3e, 0x3a, 0xea, 0xc6,
	0x66, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x02, 0x62, 0xa9, 0x8b, 0x02, 0x00, 0x00,
}
