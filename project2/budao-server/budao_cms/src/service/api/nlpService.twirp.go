// Code generated by protoc-gen-twirp v5.4.1, DO NOT EDIT.
// source: nlpService.proto

package api

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"
import cityhash "github.com/zhenjl/cityhash"
import glog "github.com/sumaig/glog"
import strconv "strconv"

// ====================
// NlpService Interface
// ====================

type NlpService interface {
	// 算法生成评论
	SimComment(context.Context, *SimCommentRequest) (*SimCommentResponse, error)
}

// ==========================
// NlpService Protobuf Client
// ==========================

type nlpServiceProtobufClient struct {
	client HTTPClient
	urls   [1]string
}

// NewNlpServiceProtobufClient creates a Protobuf client that implements the NlpService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewNlpServiceProtobufClient(addr string, client HTTPClient) NlpService {
	prefix := urlBase(addr) + NlpServicePathPrefix
	urls := [1]string{
		prefix + "SimComment",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &nlpServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &nlpServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *nlpServiceProtobufClient) SimComment(ctx context.Context, in *SimCommentRequest) (*SimCommentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "NlpService")
	ctx = ctxsetters.WithMethodName(ctx, "SimComment")
	out := new(SimCommentResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ======================
// NlpService JSON Client
// ======================

type nlpServiceJSONClient struct {
	client HTTPClient
	urls   [1]string
}

// NewNlpServiceJSONClient creates a JSON client that implements the NlpService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewNlpServiceJSONClient(addr string, client HTTPClient) NlpService {
	prefix := urlBase(addr) + NlpServicePathPrefix
	urls := [1]string{
		prefix + "SimComment",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &nlpServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &nlpServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *nlpServiceJSONClient) SimComment(ctx context.Context, in *SimCommentRequest) (*SimCommentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "NlpService")
	ctx = ctxsetters.WithMethodName(ctx, "SimComment")
	out := new(SimCommentResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =========================
// NlpService Server Handler
// =========================

type nlpServiceServer struct {
	NlpService
	hooks *twirp.ServerHooks
}

func NewNlpServiceServer(svc NlpService, hooks *twirp.ServerHooks) TwirpServer {
	return &nlpServiceServer{
		NlpService: svc,
		hooks:      hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *nlpServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// NlpServicePathPrefix is used for all URL paths on a twirp NlpService server.
// Requests are always: POST NlpServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const NlpServicePathPrefix = "/api.NlpService/"

func (s *nlpServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "NlpService")
	ctx = ctxsetters.WithRequestIp(ctx, req.Header.Get("Remote_addr"))
	ctx = ctxsetters.WithSIG(ctx, req.Header.Get("sig"))
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		if req.Method == "OPTIONS" {
			resp.Header().Add("Access-Control-Allow-Origin", "*")
			resp.Header().Add("Access-Control-Allow-Credentials", "true")
			resp.Header().Add("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, X-Automatic-Token,X-Remote-Addr")
			return
		}
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api.NlpService/SimComment":
		s.serveSimComment(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *nlpServiceServer) serveSimComment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSimCommentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSimCommentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *nlpServiceServer) serveSimCommentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SimComment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(SimCommentRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *SimCommentResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.SimComment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SimCommentResponse and nil error while calling SimComment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *nlpServiceServer) serveSimCommentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SimComment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(SimCommentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *SimCommentResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.SimComment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SimCommentResponse and nil error while calling SimComment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *nlpServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor4, 0
}

func (s *nlpServiceServer) ProtocGenTwirpVersion() string {
	return "v5.4.1"
}

var twirpFileDescriptor4 = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0xcb, 0x29, 0x08,
	0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c,
	0xc8, 0x94, 0x12, 0x28, 0xce, 0xcc, 0x75, 0xce, 0xcf, 0xcd, 0x4d, 0xcd, 0x2b, 0x81, 0x08, 0x2b,
	0xc5, 0x72, 0x09, 0x05, 0xc3, 0xc5, 0x82, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x84,
	0xb8, 0x58, 0x92, 0xf3, 0x53, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21,
	0x01, 0x2e, 0xe6, 0xdc, 0xe2, 0x74, 0x09, 0x26, 0xb0, 0x10, 0x88, 0x29, 0xa4, 0xc8, 0xc5, 0x92,
	0x92, 0x58, 0x92, 0x28, 0xc1, 0xac, 0xc0, 0xac, 0xc1, 0x6d, 0xc4, 0xab, 0x97, 0x58, 0x90, 0xa9,
	0x17, 0x9c, 0x9a, 0x57, 0x92, 0x9a, 0x97, 0x9c, 0x1a, 0x04, 0x96, 0x52, 0xd2, 0xe5, 0x12, 0x44,
	0x36, 0xbe, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x82, 0x8b, 0x3d, 0x39, 0x1f, 0xa4, 0xac, 0x04,
	0x6a, 0x01, 0x8c, 0x6b, 0xe4, 0xcd, 0xc5, 0xe5, 0x07, 0x77, 0xb8, 0x90, 0x2d, 0x17, 0x17, 0xc2,
	0xbd, 0x42, 0x62, 0x10, 0xf3, 0xd1, 0x4d, 0x93, 0x12, 0xc7, 0x10, 0x87, 0x78, 0x22, 0x89, 0x0d,
	0xec, 0x43, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x32, 0x7e, 0xec, 0x2f, 0x0c, 0x01, 0x00,
	0x00,
}
