// Code generated by protoc-gen-go. DO NOT EDIT.
// source: keywordService.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type QueryCommentContentReq struct {
	Keyword string `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
	Num     int32  `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	Size    int32  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
}

func (m *QueryCommentContentReq) Reset()                    { *m = QueryCommentContentReq{} }
func (m *QueryCommentContentReq) String() string            { return proto.CompactTextString(m) }
func (*QueryCommentContentReq) ProtoMessage()               {}
func (*QueryCommentContentReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *QueryCommentContentReq) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *QueryCommentContentReq) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *QueryCommentContentReq) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type OptionCommentContentReq struct {
	Keyword string `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
	NewWord string `protobuf:"bytes,2,opt,name=new_word,json=newWord" json:"new_word,omitempty"`
	Option  string `protobuf:"bytes,3,opt,name=option" json:"option,omitempty"`
}

func (m *OptionCommentContentReq) Reset()                    { *m = OptionCommentContentReq{} }
func (m *OptionCommentContentReq) String() string            { return proto.CompactTextString(m) }
func (*OptionCommentContentReq) ProtoMessage()               {}
func (*OptionCommentContentReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *OptionCommentContentReq) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *OptionCommentContentReq) GetNewWord() string {
	if m != nil {
		return m.NewWord
	}
	return ""
}

func (m *OptionCommentContentReq) GetOption() string {
	if m != nil {
		return m.Option
	}
	return ""
}

type OptionVideoTitleReq struct {
	Keyword string `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
	NewWord string `protobuf:"bytes,2,opt,name=new_word,json=newWord" json:"new_word,omitempty"`
}

func (m *OptionVideoTitleReq) Reset()                    { *m = OptionVideoTitleReq{} }
func (m *OptionVideoTitleReq) String() string            { return proto.CompactTextString(m) }
func (*OptionVideoTitleReq) ProtoMessage()               {}
func (*OptionVideoTitleReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *OptionVideoTitleReq) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *OptionVideoTitleReq) GetNewWord() string {
	if m != nil {
		return m.NewWord
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryCommentContentReq)(nil), "api.QueryCommentContentReq")
	proto.RegisterType((*OptionCommentContentReq)(nil), "api.OptionCommentContentReq")
	proto.RegisterType((*OptionVideoTitleReq)(nil), "api.OptionVideoTitleReq")
}

func init() { proto.RegisterFile("keywordService.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x4e, 0x83, 0x40,
	0x10, 0xc6, 0xd3, 0x56, 0xab, 0x9d, 0x18, 0xff, 0x2c, 0x15, 0x57, 0xf4, 0xd0, 0x70, 0xea, 0x89,
	0x83, 0xbe, 0x80, 0x91, 0x93, 0xda, 0xc4, 0x88, 0x46, 0xbd, 0x19, 0xa4, 0x63, 0xb2, 0xb1, 0xec,
	0xac, 0xb0, 0x48, 0xea, 0x4b, 0xf9, 0x8a, 0x86, 0xa1, 0xf6, 0x4f, 0xca, 0x45, 0x6f, 0x3b, 0xdf,
	0x37, 0xf9, 0xcd, 0xc7, 0x0c, 0xd0, 0x7f, 0xc7, 0x69, 0x49, 0xd9, 0xf8, 0x1e, 0xb3, 0x4f, 0x95,
	0x60, 0x60, 0x32, 0xb2, 0x24, 0x3a, 0xb1, 0x51, 0xde, 0x4e, 0x42, 0x69, 0x4a, 0xba, 0x96, 0xfc,
	0x67, 0x70, 0xef, 0x0a, 0xcc, 0xa6, 0x21, 0xa5, 0x29, 0x6a, 0x1b, 0x92, 0xb6, 0xa8, 0x6d, 0x84,
	0x1f, 0x42, 0xc2, 0xd6, 0x0c, 0x22, 0x5b, 0x83, 0xd6, 0xb0, 0x17, 0xfd, 0x96, 0x62, 0x1f, 0x3a,
	0xba, 0x48, 0x65, 0x7b, 0xd0, 0x1a, 0x6e, 0x46, 0xd5, 0x53, 0x08, 0xd8, 0xc8, 0xd5, 0x17, 0xca,
	0x0e, 0x4b, 0xfc, 0xf6, 0xdf, 0xe0, 0xe8, 0xd6, 0x58, 0x45, 0xfa, 0x2f, 0xe8, 0x63, 0xd8, 0xd6,
	0x58, 0xbe, 0xb0, 0xd5, 0xae, 0x2d, 0x8d, 0xe5, 0x53, 0x65, 0xb9, 0xd0, 0x25, 0xe6, 0xf1, 0x94,
	0x5e, 0x34, 0xab, 0xfc, 0x6b, 0x70, 0xea, 0x39, 0x8f, 0x6a, 0x8c, 0xf4, 0xa0, 0xec, 0x04, 0xff,
	0x3b, 0xe3, 0xec, 0xbb, 0x0d, 0xbb, 0x37, 0x2b, 0x9b, 0x13, 0x17, 0xb0, 0xc7, 0x0b, 0x5a, 0xd0,
	0xc5, 0x61, 0x10, 0x1b, 0x15, 0xb0, 0x3a, 0x52, 0x79, 0xf5, 0x45, 0x05, 0xe6, 0xd6, 0x73, 0x59,
	0xe6, 0xbe, 0x5a, 0xce, 0x0d, 0xe9, 0x1c, 0xc5, 0x25, 0x1c, 0x44, 0x68, 0x26, 0x71, 0x82, 0x4b,
	0x0c, 0xc9, 0xcd, 0x0d, 0xc1, 0x3d, 0x87, 0x9d, 0x90, 0x8f, 0x34, 0x67, 0x8c, 0xc0, 0x69, 0x38,
	0x93, 0x38, 0x59, 0x24, 0x59, 0xdb, 0xb2, 0x27, 0xe7, 0x20, 0xd4, 0x76, 0x25, 0xd1, 0x15, 0xf4,
	0x9b, 0x4e, 0x23, 0x4e, 0x97, 0x42, 0xad, 0xf3, 0x9a, 0x82, 0xbd, 0x76, 0xf9, 0x37, 0x3a, 0xff,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x36, 0x4d, 0xb4, 0x71, 0x02, 0x00, 0x00,
}
