// Code generated by protoc-gen-twirp v5.4.1, DO NOT EDIT.
// source: wechatService.proto

package api

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"
import cityhash "github.com/zhenjl/cityhash"
import glog "github.com/sumaig/glog"
import strconv "strconv"

// =======================
// WechatService Interface
// =======================

type WechatService interface {
	// wechat回调
	WechatRedirect(context.Context, *WechatRedirectRequest) (*WechatRedirectResponse, error)
}

// =============================
// WechatService Protobuf Client
// =============================

type wechatServiceProtobufClient struct {
	client HTTPClient
	urls   [1]string
}

// NewWechatServiceProtobufClient creates a Protobuf client that implements the WechatService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewWechatServiceProtobufClient(addr string, client HTTPClient) WechatService {
	prefix := urlBase(addr) + WechatServicePathPrefix
	urls := [1]string{
		prefix + "WechatRedirect",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &wechatServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &wechatServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *wechatServiceProtobufClient) WechatRedirect(ctx context.Context, in *WechatRedirectRequest) (*WechatRedirectResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "WechatService")
	ctx = ctxsetters.WithMethodName(ctx, "WechatRedirect")
	out := new(WechatRedirectResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =========================
// WechatService JSON Client
// =========================

type wechatServiceJSONClient struct {
	client HTTPClient
	urls   [1]string
}

// NewWechatServiceJSONClient creates a JSON client that implements the WechatService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewWechatServiceJSONClient(addr string, client HTTPClient) WechatService {
	prefix := urlBase(addr) + WechatServicePathPrefix
	urls := [1]string{
		prefix + "WechatRedirect",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &wechatServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &wechatServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *wechatServiceJSONClient) WechatRedirect(ctx context.Context, in *WechatRedirectRequest) (*WechatRedirectResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "WechatService")
	ctx = ctxsetters.WithMethodName(ctx, "WechatRedirect")
	out := new(WechatRedirectResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ============================
// WechatService Server Handler
// ============================

type wechatServiceServer struct {
	WechatService
	hooks *twirp.ServerHooks
}

func NewWechatServiceServer(svc WechatService, hooks *twirp.ServerHooks) TwirpServer {
	return &wechatServiceServer{
		WechatService: svc,
		hooks:         hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *wechatServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// WechatServicePathPrefix is used for all URL paths on a twirp WechatService server.
// Requests are always: POST WechatServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const WechatServicePathPrefix = "/api.WechatService/"

func (s *wechatServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "WechatService")
	ctx = ctxsetters.WithRequestIp(ctx, req.Header.Get("Remote_addr"))
	ctx = ctxsetters.WithSIG(ctx, req.Header.Get("sig"))
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		if req.Method == "OPTIONS" {
			resp.Header().Add("Access-Control-Allow-Origin", "*")
			resp.Header().Add("Access-Control-Allow-Credentials", "true")
			resp.Header().Add("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, X-Automatic-Token,X-Remote-Addr")
			return
		}
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api.WechatService/WechatRedirect":
		s.serveWechatRedirect(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *wechatServiceServer) serveWechatRedirect(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveWechatRedirectJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveWechatRedirectProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *wechatServiceServer) serveWechatRedirectJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "WechatRedirect")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(WechatRedirectRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *WechatRedirectResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WechatRedirect(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *WechatRedirectResponse and nil error while calling WechatRedirect. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *wechatServiceServer) serveWechatRedirectProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "WechatRedirect")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(WechatRedirectRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *WechatRedirectResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WechatRedirect(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *WechatRedirectResponse and nil error while calling WechatRedirect. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *wechatServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor11, 0
}

func (s *wechatServiceServer) ProtocGenTwirpVersion() string {
	return "v5.4.1"
}

var twirpFileDescriptor11 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0xcb, 0x4a, 0xc5, 0x30,
	0x10, 0xa5, 0xf6, 0x7a, 0xc1, 0x11, 0x1f, 0x8c, 0x5a, 0x4a, 0xdd, 0x94, 0xba, 0x29, 0x08, 0x5d,
	0xd4, 0x9d, 0x7f, 0xd0, 0x6d, 0xba, 0x10, 0xdc, 0xa5, 0xc9, 0xa0, 0xa1, 0xd8, 0xc4, 0x64, 0xaa,
	0xbf, 0x2f, 0xa6, 0x05, 0xa9, 0x74, 0x77, 0x5e, 0x9c, 0xe4, 0x0c, 0xdc, 0x7c, 0x93, 0x7a, 0x97,
	0xdc, 0x93, 0xff, 0x32, 0x8a, 0x1a, 0xe7, 0x2d, 0x5b, 0x4c, 0xa5, 0x33, 0xd5, 0x23, 0xdc, 0xbd,
	0x44, 0x4f, 0x90, 0x36, 0x9e, 0x14, 0x0b, 0xfa, 0x9c, 0x29, 0x30, 0x22, 0x1c, 0x94, 0xd5, 0x94,
	0x27, 0x65, 0x52, 0x9f, 0x89, 0x88, 0x2b, 0x05, 0xd9, 0xff, 0x70, 0x70, 0x76, 0x0a, 0xb4, 0x97,
	0xc6, 0x6b, 0x48, 0x3f, 0xc2, 0x5b, 0x7e, 0x12, 0xa5, 0x5f, 0x88, 0x0f, 0x70, 0xd0, 0x92, 0x65,
	0x9e, 0x96, 0x49, 0x7d, 0xde, 0x5e, 0x35, 0xd2, 0x99, 0x66, 0x90, 0x6a, 0xec, 0xd9, 0xcf, 0x8a,
	0x45, 0x34, 0xab, 0x67, 0x80, 0x3f, 0x0d, 0x33, 0x38, 0xce, 0x81, 0x7c, 0xa7, 0xd7, 0xea, 0x95,
	0xe1, 0x2d, 0x9c, 0xb2, 0x1d, 0x69, 0x5a, 0xeb, 0x17, 0xd2, 0xbe, 0xc2, 0xc5, 0x66, 0x29, 0x76,
	0x70, 0xb9, 0xfd, 0x31, 0x16, 0xf1, 0xd5, 0xdd, 0xcd, 0xc5, 0xfd, 0xae, 0xb7, 0x4c, 0x1c, 0x8e,
	0xf1, 0x6a, 0x4f, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xd2, 0xf4, 0x33, 0x4c, 0x01, 0x00,
	0x00,
}
