// Code generated by protoc-gen-twirp v5.4.1, DO NOT EDIT.
// source: topicService.proto

package api

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"
import cityhash "github.com/zhenjl/cityhash"
import glog "github.com/sumaig/glog"
import strconv "strconv"

// ======================
// TopicService Interface
// ======================

type TopicService interface {
	// 规则列表
	RuleList(context.Context, *QueryListRequest) (*TopicRuleListResponse, error)

	// 规则添加
	RuleAdd(context.Context, *TopicRuleRequest) (*CommonResponse, error)

	// 删除规则
	RuleDel(context.Context, *TopicRuleDelRequest) (*CommonResponse, error)

	// 获取规则信息
	RuleInfo(context.Context, *TopicRuleInfoRequest) (*TopicRuleInfoResponse, error)

	// 修改规则
	RuleModify(context.Context, *TopicRuleRequest) (*CommonResponse, error)

	// 获取媒介名称
	RuleMediaName(context.Context, *QueryListRequest) (*TopicRuleMediaNameResponse, error)

	// 规则预览接口
	RuleViewList(context.Context, *QueryListRequest) (*TopicRuleViewListResponse, error)

	// 发布规则条件筛选的视频
	PostRuleVideo(context.Context, *TopicRulePostVideoRequest) (*CommonResponse, error)
}

// ============================
// TopicService Protobuf Client
// ============================

type topicServiceProtobufClient struct {
	client HTTPClient
	urls   [8]string
}

// NewTopicServiceProtobufClient creates a Protobuf client that implements the TopicService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewTopicServiceProtobufClient(addr string, client HTTPClient) TopicService {
	prefix := urlBase(addr) + TopicServicePathPrefix
	urls := [8]string{
		prefix + "RuleList",
		prefix + "RuleAdd",
		prefix + "RuleDel",
		prefix + "RuleInfo",
		prefix + "RuleModify",
		prefix + "RuleMediaName",
		prefix + "RuleViewList",
		prefix + "PostRuleVideo",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &topicServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &topicServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *topicServiceProtobufClient) RuleList(ctx context.Context, in *QueryListRequest) (*TopicRuleListResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "TopicService")
	ctx = ctxsetters.WithMethodName(ctx, "RuleList")
	out := new(TopicRuleListResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceProtobufClient) RuleAdd(ctx context.Context, in *TopicRuleRequest) (*CommonResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "TopicService")
	ctx = ctxsetters.WithMethodName(ctx, "RuleAdd")
	out := new(CommonResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceProtobufClient) RuleDel(ctx context.Context, in *TopicRuleDelRequest) (*CommonResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "TopicService")
	ctx = ctxsetters.WithMethodName(ctx, "RuleDel")
	out := new(CommonResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceProtobufClient) RuleInfo(ctx context.Context, in *TopicRuleInfoRequest) (*TopicRuleInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "TopicService")
	ctx = ctxsetters.WithMethodName(ctx, "RuleInfo")
	out := new(TopicRuleInfoResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceProtobufClient) RuleModify(ctx context.Context, in *TopicRuleRequest) (*CommonResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "TopicService")
	ctx = ctxsetters.WithMethodName(ctx, "RuleModify")
	out := new(CommonResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceProtobufClient) RuleMediaName(ctx context.Context, in *QueryListRequest) (*TopicRuleMediaNameResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "TopicService")
	ctx = ctxsetters.WithMethodName(ctx, "RuleMediaName")
	out := new(TopicRuleMediaNameResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceProtobufClient) RuleViewList(ctx context.Context, in *QueryListRequest) (*TopicRuleViewListResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "TopicService")
	ctx = ctxsetters.WithMethodName(ctx, "RuleViewList")
	out := new(TopicRuleViewListResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceProtobufClient) PostRuleVideo(ctx context.Context, in *TopicRulePostVideoRequest) (*CommonResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "TopicService")
	ctx = ctxsetters.WithMethodName(ctx, "PostRuleVideo")
	out := new(CommonResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ========================
// TopicService JSON Client
// ========================

type topicServiceJSONClient struct {
	client HTTPClient
	urls   [8]string
}

// NewTopicServiceJSONClient creates a JSON client that implements the TopicService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewTopicServiceJSONClient(addr string, client HTTPClient) TopicService {
	prefix := urlBase(addr) + TopicServicePathPrefix
	urls := [8]string{
		prefix + "RuleList",
		prefix + "RuleAdd",
		prefix + "RuleDel",
		prefix + "RuleInfo",
		prefix + "RuleModify",
		prefix + "RuleMediaName",
		prefix + "RuleViewList",
		prefix + "PostRuleVideo",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &topicServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &topicServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *topicServiceJSONClient) RuleList(ctx context.Context, in *QueryListRequest) (*TopicRuleListResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "TopicService")
	ctx = ctxsetters.WithMethodName(ctx, "RuleList")
	out := new(TopicRuleListResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceJSONClient) RuleAdd(ctx context.Context, in *TopicRuleRequest) (*CommonResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "TopicService")
	ctx = ctxsetters.WithMethodName(ctx, "RuleAdd")
	out := new(CommonResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceJSONClient) RuleDel(ctx context.Context, in *TopicRuleDelRequest) (*CommonResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "TopicService")
	ctx = ctxsetters.WithMethodName(ctx, "RuleDel")
	out := new(CommonResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceJSONClient) RuleInfo(ctx context.Context, in *TopicRuleInfoRequest) (*TopicRuleInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "TopicService")
	ctx = ctxsetters.WithMethodName(ctx, "RuleInfo")
	out := new(TopicRuleInfoResponse)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceJSONClient) RuleModify(ctx context.Context, in *TopicRuleRequest) (*CommonResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "TopicService")
	ctx = ctxsetters.WithMethodName(ctx, "RuleModify")
	out := new(CommonResponse)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceJSONClient) RuleMediaName(ctx context.Context, in *QueryListRequest) (*TopicRuleMediaNameResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "TopicService")
	ctx = ctxsetters.WithMethodName(ctx, "RuleMediaName")
	out := new(TopicRuleMediaNameResponse)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceJSONClient) RuleViewList(ctx context.Context, in *QueryListRequest) (*TopicRuleViewListResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "TopicService")
	ctx = ctxsetters.WithMethodName(ctx, "RuleViewList")
	out := new(TopicRuleViewListResponse)
	err := doJSONRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicServiceJSONClient) PostRuleVideo(ctx context.Context, in *TopicRulePostVideoRequest) (*CommonResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "TopicService")
	ctx = ctxsetters.WithMethodName(ctx, "PostRuleVideo")
	out := new(CommonResponse)
	err := doJSONRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===========================
// TopicService Server Handler
// ===========================

type topicServiceServer struct {
	TopicService
	hooks *twirp.ServerHooks
}

func NewTopicServiceServer(svc TopicService, hooks *twirp.ServerHooks) TwirpServer {
	return &topicServiceServer{
		TopicService: svc,
		hooks:        hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *topicServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// TopicServicePathPrefix is used for all URL paths on a twirp TopicService server.
// Requests are always: POST TopicServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const TopicServicePathPrefix = "/api.TopicService/"

func (s *topicServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "TopicService")
	ctx = ctxsetters.WithRequestIp(ctx, req.Header.Get("Remote_addr"))
	ctx = ctxsetters.WithSIG(ctx, req.Header.Get("sig"))
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		if req.Method == "OPTIONS" {
			resp.Header().Add("Access-Control-Allow-Origin", "*")
			resp.Header().Add("Access-Control-Allow-Credentials", "true")
			resp.Header().Add("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, X-Automatic-Token,X-Remote-Addr")
			return
		}
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api.TopicService/RuleList":
		s.serveRuleList(ctx, resp, req)
		return
	case "/api.TopicService/RuleAdd":
		s.serveRuleAdd(ctx, resp, req)
		return
	case "/api.TopicService/RuleDel":
		s.serveRuleDel(ctx, resp, req)
		return
	case "/api.TopicService/RuleInfo":
		s.serveRuleInfo(ctx, resp, req)
		return
	case "/api.TopicService/RuleModify":
		s.serveRuleModify(ctx, resp, req)
		return
	case "/api.TopicService/RuleMediaName":
		s.serveRuleMediaName(ctx, resp, req)
		return
	case "/api.TopicService/RuleViewList":
		s.serveRuleViewList(ctx, resp, req)
		return
	case "/api.TopicService/PostRuleVideo":
		s.servePostRuleVideo(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *topicServiceServer) serveRuleList(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRuleListJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRuleListProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *topicServiceServer) serveRuleListJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RuleList")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(QueryListRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *TopicRuleListResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RuleList(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TopicRuleListResponse and nil error while calling RuleList. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *topicServiceServer) serveRuleListProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RuleList")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(QueryListRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *TopicRuleListResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RuleList(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TopicRuleListResponse and nil error while calling RuleList. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *topicServiceServer) serveRuleAdd(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRuleAddJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRuleAddProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *topicServiceServer) serveRuleAddJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RuleAdd")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(TopicRuleRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *CommonResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RuleAdd(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CommonResponse and nil error while calling RuleAdd. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *topicServiceServer) serveRuleAddProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RuleAdd")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(TopicRuleRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *CommonResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RuleAdd(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CommonResponse and nil error while calling RuleAdd. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *topicServiceServer) serveRuleDel(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRuleDelJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRuleDelProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *topicServiceServer) serveRuleDelJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RuleDel")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(TopicRuleDelRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *CommonResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RuleDel(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CommonResponse and nil error while calling RuleDel. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *topicServiceServer) serveRuleDelProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RuleDel")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(TopicRuleDelRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *CommonResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RuleDel(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CommonResponse and nil error while calling RuleDel. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *topicServiceServer) serveRuleInfo(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRuleInfoJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRuleInfoProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *topicServiceServer) serveRuleInfoJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RuleInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(TopicRuleInfoRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *TopicRuleInfoResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RuleInfo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TopicRuleInfoResponse and nil error while calling RuleInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *topicServiceServer) serveRuleInfoProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RuleInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(TopicRuleInfoRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *TopicRuleInfoResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RuleInfo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TopicRuleInfoResponse and nil error while calling RuleInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *topicServiceServer) serveRuleModify(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRuleModifyJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRuleModifyProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *topicServiceServer) serveRuleModifyJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RuleModify")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(TopicRuleRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *CommonResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RuleModify(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CommonResponse and nil error while calling RuleModify. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *topicServiceServer) serveRuleModifyProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RuleModify")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(TopicRuleRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *CommonResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RuleModify(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CommonResponse and nil error while calling RuleModify. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *topicServiceServer) serveRuleMediaName(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRuleMediaNameJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRuleMediaNameProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *topicServiceServer) serveRuleMediaNameJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RuleMediaName")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(QueryListRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *TopicRuleMediaNameResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RuleMediaName(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TopicRuleMediaNameResponse and nil error while calling RuleMediaName. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *topicServiceServer) serveRuleMediaNameProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RuleMediaName")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(QueryListRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *TopicRuleMediaNameResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RuleMediaName(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TopicRuleMediaNameResponse and nil error while calling RuleMediaName. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *topicServiceServer) serveRuleViewList(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRuleViewListJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRuleViewListProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *topicServiceServer) serveRuleViewListJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RuleViewList")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(QueryListRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *TopicRuleViewListResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RuleViewList(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TopicRuleViewListResponse and nil error while calling RuleViewList. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *topicServiceServer) serveRuleViewListProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RuleViewList")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(QueryListRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *TopicRuleViewListResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.RuleViewList(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TopicRuleViewListResponse and nil error while calling RuleViewList. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *topicServiceServer) servePostRuleVideo(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePostRuleVideoJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePostRuleVideoProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *topicServiceServer) servePostRuleVideoJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PostRuleVideo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(TopicRulePostVideoRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *CommonResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.PostRuleVideo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CommonResponse and nil error while calling PostRuleVideo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *topicServiceServer) servePostRuleVideoProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PostRuleVideo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(TopicRulePostVideoRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *CommonResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.PostRuleVideo(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CommonResponse and nil error while calling PostRuleVideo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *topicServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor8, 0
}

func (s *topicServiceServer) ProtocGenTwirpVersion() string {
	return "v5.4.1"
}

var twirpFileDescriptor8 = []byte{
	// 846 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x6d, 0x4f, 0xdb, 0x3a,
	0x14, 0x56, 0x5f, 0x69, 0x4e, 0x9b, 0x5e, 0x64, 0xe0, 0x2a, 0xf4, 0x72, 0xa1, 0xe4, 0x02, 0xe2,
	0x4a, 0x53, 0x3f, 0x80, 0xa6, 0x55, 0x93, 0x26, 0x8d, 0xd1, 0x6a, 0x43, 0x82, 0x69, 0x2b, 0x88,
	0xaf, 0xc8, 0x6b, 0x5c, 0x16, 0xd1, 0xc6, 0x59, 0xe2, 0x74, 0xea, 0xcf, 0xd8, 0x2f, 0xd9, 0x7e,
	0xc3, 0x7e, 0xd9, 0xe4, 0x97, 0x38, 0x71, 0x28, 0x48, 0x4c, 0xfb, 0x16, 0x3f, 0xe7, 0xc5, 0xc7,
	0x3e, 0xcf, 0x73, 0x62, 0x40, 0x8c, 0x86, 0xfe, 0xf8, 0x92, 0x44, 0x73, 0x7f, 0x4c, 0x7a, 0x61,
	0x44, 0x19, 0x45, 0x15, 0x1c, 0xfa, 0x9d, 0xd6, 0x98, 0xce, 0x66, 0x34, 0x90, 0x90, 0x7b, 0x0c,
	0x9b, 0x57, 0xdc, 0x71, 0x94, 0x4c, 0xc9, 0x07, 0x1a, 0xb3, 0x6b, 0xdf, 0x23, 0x74, 0x44, 0xbe,
	0x24, 0x24, 0x66, 0xe8, 0x6f, 0xa8, 0x47, 0xc9, 0x94, 0x9c, 0x0d, 0x9c, 0x52, 0xb7, 0x74, 0x68,
	0x8d, 0xd4, 0xca, 0xf5, 0x72, 0x41, 0xd7, 0x3e, 0xf9, 0x7a, 0xee, 0xc7, 0x6c, 0x44, 0xe2, 0x90,
	0x06, 0x31, 0x41, 0x08, 0xaa, 0x63, 0xea, 0x11, 0x15, 0x22, 0xbe, 0xd1, 0x2a, 0x54, 0x66, 0xf1,
	0xad, 0x53, 0x16, 0x10, 0xff, 0x44, 0xbb, 0x50, 0xf5, 0x30, 0xc3, 0x4e, 0xa5, 0x5b, 0x3a, 0x6c,
	0x1e, 0xd9, 0x3d, 0x1c, 0xfa, 0x3d, 0x9d, 0x4a, 0x98, 0xdc, 0xd7, 0xd0, 0x48, 0x11, 0xb4, 0xad,
	0xdc, 0x4b, 0xdd, 0xca, 0x61, 0xf3, 0x08, 0x94, 0x3b, 0x2f, 0x55, 0xe0, 0x68, 0x1d, 0x6a, 0x63,
	0x9a, 0x04, 0x4c, 0x6c, 0x51, 0x1d, 0xc9, 0x85, 0x3b, 0x81, 0x8e, 0xae, 0xf3, 0x82, 0x78, 0x3e,
	0x7e, 0x8f, 0x67, 0xe4, 0x89, 0x85, 0xba, 0x46, 0xa1, 0x6d, 0xb1, 0x73, 0x96, 0x4b, 0x56, 0x7a,
	0x0e, 0x96, 0x86, 0xd0, 0xff, 0x46, 0xa9, 0x1b, 0x66, 0xc0, 0x05, 0x89, 0x63, 0x7c, 0x4b, 0x1e,
	0xad, 0xfa, 0x1d, 0xac, 0x16, 0xfd, 0xd1, 0x16, 0x58, 0xb3, 0x14, 0x53, 0x05, 0x67, 0x00, 0xef,
	0x53, 0x4c, 0x93, 0x68, 0x4c, 0x54, 0xe1, 0x6a, 0xe5, 0x1e, 0xc0, 0xba, 0x3e, 0xff, 0x59, 0x30,
	0xd1, 0x7d, 0x6d, 0x43, 0xd9, 0xf7, 0x54, 0x9a, 0xb2, 0xef, 0xb9, 0x3f, 0x4a, 0xb0, 0x51, 0x70,
	0x7c, 0xd2, 0x1d, 0xf5, 0xf5, 0x1d, 0xf1, 0x23, 0xef, 0x89, 0x23, 0x2f, 0xcd, 0xd7, 0x1b, 0x60,
	0x86, 0x87, 0x01, 0x8b, 0x16, 0xf2, 0x06, 0x3a, 0x2f, 0xc0, 0xd2, 0x10, 0x4f, 0x7c, 0x47, 0x16,
	0x6a, 0x2f, 0xfe, 0xc9, 0x2f, 0x68, 0x8e, 0xa7, 0x49, 0x7a, 0x2e, 0xb9, 0x78, 0x59, 0xee, 0x97,
	0xdc, 0x7d, 0x58, 0xd3, 0x3b, 0x0c, 0xc8, 0xf4, 0xa1, 0x93, 0x7d, 0xaf, 0xc0, 0xaa, 0xf6, 0x4b,
	0x9d, 0x1c, 0x58, 0x11, 0xe2, 0xd0, 0xbc, 0x4e, 0x97, 0xfc, 0xb8, 0x01, 0xbf, 0x61, 0xb9, 0x9d,
	0xf8, 0x36, 0xaf, 0xbe, 0x52, 0xbc, 0xfa, 0x2d, 0xb0, 0x98, 0xcf, 0xa6, 0xe4, 0x9c, 0x04, 0x97,
	0x4e, 0x55, 0x5a, 0x35, 0x90, 0xb7, 0x0e, 0x9d, 0x9a, 0x69, 0x1d, 0xa2, 0x7f, 0x01, 0xc2, 0x29,
	0x5e, 0xdc, 0x48, 0x0e, 0xd4, 0xa5, 0x99, 0x23, 0xa7, 0x1c, 0x40, 0xfb, 0xd0, 0x9e, 0x73, 0x8a,
	0xdf, 0x78, 0x49, 0x84, 0x99, 0x4f, 0x03, 0x67, 0x45, 0xb8, 0xd8, 0x02, 0x1d, 0x28, 0x30, 0xd7,
	0xfc, 0x46, 0xbe, 0xf9, 0x68, 0x07, 0x9a, 0xf2, 0xeb, 0x86, 0x2d, 0x42, 0xe2, 0x58, 0xc2, 0x08,
	0x12, 0xba, 0x5a, 0x84, 0x04, 0xed, 0x42, 0x2b, 0x8c, 0xb0, 0x1f, 0x13, 0x55, 0x00, 0x08, 0x8f,
	0xa6, 0xc4, 0x64, 0x09, 0x3c, 0xc7, 0x67, 0x1c, 0xa5, 0x1e, 0x4d, 0x95, 0x83, 0x43, 0xd2, 0xe1,
	0x1f, 0xb0, 0x26, 0x78, 0xae, 0xcc, 0x2d, 0x61, 0x6e, 0x4c, 0xf0, 0x5c, 0x1a, 0xff, 0x03, 0x9b,
	0xcf, 0x1a, 0x12, 0x30, 0xe5, 0x60, 0x0b, 0x87, 0x96, 0x02, 0xa5, 0x93, 0xec, 0x58, 0x5b, 0x77,
	0x8c, 0xe4, 0xa8, 0xf8, 0x1b, 0x73, 0xe5, 0xc0, 0x90, 0x2b, 0x32, 0xa9, 0x98, 0x1b, 0x2e, 0x67,
	0x60, 0x1b, 0xb0, 0xd6, 0xb9, 0x94, 0x6d, 0x3b, 0x0b, 0x7c, 0x83, 0xc7, 0x77, 0x8f, 0xea, 0x35,
	0x02, 0x4b, 0x3b, 0xa2, 0x67, 0x46, 0x1a, 0xc7, 0x4c, 0xf3, 0xe7, 0xe8, 0xff, 0x33, 0xcf, 0xeb,
	0x74, 0x48, 0x14, 0xc8, 0xcf, 0xd9, 0x17, 0xd2, 0x58, 0xde, 0xb3, 0x4a, 0x91, 0x01, 0xc8, 0x05,
	0xa3, 0x11, 0x8a, 0xda, 0x66, 0x73, 0x3a, 0xa0, 0xbb, 0xa9, 0xc8, 0x9d, 0x75, 0xd7, 0xd0, 0x45,
	0xad, 0xa8, 0x8b, 0x54, 0x49, 0x75, 0x53, 0x49, 0x9a, 0xdd, 0x8a, 0xcb, 0x39, 0xba, 0x77, 0x21,
	0x4f, 0x3d, 0x45, 0x66, 0x83, 0x8d, 0xdb, 0x90, 0xa3, 0x9e, 0x26, 0x74, 0x46, 0xc6, 0x4c, 0x09,
	0x60, 0x28, 0x81, 0xc7, 0x69, 0xda, 0x6b, 0x12, 0x67, 0x42, 0x30, 0x54, 0xda, 0x2a, 0xaa, 0xd4,
	0x50, 0xb8, 0x5d, 0x54, 0xf8, 0x3a, 0xd4, 0xc4, 0xf0, 0x50, 0x0c, 0x96, 0x0b, 0xb4, 0x07, 0xa6,
	0x48, 0x9d, 0xbf, 0x96, 0x28, 0xf7, 0xe8, 0x5b, 0x15, 0x5a, 0x57, 0xb9, 0xbf, 0x34, 0x7a, 0x05,
	0x8d, 0x28, 0xe5, 0xa3, 0xfc, 0x71, 0x7c, 0x4c, 0x48, 0xb4, 0x90, 0x32, 0x10, 0xb3, 0xab, 0xd3,
	0x59, 0xc2, 0xe8, 0x54, 0x21, 0xcf, 0x61, 0x85, 0x87, 0x9f, 0x78, 0x9e, 0x8a, 0x2e, 0x4e, 0xbe,
	0xce, 0x9a, 0x80, 0x4f, 0xc5, 0x03, 0x40, 0x87, 0xf5, 0x65, 0xd8, 0x80, 0x4c, 0x91, 0x63, 0x86,
	0x65, 0x83, 0x75, 0x79, 0xe4, 0x89, 0xac, 0x97, 0x4f, 0x78, 0xb4, 0xb9, 0x6c, 0xea, 0x2f, 0xad,
	0xd9, 0xf8, 0xc1, 0xf4, 0x01, 0x78, 0x8a, 0x0b, 0xea, 0xf9, 0x93, 0xc5, 0x93, 0xca, 0x7e, 0x0b,
	0x76, 0x94, 0xff, 0xaf, 0x3f, 0x74, 0x63, 0x3b, 0x66, 0xce, 0xfb, 0xef, 0x80, 0x21, 0xb4, 0xa2,
	0xdc, 0x43, 0xe6, 0xa1, 0x3c, 0xdb, 0x66, 0x9e, 0x7b, 0xef, 0x9e, 0x01, 0xd8, 0x5c, 0x5c, 0xd2,
	0xe6, 0x11, 0x8a, 0x0a, 0x01, 0xc5, 0xd7, 0xd5, 0xd2, 0x53, 0x7d, 0xaa, 0x8b, 0x67, 0xd9, 0xf1,
	0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x23, 0x79, 0x0a, 0xbf, 0x09, 0x00, 0x00,
}
