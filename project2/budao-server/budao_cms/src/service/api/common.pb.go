// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type QueryListRequest struct {
	Filter map[string]string `protobuf:"bytes,1,rep,name=filter" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sort   string            `protobuf:"bytes,2,opt,name=sort" json:"sort,omitempty"`
	Num    int32             `protobuf:"varint,3,opt,name=num" json:"num,omitempty"`
	Size   int32             `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *QueryListRequest) Reset()                    { *m = QueryListRequest{} }
func (m *QueryListRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryListRequest) ProtoMessage()               {}
func (*QueryListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *QueryListRequest) GetFilter() map[string]string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *QueryListRequest) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *QueryListRequest) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *QueryListRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type CommonResponse struct {
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *CommonResponse) Reset()                    { *m = CommonResponse{} }
func (m *CommonResponse) String() string            { return proto.CompactTextString(m) }
func (*CommonResponse) ProtoMessage()               {}
func (*CommonResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CommonResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CommonResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type NullReq struct {
}

func (m *NullReq) Reset()                    { *m = NullReq{} }
func (m *NullReq) String() string            { return proto.CompactTextString(m) }
func (*NullReq) ProtoMessage()               {}
func (*NullReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type Comment struct {
	VSourceId string     `protobuf:"bytes,1,opt,name=v_sourceId,json=vSourceId" json:"v_sourceId,omitempty"`
	Status    uint32     `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Source    string     `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	Vid       string     `protobuf:"bytes,4,opt,name=vid" json:"vid,omitempty"`
	Cid       string     `protobuf:"bytes,5,opt,name=cid" json:"cid,omitempty"`
	Uid       string     `protobuf:"bytes,6,opt,name=uid" json:"uid,omitempty"`
	UName     string     `protobuf:"bytes,7,opt,name=u_name,json=uName" json:"u_name,omitempty"`
	UPhoto    string     `protobuf:"bytes,8,opt,name=u_photo,json=uPhoto" json:"u_photo,omitempty"`
	PId       string     `protobuf:"bytes,9,opt,name=p_id,json=pId" json:"p_id,omitempty"`
	MasterId  string     `protobuf:"bytes,10,opt,name=master_id,json=masterId" json:"master_id,omitempty"`
	Content   string     `protobuf:"bytes,11,opt,name=content" json:"content,omitempty"`
	FavorNum  string     `protobuf:"bytes,12,opt,name=favor_num,json=favorNum" json:"favor_num,omitempty"`
	Weight    string     `protobuf:"bytes,13,opt,name=weight" json:"weight,omitempty"`
	ReplyNum  string     `protobuf:"bytes,14,opt,name=reply_num,json=replyNum" json:"reply_num,omitempty"`
	State     string     `protobuf:"bytes,15,opt,name=state" json:"state,omitempty"`
	IsHot     int32      `protobuf:"varint,16,opt,name=is_hot,json=isHot" json:"is_hot,omitempty"`
	CTime     string     `protobuf:"bytes,17,opt,name=c_time,json=cTime" json:"c_time,omitempty"`
	UTime     string     `protobuf:"bytes,18,opt,name=u_time,json=uTime" json:"u_time,omitempty"`
	Sub       []*Comment `protobuf:"bytes,19,rep,name=sub" json:"sub,omitempty"`
}

func (m *Comment) Reset()                    { *m = Comment{} }
func (m *Comment) String() string            { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()               {}
func (*Comment) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *Comment) GetVSourceId() string {
	if m != nil {
		return m.VSourceId
	}
	return ""
}

func (m *Comment) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Comment) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Comment) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *Comment) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *Comment) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Comment) GetUName() string {
	if m != nil {
		return m.UName
	}
	return ""
}

func (m *Comment) GetUPhoto() string {
	if m != nil {
		return m.UPhoto
	}
	return ""
}

func (m *Comment) GetPId() string {
	if m != nil {
		return m.PId
	}
	return ""
}

func (m *Comment) GetMasterId() string {
	if m != nil {
		return m.MasterId
	}
	return ""
}

func (m *Comment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Comment) GetFavorNum() string {
	if m != nil {
		return m.FavorNum
	}
	return ""
}

func (m *Comment) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func (m *Comment) GetReplyNum() string {
	if m != nil {
		return m.ReplyNum
	}
	return ""
}

func (m *Comment) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Comment) GetIsHot() int32 {
	if m != nil {
		return m.IsHot
	}
	return 0
}

func (m *Comment) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

func (m *Comment) GetUTime() string {
	if m != nil {
		return m.UTime
	}
	return ""
}

func (m *Comment) GetSub() []*Comment {
	if m != nil {
		return m.Sub
	}
	return nil
}

type CommentListResponse struct {
	Code string       `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Msg  string       `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Data *CommentList `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *CommentListResponse) Reset()                    { *m = CommentListResponse{} }
func (m *CommentListResponse) String() string            { return proto.CompactTextString(m) }
func (*CommentListResponse) ProtoMessage()               {}
func (*CommentListResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *CommentListResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CommentListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *CommentListResponse) GetData() *CommentList {
	if m != nil {
		return m.Data
	}
	return nil
}

type CommentList struct {
	Data  []*Comment `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Count uint64     `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *CommentList) Reset()                    { *m = CommentList{} }
func (m *CommentList) String() string            { return proto.CompactTextString(m) }
func (*CommentList) ProtoMessage()               {}
func (*CommentList) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *CommentList) GetData() []*Comment {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CommentList) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type CommentListReq struct {
	Vid  string `protobuf:"bytes,1,opt,name=vid" json:"vid,omitempty"`
	Uid  string `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
	Size int32  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Num  int32  `protobuf:"varint,4,opt,name=num" json:"num,omitempty"`
}

func (m *CommentListReq) Reset()                    { *m = CommentListReq{} }
func (m *CommentListReq) String() string            { return proto.CompactTextString(m) }
func (*CommentListReq) ProtoMessage()               {}
func (*CommentListReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *CommentListReq) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *CommentListReq) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *CommentListReq) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *CommentListReq) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type VideoListResponse struct {
	Code string     `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Msg  string     `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Data *VideoList `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *VideoListResponse) Reset()                    { *m = VideoListResponse{} }
func (m *VideoListResponse) String() string            { return proto.CompactTextString(m) }
func (*VideoListResponse) ProtoMessage()               {}
func (*VideoListResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *VideoListResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *VideoListResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *VideoListResponse) GetData() *VideoList {
	if m != nil {
		return m.Data
	}
	return nil
}

type VideoList struct {
	Data  []*Video `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Count uint64   `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *VideoList) Reset()                    { *m = VideoList{} }
func (m *VideoList) String() string            { return proto.CompactTextString(m) }
func (*VideoList) ProtoMessage()               {}
func (*VideoList) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *VideoList) GetData() []*Video {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *VideoList) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Video struct {
	Id            string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Vid           string   `protobuf:"bytes,2,opt,name=vid" json:"vid,omitempty"`
	SourceVid     string   `protobuf:"bytes,3,opt,name=source_vid,json=sourceVid" json:"source_vid,omitempty"`
	VSourceId     string   `protobuf:"bytes,4,opt,name=v_source_id,json=vSourceId" json:"v_source_id,omitempty"`
	PostVid       string   `protobuf:"bytes,5,opt,name=post_vid,json=postVid" json:"post_vid,omitempty"`
	SourceType    string   `protobuf:"bytes,6,opt,name=source_type,json=sourceType" json:"source_type,omitempty"`
	MediaName     string   `protobuf:"bytes,7,opt,name=media_name,json=mediaName" json:"media_name,omitempty"`
	PraiseCount   string   `protobuf:"bytes,8,opt,name=praise_count,json=praiseCount" json:"praise_count,omitempty"`
	FavCount      string   `protobuf:"bytes,9,opt,name=fav_count,json=favCount" json:"fav_count,omitempty"`
	ShareCount    string   `protobuf:"bytes,10,opt,name=share_count,json=shareCount" json:"share_count,omitempty"`
	CommentCount  string   `protobuf:"bytes,11,opt,name=comment_count,json=commentCount" json:"comment_count,omitempty"`
	Topic         string   `protobuf:"bytes,12,opt,name=topic" json:"topic,omitempty"`
	Title         string   `protobuf:"bytes,13,opt,name=title" json:"title,omitempty"`
	Duration      uint32   `protobuf:"varint,14,opt,name=duration" json:"duration,omitempty"`
	PlayCount     uint32   `protobuf:"varint,15,opt,name=play_count,json=playCount" json:"play_count,omitempty"`
	CoverUrl      string   `protobuf:"bytes,36,opt,name=cover_url,json=coverUrl" json:"cover_url,omitempty"`
	VideoUrl      string   `protobuf:"bytes,16,opt,name=video_url,json=videoUrl" json:"video_url,omitempty"`
	PlayUrl       string   `protobuf:"bytes,17,opt,name=play_url,json=playUrl" json:"play_url,omitempty"`
	VideoCover    string   `protobuf:"bytes,18,opt,name=video_cover,json=videoCover" json:"video_cover,omitempty"`
	Source        uint32   `protobuf:"varint,19,opt,name=source" json:"source,omitempty"`
	Status        string   `protobuf:"bytes,20,opt,name=status" json:"status,omitempty"`
	VideoDuration int32    `protobuf:"varint,21,opt,name=video_duration,json=videoDuration" json:"video_duration,omitempty"`
	VideoWidth    uint32   `protobuf:"varint,22,opt,name=video_width,json=videoWidth" json:"video_width,omitempty"`
	VideoHeight   uint32   `protobuf:"varint,23,opt,name=video_height,json=videoHeight" json:"video_height,omitempty"`
	TitleLen      string   `protobuf:"bytes,24,opt,name=title_len,json=titleLen" json:"title_len,omitempty"`
	CommentNum    uint32   `protobuf:"varint,25,opt,name=comment_num,json=commentNum" json:"comment_num,omitempty"`
	FavorNum      uint32   `protobuf:"varint,26,opt,name=favor_num,json=favorNum" json:"favor_num,omitempty"`
	ShareNum      uint32   `protobuf:"varint,27,opt,name=share_num,json=shareNum" json:"share_num,omitempty"`
	ViewNum       uint32   `protobuf:"varint,28,opt,name=view_num,json=viewNum" json:"view_num,omitempty"`
	ParseType     int32    `protobuf:"varint,29,opt,name=parse_type,json=parseType" json:"parse_type,omitempty"`
	InsertTime    string   `protobuf:"bytes,30,opt,name=insert_time,json=insertTime" json:"insert_time,omitempty"`
	HasQuestion   bool     `protobuf:"varint,31,opt,name=has_question,json=hasQuestion" json:"has_question,omitempty"`
	HasTopic      bool     `protobuf:"varint,32,opt,name=has_topic,json=hasTopic" json:"has_topic,omitempty"`
	Topics        []*Topic `protobuf:"bytes,33,rep,name=topics" json:"topics,omitempty"`
	OpStatus      string   `protobuf:"bytes,34,opt,name=op_status,json=opStatus" json:"op_status,omitempty"`
	PostType      string   `protobuf:"bytes,35,opt,name=post_type,json=postType" json:"post_type,omitempty"`
	CTime         string   `protobuf:"bytes,37,opt,name=c_time,json=cTime" json:"c_time,omitempty"`
	UTime         string   `protobuf:"bytes,38,opt,name=u_time,json=uTime" json:"u_time,omitempty"`
	Weight        string   `protobuf:"bytes,39,opt,name=weight" json:"weight,omitempty"`
	Disable       string   `protobuf:"bytes,40,opt,name=disable" json:"disable,omitempty"`
}

func (m *Video) Reset()                    { *m = Video{} }
func (m *Video) String() string            { return proto.CompactTextString(m) }
func (*Video) ProtoMessage()               {}
func (*Video) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *Video) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Video) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *Video) GetSourceVid() string {
	if m != nil {
		return m.SourceVid
	}
	return ""
}

func (m *Video) GetVSourceId() string {
	if m != nil {
		return m.VSourceId
	}
	return ""
}

func (m *Video) GetPostVid() string {
	if m != nil {
		return m.PostVid
	}
	return ""
}

func (m *Video) GetSourceType() string {
	if m != nil {
		return m.SourceType
	}
	return ""
}

func (m *Video) GetMediaName() string {
	if m != nil {
		return m.MediaName
	}
	return ""
}

func (m *Video) GetPraiseCount() string {
	if m != nil {
		return m.PraiseCount
	}
	return ""
}

func (m *Video) GetFavCount() string {
	if m != nil {
		return m.FavCount
	}
	return ""
}

func (m *Video) GetShareCount() string {
	if m != nil {
		return m.ShareCount
	}
	return ""
}

func (m *Video) GetCommentCount() string {
	if m != nil {
		return m.CommentCount
	}
	return ""
}

func (m *Video) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Video) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Video) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Video) GetPlayCount() uint32 {
	if m != nil {
		return m.PlayCount
	}
	return 0
}

func (m *Video) GetCoverUrl() string {
	if m != nil {
		return m.CoverUrl
	}
	return ""
}

func (m *Video) GetVideoUrl() string {
	if m != nil {
		return m.VideoUrl
	}
	return ""
}

func (m *Video) GetPlayUrl() string {
	if m != nil {
		return m.PlayUrl
	}
	return ""
}

func (m *Video) GetVideoCover() string {
	if m != nil {
		return m.VideoCover
	}
	return ""
}

func (m *Video) GetSource() uint32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *Video) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Video) GetVideoDuration() int32 {
	if m != nil {
		return m.VideoDuration
	}
	return 0
}

func (m *Video) GetVideoWidth() uint32 {
	if m != nil {
		return m.VideoWidth
	}
	return 0
}

func (m *Video) GetVideoHeight() uint32 {
	if m != nil {
		return m.VideoHeight
	}
	return 0
}

func (m *Video) GetTitleLen() string {
	if m != nil {
		return m.TitleLen
	}
	return ""
}

func (m *Video) GetCommentNum() uint32 {
	if m != nil {
		return m.CommentNum
	}
	return 0
}

func (m *Video) GetFavorNum() uint32 {
	if m != nil {
		return m.FavorNum
	}
	return 0
}

func (m *Video) GetShareNum() uint32 {
	if m != nil {
		return m.ShareNum
	}
	return 0
}

func (m *Video) GetViewNum() uint32 {
	if m != nil {
		return m.ViewNum
	}
	return 0
}

func (m *Video) GetParseType() int32 {
	if m != nil {
		return m.ParseType
	}
	return 0
}

func (m *Video) GetInsertTime() string {
	if m != nil {
		return m.InsertTime
	}
	return ""
}

func (m *Video) GetHasQuestion() bool {
	if m != nil {
		return m.HasQuestion
	}
	return false
}

func (m *Video) GetHasTopic() bool {
	if m != nil {
		return m.HasTopic
	}
	return false
}

func (m *Video) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *Video) GetOpStatus() string {
	if m != nil {
		return m.OpStatus
	}
	return ""
}

func (m *Video) GetPostType() string {
	if m != nil {
		return m.PostType
	}
	return ""
}

func (m *Video) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

func (m *Video) GetUTime() string {
	if m != nil {
		return m.UTime
	}
	return ""
}

func (m *Video) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func (m *Video) GetDisable() string {
	if m != nil {
		return m.Disable
	}
	return ""
}

// banner
type Banner struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	PicUrl      string `protobuf:"bytes,2,opt,name=picUrl" json:"picUrl,omitempty"`
	ClickUrl    string `protobuf:"bytes,3,opt,name=clickUrl" json:"clickUrl,omitempty"`
	Position    string `protobuf:"bytes,4,opt,name=position" json:"position,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Status      string `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
	FromTime    string `protobuf:"bytes,7,opt,name=fromTime" json:"fromTime,omitempty"`
	ToTime      string `protobuf:"bytes,8,opt,name=toTime" json:"toTime,omitempty"`
	CreatedAt   string `protobuf:"bytes,9,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt   string `protobuf:"bytes,10,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *Banner) Reset()                    { *m = Banner{} }
func (m *Banner) String() string            { return proto.CompactTextString(m) }
func (*Banner) ProtoMessage()               {}
func (*Banner) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *Banner) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Banner) GetPicUrl() string {
	if m != nil {
		return m.PicUrl
	}
	return ""
}

func (m *Banner) GetClickUrl() string {
	if m != nil {
		return m.ClickUrl
	}
	return ""
}

func (m *Banner) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *Banner) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Banner) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Banner) GetFromTime() string {
	if m != nil {
		return m.FromTime
	}
	return ""
}

func (m *Banner) GetToTime() string {
	if m != nil {
		return m.ToTime
	}
	return ""
}

func (m *Banner) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Banner) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type User struct {
	Uid   string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Photo string `protobuf:"bytes,2,opt,name=photo" json:"photo,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *User) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *User) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Question struct {
	Vid          string            `protobuf:"bytes,1,opt,name=vid" json:"vid,omitempty"`
	Options      []*QuestionOption `protobuf:"bytes,2,rep,name=options" json:"options,omitempty"`
	Id           string            `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Content      string            `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	OptionID     string            `protobuf:"bytes,5,opt,name=optionID" json:"optionID,omitempty"`
	TypeName     string            `protobuf:"bytes,6,opt,name=typeName" json:"typeName,omitempty"`
	QuestionType string            `protobuf:"bytes,7,opt,name=questionType" json:"questionType,omitempty"`
	Category     string            `protobuf:"bytes,8,opt,name=category" json:"category,omitempty"`
	CategoryName string            `protobuf:"bytes,9,opt,name=categoryName" json:"categoryName,omitempty"`
	AnswerType   string            `protobuf:"bytes,10,opt,name=answerType" json:"answerType,omitempty"`
	Answer       string            `protobuf:"bytes,11,opt,name=answer" json:"answer,omitempty"`
	Answers      []string          `protobuf:"bytes,12,rep,name=answers" json:"answers,omitempty"`
	HardLevel    string            `protobuf:"bytes,13,opt,name=hardLevel" json:"hardLevel,omitempty"`
	Score        string            `protobuf:"bytes,14,opt,name=score" json:"score,omitempty"`
	CTime        string            `protobuf:"bytes,15,opt,name=cTime" json:"cTime,omitempty"`
	State        string            `protobuf:"bytes,16,opt,name=state" json:"state,omitempty"`
	UTime        string            `protobuf:"bytes,17,opt,name=uTime" json:"uTime,omitempty"`
	RightNum     uint32            `protobuf:"varint,18,opt,name=right_num,json=rightNum" json:"right_num,omitempty"`
	WrongNum     uint32            `protobuf:"varint,19,opt,name=wrong_num,json=wrongNum" json:"wrong_num,omitempty"`
}

func (m *Question) Reset()                    { *m = Question{} }
func (m *Question) String() string            { return proto.CompactTextString(m) }
func (*Question) ProtoMessage()               {}
func (*Question) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *Question) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *Question) GetOptions() []*QuestionOption {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *Question) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Question) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Question) GetOptionID() string {
	if m != nil {
		return m.OptionID
	}
	return ""
}

func (m *Question) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *Question) GetQuestionType() string {
	if m != nil {
		return m.QuestionType
	}
	return ""
}

func (m *Question) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Question) GetCategoryName() string {
	if m != nil {
		return m.CategoryName
	}
	return ""
}

func (m *Question) GetAnswerType() string {
	if m != nil {
		return m.AnswerType
	}
	return ""
}

func (m *Question) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

func (m *Question) GetAnswers() []string {
	if m != nil {
		return m.Answers
	}
	return nil
}

func (m *Question) GetHardLevel() string {
	if m != nil {
		return m.HardLevel
	}
	return ""
}

func (m *Question) GetScore() string {
	if m != nil {
		return m.Score
	}
	return ""
}

func (m *Question) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

func (m *Question) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Question) GetUTime() string {
	if m != nil {
		return m.UTime
	}
	return ""
}

func (m *Question) GetRightNum() uint32 {
	if m != nil {
		return m.RightNum
	}
	return 0
}

func (m *Question) GetWrongNum() uint32 {
	if m != nil {
		return m.WrongNum
	}
	return 0
}

type QuestionOption struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	QuestionId string `protobuf:"bytes,2,opt,name=question_id,json=questionId" json:"question_id,omitempty"`
	Index      string `protobuf:"bytes,3,opt,name=index" json:"index,omitempty"`
	Content    string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
	IsAnswer   string `protobuf:"bytes,5,opt,name=is_answer,json=isAnswer" json:"is_answer,omitempty"`
	AnswerNum  string `protobuf:"bytes,6,opt,name=answer_num,json=answerNum" json:"answer_num,omitempty"`
}

func (m *QuestionOption) Reset()                    { *m = QuestionOption{} }
func (m *QuestionOption) String() string            { return proto.CompactTextString(m) }
func (*QuestionOption) ProtoMessage()               {}
func (*QuestionOption) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *QuestionOption) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QuestionOption) GetQuestionId() string {
	if m != nil {
		return m.QuestionId
	}
	return ""
}

func (m *QuestionOption) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *QuestionOption) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *QuestionOption) GetIsAnswer() string {
	if m != nil {
		return m.IsAnswer
	}
	return ""
}

func (m *QuestionOption) GetAnswerNum() string {
	if m != nil {
		return m.AnswerNum
	}
	return ""
}

type Topic struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	TopicId     string `protobuf:"bytes,2,opt,name=topic_id,json=topicId" json:"topic_id,omitempty"`
	Version     string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Pic         string `protobuf:"bytes,5,opt,name=pic" json:"pic,omitempty"`
	Disable     string `protobuf:"bytes,6,opt,name=disable" json:"disable,omitempty"`
	NeedLogin   string `protobuf:"bytes,7,opt,name=need_login,json=needLogin" json:"need_login,omitempty"`
	Weight      string `protobuf:"bytes,8,opt,name=weight" json:"weight,omitempty"`
	Description string `protobuf:"bytes,9,opt,name=description" json:"description,omitempty"`
	Rule        string `protobuf:"bytes,10,opt,name=rule" json:"rule,omitempty"`
	UserNum     string `protobuf:"bytes,11,opt,name=user_num,json=userNum" json:"user_num,omitempty"`
	VideoNum    string `protobuf:"bytes,12,opt,name=video_num,json=videoNum" json:"video_num,omitempty"`
	CTime       string `protobuf:"bytes,13,opt,name=c_time,json=cTime" json:"c_time,omitempty"`
	UTime       string `protobuf:"bytes,14,opt,name=u_time,json=uTime" json:"u_time,omitempty"`
	Hide        string `protobuf:"bytes,15,opt,name=hide" json:"hide,omitempty"`
}

func (m *Topic) Reset()                    { *m = Topic{} }
func (m *Topic) String() string            { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()               {}
func (*Topic) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *Topic) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Topic) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *Topic) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Topic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Topic) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *Topic) GetDisable() string {
	if m != nil {
		return m.Disable
	}
	return ""
}

func (m *Topic) GetNeedLogin() string {
	if m != nil {
		return m.NeedLogin
	}
	return ""
}

func (m *Topic) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func (m *Topic) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Topic) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *Topic) GetUserNum() string {
	if m != nil {
		return m.UserNum
	}
	return ""
}

func (m *Topic) GetVideoNum() string {
	if m != nil {
		return m.VideoNum
	}
	return ""
}

func (m *Topic) GetCTime() string {
	if m != nil {
		return m.CTime
	}
	return ""
}

func (m *Topic) GetUTime() string {
	if m != nil {
		return m.UTime
	}
	return ""
}

func (m *Topic) GetHide() string {
	if m != nil {
		return m.Hide
	}
	return ""
}

type TopicVideo struct {
	TopicId string `protobuf:"bytes,1,opt,name=topic_id,json=topicId" json:"topic_id,omitempty"`
	Vid     string `protobuf:"bytes,2,opt,name=vid" json:"vid,omitempty"`
	Weight  string `protobuf:"bytes,3,opt,name=weight" json:"weight,omitempty"`
	Disable string `protobuf:"bytes,4,opt,name=disable" json:"disable,omitempty"`
}

func (m *TopicVideo) Reset()                    { *m = TopicVideo{} }
func (m *TopicVideo) String() string            { return proto.CompactTextString(m) }
func (*TopicVideo) ProtoMessage()               {}
func (*TopicVideo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *TopicVideo) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *TopicVideo) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *TopicVideo) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func (m *TopicVideo) GetDisable() string {
	if m != nil {
		return m.Disable
	}
	return ""
}

type Push struct {
	Id            string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OpUid         string `protobuf:"bytes,2,opt,name=opUid" json:"opUid,omitempty"`
	PushObj       string `protobuf:"bytes,3,opt,name=pushObj" json:"pushObj,omitempty"`
	PushChannel   string `protobuf:"bytes,4,opt,name=pushChannel" json:"pushChannel,omitempty"`
	PushType      string `protobuf:"bytes,5,opt,name=pushType" json:"pushType,omitempty"`
	PushStatus    string `protobuf:"bytes,6,opt,name=pushStatus" json:"pushStatus,omitempty"`
	PushTitle     string `protobuf:"bytes,7,opt,name=pushTitle" json:"pushTitle,omitempty"`
	PushContent   string `protobuf:"bytes,8,opt,name=pushContent" json:"pushContent,omitempty"`
	PushDescribe  string `protobuf:"bytes,9,opt,name=pushDescribe" json:"pushDescribe,omitempty"`
	PushTime      string `protobuf:"bytes,10,opt,name=pushTime" json:"pushTime,omitempty"`
	PushEndTime   string `protobuf:"bytes,11,opt,name=pushEndTime" json:"pushEndTime,omitempty"`
	PushVideoType string `protobuf:"bytes,12,opt,name=pushVideoType" json:"pushVideoType,omitempty"`
	PushUrlType   string `protobuf:"bytes,13,opt,name=pushUrlType" json:"pushUrlType,omitempty"`
	PushUrl       string `protobuf:"bytes,14,opt,name=pushUrl" json:"pushUrl,omitempty"`
	Device        string `protobuf:"bytes,15,opt,name=device" json:"device,omitempty"`
	Status        string `protobuf:"bytes,16,opt,name=status" json:"status,omitempty"`
	CreatedAt     string `protobuf:"bytes,17,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt     string `protobuf:"bytes,18,opt,name=updatedAt" json:"updatedAt,omitempty"`
	CommonStr     string `protobuf:"bytes,19,opt,name=commonStr" json:"commonStr,omitempty"`
}

func (m *Push) Reset()                    { *m = Push{} }
func (m *Push) String() string            { return proto.CompactTextString(m) }
func (*Push) ProtoMessage()               {}
func (*Push) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *Push) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Push) GetOpUid() string {
	if m != nil {
		return m.OpUid
	}
	return ""
}

func (m *Push) GetPushObj() string {
	if m != nil {
		return m.PushObj
	}
	return ""
}

func (m *Push) GetPushChannel() string {
	if m != nil {
		return m.PushChannel
	}
	return ""
}

func (m *Push) GetPushType() string {
	if m != nil {
		return m.PushType
	}
	return ""
}

func (m *Push) GetPushStatus() string {
	if m != nil {
		return m.PushStatus
	}
	return ""
}

func (m *Push) GetPushTitle() string {
	if m != nil {
		return m.PushTitle
	}
	return ""
}

func (m *Push) GetPushContent() string {
	if m != nil {
		return m.PushContent
	}
	return ""
}

func (m *Push) GetPushDescribe() string {
	if m != nil {
		return m.PushDescribe
	}
	return ""
}

func (m *Push) GetPushTime() string {
	if m != nil {
		return m.PushTime
	}
	return ""
}

func (m *Push) GetPushEndTime() string {
	if m != nil {
		return m.PushEndTime
	}
	return ""
}

func (m *Push) GetPushVideoType() string {
	if m != nil {
		return m.PushVideoType
	}
	return ""
}

func (m *Push) GetPushUrlType() string {
	if m != nil {
		return m.PushUrlType
	}
	return ""
}

func (m *Push) GetPushUrl() string {
	if m != nil {
		return m.PushUrl
	}
	return ""
}

func (m *Push) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *Push) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Push) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Push) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Push) GetCommonStr() string {
	if m != nil {
		return m.CommonStr
	}
	return ""
}

type Rule struct {
	Id            string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	TopicId       string `protobuf:"bytes,2,opt,name=topicId" json:"topicId,omitempty"`
	RuleName      string `protobuf:"bytes,3,opt,name=ruleName" json:"ruleName,omitempty"`
	RuleCondition string `protobuf:"bytes,4,opt,name=ruleCondition" json:"ruleCondition,omitempty"`
	RuleStatus    string `protobuf:"bytes,5,opt,name=ruleStatus" json:"ruleStatus,omitempty"`
	TopicName     string `protobuf:"bytes,6,opt,name=topicName" json:"topicName,omitempty"`
	PostCount     string `protobuf:"bytes,7,opt,name=postCount" json:"postCount,omitempty"`
}

func (m *Rule) Reset()                    { *m = Rule{} }
func (m *Rule) String() string            { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()               {}
func (*Rule) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *Rule) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Rule) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *Rule) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *Rule) GetRuleCondition() string {
	if m != nil {
		return m.RuleCondition
	}
	return ""
}

func (m *Rule) GetRuleStatus() string {
	if m != nil {
		return m.RuleStatus
	}
	return ""
}

func (m *Rule) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *Rule) GetPostCount() string {
	if m != nil {
		return m.PostCount
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryListRequest)(nil), "api.QueryListRequest")
	proto.RegisterType((*CommonResponse)(nil), "api.CommonResponse")
	proto.RegisterType((*NullReq)(nil), "api.NullReq")
	proto.RegisterType((*Comment)(nil), "api.Comment")
	proto.RegisterType((*CommentListResponse)(nil), "api.CommentListResponse")
	proto.RegisterType((*CommentList)(nil), "api.CommentList")
	proto.RegisterType((*CommentListReq)(nil), "api.CommentListReq")
	proto.RegisterType((*VideoListResponse)(nil), "api.VideoListResponse")
	proto.RegisterType((*VideoList)(nil), "api.VideoList")
	proto.RegisterType((*Video)(nil), "api.Video")
	proto.RegisterType((*Banner)(nil), "api.Banner")
	proto.RegisterType((*User)(nil), "api.User")
	proto.RegisterType((*Question)(nil), "api.Question")
	proto.RegisterType((*QuestionOption)(nil), "api.QuestionOption")
	proto.RegisterType((*Topic)(nil), "api.Topic")
	proto.RegisterType((*TopicVideo)(nil), "api.TopicVideo")
	proto.RegisterType((*Push)(nil), "api.Push")
	proto.RegisterType((*Rule)(nil), "api.Rule")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 1837 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xdd, 0x6e, 0xdc, 0xc6,
	0x15, 0xc6, 0x6a, 0xb9, 0x3f, 0x3c, 0xbb, 0x92, 0x25, 0x5a, 0x71, 0x68, 0x29, 0x96, 0x64, 0xc6,
	0x69, 0x75, 0x53, 0x5f, 0xa4, 0x40, 0xd1, 0xf4, 0xce, 0x91, 0x5d, 0x44, 0x80, 0xa1, 0x24, 0x2b,
	0x2b, 0x05, 0x0a, 0x14, 0x04, 0x45, 0x8e, 0xb5, 0x53, 0x73, 0x39, 0x34, 0x87, 0x5c, 0x75, 0xfb,
	0x18, 0xee, 0x73, 0xf4, 0xa6, 0x8f, 0xd0, 0x07, 0xe8, 0x5d, 0x9f, 0xa4, 0x2f, 0x50, 0x9c, 0x1f,
	0xfe, 0x49, 0xae, 0x81, 0xe6, 0x6e, 0xce, 0x77, 0xe6, 0xcc, 0xf0, 0xfc, 0x7d, 0x67, 0x76, 0x61,
	0x1e, 0x9b, 0xd5, 0xca, 0x64, 0xcf, 0xf3, 0xc2, 0x94, 0xc6, 0x1b, 0x46, 0xb9, 0x0e, 0xfe, 0x39,
	0x80, 0xdd, 0x1f, 0x2b, 0x55, 0x6c, 0x5e, 0x6b, 0x5b, 0x2e, 0xd4, 0xfb, 0x4a, 0xd9, 0xd2, 0xfb,
	0x06, 0xc6, 0x6f, 0x75, 0x5a, 0xaa, 0xc2, 0x1f, 0x9c, 0x0c, 0x4f, 0x67, 0x5f, 0x3f, 0x7d, 0x1e,
	0xe5, 0xfa, 0xf9, 0xdd, 0x6d, 0xcf, 0x7f, 0x4f, 0x7b, 0x5e, 0x65, 0x65, 0xb1, 0x59, 0x88, 0x81,
	0xe7, 0x81, 0x63, 0x4d, 0x51, 0xfa, 0x5b, 0x27, 0x83, 0x53, 0x77, 0x41, 0x6b, 0x6f, 0x17, 0x86,
	0x59, 0xb5, 0xf2, 0x87, 0x27, 0x83, 0xd3, 0xd1, 0x02, 0x97, 0xb4, 0x4b, 0xff, 0x55, 0xf9, 0x0e,
	0x41, 0xb4, 0x3e, 0xf8, 0x06, 0x66, 0x9d, 0x03, 0xd1, 0xe8, 0x9d, 0xda, 0xf8, 0x03, 0x3a, 0x07,
	0x97, 0xde, 0x3e, 0x8c, 0xd6, 0x51, 0x5a, 0x29, 0x39, 0x9b, 0x85, 0xdf, 0x6d, 0xfd, 0x76, 0x10,
	0xfc, 0x06, 0x76, 0xce, 0xc8, 0xb3, 0x85, 0xb2, 0xb9, 0xc9, 0xac, 0xc2, 0x0b, 0x62, 0x93, 0x28,
	0x31, 0xa7, 0x35, 0x9e, 0xb8, 0xb2, 0x37, 0x62, 0x8d, 0xcb, 0xc0, 0x85, 0xc9, 0x45, 0x95, 0xa6,
	0x0b, 0xf5, 0x3e, 0xf8, 0xf7, 0x10, 0x26, 0x78, 0x86, 0xca, 0x4a, 0xef, 0x09, 0xc0, 0x3a, 0xb4,
	0xa6, 0x2a, 0x62, 0x75, 0x9e, 0xc8, 0x11, 0xee, 0xfa, 0x52, 0x00, 0xef, 0x11, 0x8c, 0x6d, 0x19,
	0x95, 0x95, 0xa5, 0xa3, 0xb6, 0x17, 0x22, 0x11, 0x4e, 0x7b, 0xc8, 0x53, 0x77, 0x21, 0x12, 0xde,
	0xbb, 0xd6, 0x09, 0xf9, 0xea, 0x2e, 0x70, 0x89, 0x48, 0xac, 0x13, 0x7f, 0xc4, 0x48, 0xcc, 0x48,
	0xa5, 0x13, 0x7f, 0xcc, 0x48, 0xa5, 0x13, 0xef, 0x33, 0x18, 0x57, 0x61, 0x16, 0xad, 0x94, 0x3f,
	0x61, 0x77, 0xab, 0x8b, 0x68, 0xa5, 0xbc, 0xcf, 0x61, 0x52, 0x85, 0xf9, 0xd2, 0x94, 0xc6, 0x9f,
	0xf2, 0x2d, 0xd5, 0x0f, 0x28, 0x79, 0x7b, 0xe0, 0xe4, 0xa1, 0x4e, 0x7c, 0x97, 0x8f, 0xc8, 0xcf,
	0x13, 0xef, 0x10, 0xdc, 0x55, 0x64, 0x4b, 0x55, 0x20, 0x0e, 0x84, 0x4f, 0x19, 0x38, 0x4f, 0x3c,
	0x1f, 0x26, 0xb1, 0xc9, 0x4a, 0x95, 0x95, 0xfe, 0x8c, 0x54, 0xb5, 0x88, 0x66, 0x6f, 0xa3, 0xb5,
	0x29, 0x42, 0x4c, 0xda, 0x9c, 0xcd, 0x08, 0xb8, 0xa8, 0x56, 0xe8, 0xe4, 0xad, 0xd2, 0x37, 0xcb,
	0xd2, 0xdf, 0xe6, 0xeb, 0x59, 0x42, 0xa3, 0x42, 0xe5, 0xe9, 0x86, 0x8c, 0x76, 0xd8, 0x88, 0x00,
	0x34, 0xda, 0x87, 0x11, 0xc6, 0x48, 0xf9, 0x0f, 0xd8, 0x15, 0x12, 0xd0, 0x43, 0x6d, 0xc3, 0xa5,
	0x29, 0xfd, 0x5d, 0x2a, 0x83, 0x91, 0xb6, 0xdf, 0x99, 0x12, 0xe1, 0x38, 0x2c, 0xf5, 0x4a, 0xf9,
	0x7b, 0xbc, 0x3b, 0x7e, 0xa3, 0x57, 0x8a, 0xe3, 0x41, 0xb0, 0x27, 0xf1, 0x20, 0xf8, 0x08, 0x86,
	0xb6, 0xba, 0xf6, 0x1f, 0x52, 0x9d, 0xce, 0xa9, 0x4e, 0x25, 0x8d, 0x0b, 0x54, 0x04, 0x11, 0x3c,
	0x14, 0x99, 0x2b, 0xf7, 0xff, 0xa9, 0x0f, 0xef, 0x19, 0x38, 0x49, 0x54, 0x46, 0x94, 0xcf, 0xd9,
	0xd7, 0xbb, 0xdd, 0xd3, 0xe9, 0x34, 0xd2, 0x06, 0xaf, 0x60, 0xd6, 0x01, 0xbd, 0x13, 0x31, 0x1a,
	0x7c, 0xe4, 0x93, 0x48, 0x83, 0xe1, 0x88, 0x4d, 0x95, 0x71, 0x93, 0x38, 0x0b, 0x16, 0x82, 0x3f,
	0x72, 0x11, 0x37, 0x5f, 0xfa, 0xbe, 0x2e, 0x9c, 0x41, 0xaf, 0x70, 0xb0, 0x4c, 0xb6, 0xda, 0x32,
	0xa9, 0x3b, 0x69, 0xd8, 0x76, 0x52, 0xdd, 0x6f, 0x4e, 0xd3, 0x6f, 0xc1, 0x9f, 0x60, 0xef, 0x27,
	0x9d, 0x28, 0xf3, 0x33, 0x62, 0x10, 0xf4, 0x62, 0xb0, 0x43, 0xee, 0xb4, 0x67, 0x71, 0x04, 0x5e,
	0x80, 0xdb, 0x40, 0xde, 0x51, 0xcf, 0x7f, 0x68, 0x0d, 0x3e, 0xe9, 0xfd, 0x07, 0x17, 0x46, 0xb4,
	0xcb, 0xdb, 0x81, 0xad, 0xc6, 0xe9, 0x2d, 0xf6, 0x79, 0xdd, 0xfa, 0x8c, 0x51, 0x78, 0x02, 0xc0,
	0xad, 0x15, 0xa2, 0x82, 0x9b, 0xcd, 0x65, 0xe4, 0x27, 0x9d, 0x78, 0x47, 0x30, 0xab, 0xdb, 0x37,
	0x6c, 0xfa, 0xae, 0xd3, 0xbf, 0x8f, 0x61, 0x9a, 0x1b, 0x5b, 0x92, 0x31, 0xb7, 0xe0, 0x04, 0x65,
	0x34, 0x3d, 0x86, 0x99, 0x18, 0x96, 0x9b, 0x5c, 0x49, 0x3b, 0xca, 0x65, 0x6f, 0x36, 0xb9, 0xc2,
	0xab, 0x57, 0x2a, 0xd1, 0x51, 0xb7, 0x33, 0x5d, 0x42, 0xa8, 0x3b, 0x9f, 0xc2, 0x3c, 0x2f, 0x22,
	0x6d, 0x55, 0xc8, 0x2e, 0x72, 0x8b, 0xce, 0x18, 0x3b, 0x43, 0x48, 0xba, 0x4b, 0xf4, 0x6e, 0xd3,
	0x5d, 0xac, 0xc4, 0xfb, 0x97, 0x51, 0x51, 0x9b, 0x83, 0xdc, 0x8f, 0x10, 0x6f, 0xf8, 0x12, 0xb6,
	0x63, 0x2e, 0x12, 0xd9, 0xc2, 0xbd, 0x3b, 0x17, 0x90, 0x37, 0xed, 0xc3, 0xa8, 0x34, 0xb9, 0x8e,
	0xa5, 0x79, 0x59, 0x20, 0x54, 0x97, 0xa9, 0x92, 0xc6, 0x65, 0xc1, 0x3b, 0x80, 0x69, 0x52, 0x15,
	0x51, 0xa9, 0x4d, 0x46, 0x6d, 0xbb, 0xbd, 0x68, 0x64, 0x74, 0x36, 0x4f, 0xa3, 0x8d, 0xdc, 0xf4,
	0x80, 0xb4, 0x2e, 0x22, 0x8d, 0x27, 0xb1, 0x59, 0xab, 0x22, 0xac, 0x8a, 0xd4, 0x7f, 0xc6, 0x9e,
	0x10, 0x70, 0x55, 0xa4, 0xa8, 0x5c, 0x63, 0x3a, 0x49, 0xb9, 0xcb, 0x4a, 0x02, 0x50, 0x89, 0x19,
	0xc0, 0x83, 0x51, 0xb7, 0x27, 0x19, 0x48, 0xa3, 0x0d, 0xaa, 0x8e, 0x61, 0xc6, 0x76, 0x74, 0x92,
	0xf4, 0x3a, 0x10, 0x74, 0x86, 0x48, 0x87, 0x65, 0x1f, 0x0a, 0xfb, 0x32, 0xcb, 0xb6, 0xac, 0xbc,
	0x2f, 0xec, 0xcb, 0xac, 0xfc, 0x15, 0xec, 0xf0, 0x81, 0x8d, 0x9b, 0x9f, 0x51, 0x5f, 0x6c, 0x13,
	0xfa, 0xb2, 0xf6, 0xb5, 0xb9, 0xf7, 0x56, 0x27, 0xe5, 0xd2, 0x7f, 0x44, 0x67, 0xf3, 0xbd, 0x7f,
	0x40, 0x04, 0x53, 0xcb, 0x1b, 0x96, 0x4c, 0x7f, 0x9f, 0xd3, 0x0e, 0x36, 0xfa, 0xae, 0xe1, 0x40,
	0x0a, 0x6a, 0x98, 0xaa, 0xcc, 0xf7, 0xd9, 0x67, 0x02, 0x5e, 0x2b, 0xba, 0xa0, 0xce, 0x1c, 0x36,
	0xe7, 0x63, 0xbe, 0x40, 0x20, 0x24, 0xc9, 0x1e, 0xed, 0x1e, 0x70, 0x2a, 0x1a, 0xda, 0x3d, 0x04,
	0x97, 0x0b, 0x03, 0x95, 0x87, 0xac, 0x24, 0x00, 0x95, 0x8f, 0x61, 0xba, 0xd6, 0xea, 0x96, 0x74,
	0x5f, 0x90, 0x6e, 0x82, 0x32, 0xaa, 0x30, 0x85, 0x51, 0x61, 0xa5, 0x9e, 0x9f, 0x90, 0xe7, 0x2e,
	0x21, 0x54, 0xce, 0xc7, 0x30, 0xd3, 0x99, 0x55, 0x45, 0xc9, 0xcc, 0x7a, 0xc4, 0xd1, 0x66, 0x88,
	0xe8, 0xf5, 0x29, 0xcc, 0x97, 0x91, 0x0d, 0x69, 0xde, 0x63, 0xec, 0x8e, 0x4f, 0x06, 0xa7, 0xd3,
	0xc5, 0x6c, 0x19, 0xd9, 0x1f, 0x05, 0xc2, 0x4f, 0xc3, 0x2d, 0x5c, 0x71, 0x27, 0xa4, 0x9f, 0x2e,
	0x23, 0xfb, 0x86, 0x8a, 0x2e, 0x80, 0x31, 0x29, 0xac, 0xff, 0xb4, 0x43, 0x07, 0xa4, 0x5b, 0x88,
	0x06, 0x0f, 0x30, 0x79, 0x28, 0xc9, 0x0b, 0x38, 0x6c, 0x26, 0xbf, 0xe4, 0xf4, 0x1d, 0x82, 0x4b,
	0xcd, 0x4a, 0xdf, 0xff, 0x25, 0x2b, 0x11, 0xa0, 0xcf, 0x6f, 0x47, 0xc5, 0x57, 0x1f, 0x1f, 0x15,
	0xbf, 0xe8, 0x8e, 0x8a, 0x76, 0x74, 0xfd, 0xb2, 0x37, 0xba, 0x7c, 0x98, 0x24, 0xda, 0x46, 0xd7,
	0xa9, 0xf2, 0x4f, 0xb9, 0x18, 0x45, 0x0c, 0x3e, 0x6c, 0xc1, 0xf8, 0xdb, 0x28, 0xcb, 0x54, 0x71,
	0x8f, 0x95, 0x1e, 0xc1, 0x38, 0xd7, 0xf1, 0x55, 0x91, 0x0a, 0x31, 0x89, 0x84, 0xfd, 0x14, 0xa7,
	0x3a, 0x7e, 0x87, 0x9a, 0xa1, 0xf4, 0x84, 0xc8, 0xa8, 0xcb, 0x8d, 0xd5, 0x14, 0x48, 0xa7, 0x71,
	0x85, 0x64, 0xef, 0x04, 0x66, 0x89, 0xb2, 0x71, 0xa1, 0x73, 0x52, 0x33, 0x2f, 0x75, 0xa1, 0x4e,
	0x81, 0x8f, 0x7b, 0x05, 0x7e, 0x00, 0xd3, 0xb7, 0x85, 0x59, 0xa1, 0x8b, 0x42, 0x48, 0x8d, 0x8c,
	0x36, 0xa5, 0x21, 0x8d, 0x3c, 0x16, 0x58, 0xf2, 0xbe, 0x00, 0x37, 0x2e, 0x54, 0x54, 0xaa, 0xe4,
	0x45, 0x4d, 0x42, 0x2d, 0x80, 0xda, 0x2a, 0x4f, 0x44, 0xcb, 0x1c, 0xd4, 0x02, 0xc1, 0xb7, 0xe0,
	0x5c, 0x59, 0x55, 0xd4, 0xb3, 0x68, 0xd0, 0xce, 0xa2, 0x7d, 0x18, 0xf1, 0xcb, 0x44, 0x1e, 0x68,
	0x24, 0xe0, 0x98, 0x21, 0xb2, 0xe4, 0x68, 0xd0, 0x3a, 0xf8, 0x9b, 0x03, 0xd3, 0xa6, 0x80, 0xee,
	0x8f, 0xb9, 0x5f, 0xc1, 0xc4, 0x90, 0xd3, 0xf8, 0xc4, 0xc2, 0xb2, 0x79, 0x58, 0x3f, 0x40, 0xc9,
	0xe2, 0x7b, 0xd2, 0x2d, 0xea, 0x3d, 0x92, 0x9b, 0x61, 0x93, 0x9b, 0xce, 0xd3, 0xc6, 0xe9, 0x3f,
	0x6d, 0x0e, 0x60, 0xca, 0x46, 0xe7, 0x2f, 0x25, 0xc4, 0x8d, 0x8c, 0x3a, 0x2c, 0x32, 0xe4, 0x71,
	0x89, 0x70, 0x23, 0x7b, 0x01, 0xcc, 0xeb, 0x16, 0xc0, 0xc2, 0x93, 0x38, 0xf7, 0x30, 0xca, 0x7c,
	0x54, 0xaa, 0x1b, 0x53, 0x6c, 0x24, 0xda, 0x8d, 0x8c, 0xf6, 0xf5, 0x9a, 0xce, 0x77, 0x85, 0xb5,
	0x3b, 0x98, 0x77, 0x04, 0x10, 0x65, 0xf6, 0x56, 0x15, 0x74, 0x83, 0x50, 0x7f, 0x8b, 0x60, 0x2e,
	0x59, 0x12, 0xce, 0x17, 0x09, 0xbd, 0xe5, 0x95, 0xf5, 0xe7, 0x27, 0x43, 0xf4, 0x56, 0x44, 0xcc,
	0xe3, 0x32, 0x2a, 0x92, 0xd7, 0x6a, 0xad, 0x52, 0x61, 0xfd, 0x16, 0xa0, 0x47, 0x59, 0x6c, 0x0a,
	0x25, 0xaf, 0x35, 0x16, 0x68, 0x3a, 0x53, 0xc1, 0x3c, 0xe8, 0x76, 0x54, 0xf3, 0x80, 0xdb, 0xed,
	0x3e, 0xe0, 0xf6, 0x81, 0x3b, 0xab, 0x7e, 0xa8, 0x71, 0x9b, 0xe1, 0x4b, 0x10, 0xfb, 0x8a, 0xe8,
	0xc8, 0x63, 0xaa, 0x22, 0x40, 0x78, 0xec, 0xb6, 0x30, 0xd9, 0x0d, 0x29, 0x99, 0xc0, 0xa7, 0x04,
	0x5c, 0x54, 0xab, 0xe0, 0xef, 0x03, 0xd8, 0xe9, 0xe7, 0xf8, 0x5e, 0xdb, 0x1d, 0xc3, 0xac, 0x0e,
	0x7a, 0xd8, 0x3c, 0x0a, 0xa0, 0x86, 0xce, 0xa9, 0x06, 0x75, 0x96, 0xa8, 0xbf, 0x48, 0x39, 0xb0,
	0xf0, 0x89, 0x8a, 0x38, 0x04, 0x57, 0xdb, 0x50, 0x02, 0x2b, 0x25, 0xa1, 0xed, 0x0b, 0x0e, 0xed,
	0x93, 0x3a, 0x25, 0xf4, 0xb9, 0x5c, 0x14, 0x2e, 0x23, 0xf8, 0xbd, 0xff, 0xd9, 0x82, 0x11, 0xd3,
	0xdc, 0xdd, 0xcf, 0x7c, 0x0c, 0x53, 0x22, 0xb7, 0xf6, 0x1b, 0x27, 0x24, 0xf3, 0xbb, 0x7b, 0xad,
	0x0a, 0x8b, 0x4d, 0xce, 0x9f, 0x58, 0x8b, 0x4d, 0xa3, 0x38, 0x6d, 0xa3, 0x60, 0x6f, 0x20, 0xad,
	0xca, 0x2f, 0x05, 0xbc, 0xaa, 0xc3, 0x56, 0xe3, 0x1e, 0x5b, 0xe1, 0xd7, 0x66, 0x4a, 0x25, 0x61,
	0x6a, 0x6e, 0x74, 0x56, 0xbf, 0x4d, 0x10, 0x79, 0x8d, 0x40, 0x87, 0xfe, 0xa6, 0x3d, 0xfa, 0xbb,
	0xc3, 0x3c, 0xee, 0x7d, 0xe6, 0xf1, 0xc0, 0x29, 0xaa, 0xb4, 0xae, 0x49, 0x5a, 0xa3, 0x87, 0x95,
	0x95, 0xc0, 0xc8, 0xef, 0x07, 0x94, 0x25, 0xc7, 0x3c, 0x29, 0x3b, 0xbf, 0x1f, 0x08, 0x40, 0x65,
	0x4b, 0xd9, 0xdb, 0x1f, 0xa7, 0xec, 0x9d, 0x6e, 0x2d, 0x79, 0xe0, 0x2c, 0x75, 0x52, 0x17, 0x23,
	0xad, 0x83, 0x77, 0x00, 0x14, 0x74, 0x7e, 0x2d, 0x76, 0x23, 0x3d, 0xe8, 0x47, 0xfa, 0xfe, 0xc3,
	0xb1, 0x0d, 0xc1, 0xf0, 0x7f, 0x4d, 0x00, 0xa7, 0x3f, 0x01, 0xfe, 0xe1, 0x80, 0xf3, 0x43, 0x65,
	0x97, 0xf7, 0x32, 0xbc, 0x0f, 0x23, 0x93, 0x5f, 0x35, 0xc7, 0xb3, 0x80, 0x07, 0xe5, 0x95, 0x5d,
	0x7e, 0x7f, 0xfd, 0xe7, 0x3a, 0xb9, 0x22, 0x62, 0x94, 0x71, 0x79, 0xb6, 0xc4, 0x71, 0x92, 0xca,
	0x35, 0x5d, 0x88, 0xa6, 0x43, 0x65, 0x97, 0xd4, 0xfd, 0x52, 0x88, 0xb5, 0x8c, 0xdc, 0x80, 0xeb,
	0xcb, 0x2e, 0xff, 0x77, 0x10, 0xec, 0x74, 0xda, 0x4b, 0xef, 0x3b, 0xc9, 0x7c, 0x03, 0x34, 0x77,
	0x4b, 0x07, 0x4c, 0x3b, 0x77, 0x4b, 0x17, 0x04, 0x30, 0x47, 0xf1, 0x25, 0x25, 0xfd, 0xba, 0xe1,
	0xa7, 0x2e, 0xd6, 0x7c, 0x1f, 0x26, 0x09, 0x3a, 0xdf, 0x87, 0x79, 0x92, 0x1b, 0x5e, 0x65, 0x09,
	0xa9, 0x67, 0xed, 0x0d, 0x02, 0x79, 0xcf, 0x60, 0x1b, 0x45, 0x4a, 0x1a, 0xb9, 0xc8, 0x85, 0xd1,
	0x07, 0xeb, 0x73, 0xae, 0x8a, 0x94, 0xf6, 0x6c, 0xb7, 0xe7, 0x08, 0x54, 0x47, 0x18, 0xc7, 0xeb,
	0x4e, 0x1b, 0x61, 0x9c, 0xae, 0x8f, 0x60, 0x9c, 0xa8, 0xb5, 0x8e, 0xeb, 0x6a, 0x11, 0xa9, 0x33,
	0x37, 0x77, 0x7b, 0x73, 0xb3, 0x37, 0x03, 0xf7, 0x3e, 0x39, 0x03, 0xbd, 0x3b, 0x33, 0x90, 0x6c,
	0xe9, 0x0f, 0x87, 0xcb, 0xb2, 0x20, 0x1a, 0x43, 0xdb, 0x1a, 0x08, 0xfe, 0x35, 0x00, 0x67, 0x81,
	0x4d, 0x72, 0xb7, 0x68, 0x7c, 0xa8, 0x8b, 0xf3, 0x2e, 0x2b, 0x1c, 0xc0, 0x14, 0xdb, 0xea, 0xa2,
	0x1d, 0x94, 0x8d, 0x8c, 0xa1, 0xc3, 0xf5, 0x99, 0xc9, 0x92, 0xee, 0xdb, 0xa1, 0x0f, 0x62, 0x89,
	0x20, 0x20, 0x25, 0xc2, 0x05, 0xd4, 0x41, 0xf0, 0x93, 0xe9, 0xb2, 0xce, 0x7c, 0x6b, 0x01, 0x2a,
	0x20, 0x63, 0xf9, 0xf7, 0x43, 0x53, 0x40, 0x35, 0x70, 0x3d, 0xa6, 0x3f, 0x8c, 0x7e, 0xfd, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xd5, 0xd0, 0xdc, 0x40, 0x12, 0x00, 0x00,
}
