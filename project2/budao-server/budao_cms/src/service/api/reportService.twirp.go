// Code generated by protoc-gen-twirp v5.4.1, DO NOT EDIT.
// source: reportService.proto

package api

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"
import cityhash "github.com/zhenjl/cityhash"
import glog "github.com/sumaig/glog"
import strconv "strconv"

// =======================
// ReportService Interface
// =======================

type ReportService interface {
	// 运营当日操作数
	ReportOpToday(context.Context, *NullReq) (*ReportOpTodayResponse, error)

	// pushVV数
	ReportPushVV(context.Context, *ReportPushVVRequest) (*ReportPushVVResponse, error)

	// pushVV列表
	ReportPushVVList(context.Context, *ReportPushVVListRequest) (*ReportPushVVListResponse, error)

	// 内容数据  发布数据
	ReportContentPostData(context.Context, *QueryListRequest) (*ReportContentPostDataResponse, error)

	// 内容数据  话题数据
	ReportContentTopicData(context.Context, *QueryListRequest) (*ReportContentTopicDataResponse, error)

	// 统计每日用户数
	ReportUserStatistics(context.Context, *QueryListRequest) (*ReportUserStatisticsResponse, error)

	// 每日视频数据统计
	ReportVideoStatistics(context.Context, *QueryListRequest) (*ReportVideoStatisticsResponse, error)

	// app统计每日用户相关数-导出execl
	ReportUserStatisticsExecl(context.Context, *QueryListRequest) (*ReportUserExeclResponse, error)

	// app统计每日用户相关数-导出execl
	ReportVideoStatisticsExecl(context.Context, *QueryListRequest) (*ReportVideoExeclResponse, error)
}

// =============================
// ReportService Protobuf Client
// =============================

type reportServiceProtobufClient struct {
	client HTTPClient
	urls   [9]string
}

// NewReportServiceProtobufClient creates a Protobuf client that implements the ReportService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewReportServiceProtobufClient(addr string, client HTTPClient) ReportService {
	prefix := urlBase(addr) + ReportServicePathPrefix
	urls := [9]string{
		prefix + "ReportOpToday",
		prefix + "ReportPushVV",
		prefix + "ReportPushVVList",
		prefix + "ReportContentPostData",
		prefix + "ReportContentTopicData",
		prefix + "ReportUserStatistics",
		prefix + "ReportVideoStatistics",
		prefix + "ReportUserStatisticsExecl",
		prefix + "ReportVideoStatisticsExecl",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &reportServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &reportServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *reportServiceProtobufClient) ReportOpToday(ctx context.Context, in *NullReq) (*ReportOpTodayResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportOpToday")
	out := new(ReportOpTodayResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceProtobufClient) ReportPushVV(ctx context.Context, in *ReportPushVVRequest) (*ReportPushVVResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportPushVV")
	out := new(ReportPushVVResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceProtobufClient) ReportPushVVList(ctx context.Context, in *ReportPushVVListRequest) (*ReportPushVVListResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportPushVVList")
	out := new(ReportPushVVListResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceProtobufClient) ReportContentPostData(ctx context.Context, in *QueryListRequest) (*ReportContentPostDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportContentPostData")
	out := new(ReportContentPostDataResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceProtobufClient) ReportContentTopicData(ctx context.Context, in *QueryListRequest) (*ReportContentTopicDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportContentTopicData")
	out := new(ReportContentTopicDataResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceProtobufClient) ReportUserStatistics(ctx context.Context, in *QueryListRequest) (*ReportUserStatisticsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportUserStatistics")
	out := new(ReportUserStatisticsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceProtobufClient) ReportVideoStatistics(ctx context.Context, in *QueryListRequest) (*ReportVideoStatisticsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportVideoStatistics")
	out := new(ReportVideoStatisticsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceProtobufClient) ReportUserStatisticsExecl(ctx context.Context, in *QueryListRequest) (*ReportUserExeclResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportUserStatisticsExecl")
	out := new(ReportUserExeclResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceProtobufClient) ReportVideoStatisticsExecl(ctx context.Context, in *QueryListRequest) (*ReportVideoExeclResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportVideoStatisticsExecl")
	out := new(ReportVideoExeclResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =========================
// ReportService JSON Client
// =========================

type reportServiceJSONClient struct {
	client HTTPClient
	urls   [9]string
}

// NewReportServiceJSONClient creates a JSON client that implements the ReportService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewReportServiceJSONClient(addr string, client HTTPClient) ReportService {
	prefix := urlBase(addr) + ReportServicePathPrefix
	urls := [9]string{
		prefix + "ReportOpToday",
		prefix + "ReportPushVV",
		prefix + "ReportPushVVList",
		prefix + "ReportContentPostData",
		prefix + "ReportContentTopicData",
		prefix + "ReportUserStatistics",
		prefix + "ReportVideoStatistics",
		prefix + "ReportUserStatisticsExecl",
		prefix + "ReportVideoStatisticsExecl",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &reportServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &reportServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *reportServiceJSONClient) ReportOpToday(ctx context.Context, in *NullReq) (*ReportOpTodayResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportOpToday")
	out := new(ReportOpTodayResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceJSONClient) ReportPushVV(ctx context.Context, in *ReportPushVVRequest) (*ReportPushVVResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportPushVV")
	out := new(ReportPushVVResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceJSONClient) ReportPushVVList(ctx context.Context, in *ReportPushVVListRequest) (*ReportPushVVListResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportPushVVList")
	out := new(ReportPushVVListResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceJSONClient) ReportContentPostData(ctx context.Context, in *QueryListRequest) (*ReportContentPostDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportContentPostData")
	out := new(ReportContentPostDataResponse)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceJSONClient) ReportContentTopicData(ctx context.Context, in *QueryListRequest) (*ReportContentTopicDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportContentTopicData")
	out := new(ReportContentTopicDataResponse)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceJSONClient) ReportUserStatistics(ctx context.Context, in *QueryListRequest) (*ReportUserStatisticsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportUserStatistics")
	out := new(ReportUserStatisticsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceJSONClient) ReportVideoStatistics(ctx context.Context, in *QueryListRequest) (*ReportVideoStatisticsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportVideoStatistics")
	out := new(ReportVideoStatisticsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceJSONClient) ReportUserStatisticsExecl(ctx context.Context, in *QueryListRequest) (*ReportUserExeclResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportUserStatisticsExecl")
	out := new(ReportUserExeclResponse)
	err := doJSONRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceJSONClient) ReportVideoStatisticsExecl(ctx context.Context, in *QueryListRequest) (*ReportVideoExeclResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithMethodName(ctx, "ReportVideoStatisticsExecl")
	out := new(ReportVideoExeclResponse)
	err := doJSONRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ============================
// ReportService Server Handler
// ============================

type reportServiceServer struct {
	ReportService
	hooks *twirp.ServerHooks
}

func NewReportServiceServer(svc ReportService, hooks *twirp.ServerHooks) TwirpServer {
	return &reportServiceServer{
		ReportService: svc,
		hooks:         hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *reportServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// ReportServicePathPrefix is used for all URL paths on a twirp ReportService server.
// Requests are always: POST ReportServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const ReportServicePathPrefix = "/api.ReportService/"

func (s *reportServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "ReportService")
	ctx = ctxsetters.WithRequestIp(ctx, req.Header.Get("Remote_addr"))
	ctx = ctxsetters.WithSIG(ctx, req.Header.Get("sig"))
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		if req.Method == "OPTIONS" {
			resp.Header().Add("Access-Control-Allow-Origin", "*")
			resp.Header().Add("Access-Control-Allow-Credentials", "true")
			resp.Header().Add("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, X-Automatic-Token,X-Remote-Addr")
			return
		}
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/api.ReportService/ReportOpToday":
		s.serveReportOpToday(ctx, resp, req)
		return
	case "/api.ReportService/ReportPushVV":
		s.serveReportPushVV(ctx, resp, req)
		return
	case "/api.ReportService/ReportPushVVList":
		s.serveReportPushVVList(ctx, resp, req)
		return
	case "/api.ReportService/ReportContentPostData":
		s.serveReportContentPostData(ctx, resp, req)
		return
	case "/api.ReportService/ReportContentTopicData":
		s.serveReportContentTopicData(ctx, resp, req)
		return
	case "/api.ReportService/ReportUserStatistics":
		s.serveReportUserStatistics(ctx, resp, req)
		return
	case "/api.ReportService/ReportVideoStatistics":
		s.serveReportVideoStatistics(ctx, resp, req)
		return
	case "/api.ReportService/ReportUserStatisticsExecl":
		s.serveReportUserStatisticsExecl(ctx, resp, req)
		return
	case "/api.ReportService/ReportVideoStatisticsExecl":
		s.serveReportVideoStatisticsExecl(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *reportServiceServer) serveReportOpToday(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReportOpTodayJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReportOpTodayProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *reportServiceServer) serveReportOpTodayJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportOpToday")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(NullReq)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *ReportOpTodayResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportOpToday(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportOpTodayResponse and nil error while calling ReportOpToday. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportOpTodayProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportOpToday")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(NullReq)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *ReportOpTodayResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportOpToday(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportOpTodayResponse and nil error while calling ReportOpToday. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportPushVV(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReportPushVVJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReportPushVVProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *reportServiceServer) serveReportPushVVJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportPushVV")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ReportPushVVRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *ReportPushVVResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportPushVV(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportPushVVResponse and nil error while calling ReportPushVV. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportPushVVProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportPushVV")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(ReportPushVVRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *ReportPushVVResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportPushVV(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportPushVVResponse and nil error while calling ReportPushVV. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportPushVVList(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReportPushVVListJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReportPushVVListProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *reportServiceServer) serveReportPushVVListJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportPushVVList")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ReportPushVVListRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *ReportPushVVListResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportPushVVList(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportPushVVListResponse and nil error while calling ReportPushVVList. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportPushVVListProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportPushVVList")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(ReportPushVVListRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *ReportPushVVListResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportPushVVList(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportPushVVListResponse and nil error while calling ReportPushVVList. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportContentPostData(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReportContentPostDataJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReportContentPostDataProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *reportServiceServer) serveReportContentPostDataJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportContentPostData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(QueryListRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *ReportContentPostDataResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportContentPostData(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportContentPostDataResponse and nil error while calling ReportContentPostData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportContentPostDataProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportContentPostData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(QueryListRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *ReportContentPostDataResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportContentPostData(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportContentPostDataResponse and nil error while calling ReportContentPostData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportContentTopicData(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReportContentTopicDataJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReportContentTopicDataProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *reportServiceServer) serveReportContentTopicDataJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportContentTopicData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(QueryListRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *ReportContentTopicDataResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportContentTopicData(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportContentTopicDataResponse and nil error while calling ReportContentTopicData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportContentTopicDataProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportContentTopicData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(QueryListRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *ReportContentTopicDataResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportContentTopicData(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportContentTopicDataResponse and nil error while calling ReportContentTopicData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportUserStatistics(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReportUserStatisticsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReportUserStatisticsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *reportServiceServer) serveReportUserStatisticsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportUserStatistics")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(QueryListRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *ReportUserStatisticsResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportUserStatistics(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportUserStatisticsResponse and nil error while calling ReportUserStatistics. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportUserStatisticsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportUserStatistics")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(QueryListRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *ReportUserStatisticsResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportUserStatistics(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportUserStatisticsResponse and nil error while calling ReportUserStatistics. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportVideoStatistics(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReportVideoStatisticsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReportVideoStatisticsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *reportServiceServer) serveReportVideoStatisticsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportVideoStatistics")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(QueryListRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *ReportVideoStatisticsResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportVideoStatistics(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportVideoStatisticsResponse and nil error while calling ReportVideoStatistics. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportVideoStatisticsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportVideoStatistics")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(QueryListRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *ReportVideoStatisticsResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportVideoStatistics(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportVideoStatisticsResponse and nil error while calling ReportVideoStatistics. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportUserStatisticsExecl(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReportUserStatisticsExeclJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReportUserStatisticsExeclProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *reportServiceServer) serveReportUserStatisticsExeclJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportUserStatisticsExecl")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(QueryListRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *ReportUserExeclResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportUserStatisticsExecl(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportUserExeclResponse and nil error while calling ReportUserStatisticsExecl. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportUserStatisticsExeclProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportUserStatisticsExecl")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(QueryListRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *ReportUserExeclResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportUserStatisticsExecl(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportUserExeclResponse and nil error while calling ReportUserStatisticsExecl. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportVideoStatisticsExecl(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReportVideoStatisticsExeclJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReportVideoStatisticsExeclProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *reportServiceServer) serveReportVideoStatisticsExeclJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	resp.Header().Add("Access-Control-Allow-Origin", "*")
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportVideoStatisticsExecl")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(QueryListRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *ReportVideoExeclResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportVideoStatisticsExecl(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportVideoExeclResponse and nil error while calling ReportVideoStatisticsExecl. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: false}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) serveReportVideoStatisticsExeclProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReportVideoStatisticsExecl")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(QueryListRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *ReportVideoExeclResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.ReportVideoStatisticsExecl(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReportVideoExeclResponse and nil error while calling ReportVideoStatisticsExecl. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *reportServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor6, 0
}

func (s *reportServiceServer) ProtocGenTwirpVersion() string {
	return "v5.4.1"
}

var twirpFileDescriptor6 = []byte{
	// 995 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0x5d, 0x73, 0xdb, 0x44,
	0x14, 0x1d, 0xd9, 0x4e, 0x5a, 0xdf, 0x38, 0x69, 0xba, 0x49, 0x8a, 0xe3, 0x49, 0x42, 0x50, 0xf9,
	0x08, 0x33, 0x25, 0x40, 0xfa, 0xc4, 0x0c, 0x4f, 0x75, 0xe9, 0x03, 0x30, 0x71, 0xa2, 0x3a, 0x7e,
	0xe0, 0x85, 0x59, 0xa4, 0xa5, 0xd9, 0x41, 0xf6, 0x2a, 0xab, 0x95, 0x83, 0xe1, 0x95, 0x37, 0x66,
	0xf8, 0x61, 0xfc, 0x00, 0x7e, 0x0f, 0xb3, 0x1f, 0x92, 0x56, 0xf2, 0xca, 0xd3, 0xf8, 0x4d, 0xf7,
	0xdc, 0xeb, 0xa3, 0x73, 0xcf, 0xde, 0xdd, 0x95, 0x61, 0x8f, 0x93, 0x84, 0x71, 0xf1, 0x96, 0xf0,
	0x39, 0x0d, 0xc9, 0x79, 0xc2, 0x99, 0x60, 0xa8, 0x8d, 0x13, 0x3a, 0xe8, 0x85, 0x6c, 0x3a, 0x65,
	0x33, 0x0d, 0xf9, 0x0c, 0xfa, 0x81, 0xaa, 0x9c, 0xd0, 0x88, 0xb0, 0xef, 0x7e, 0x27, 0x61, 0x1c,
	0x90, 0x34, 0x61, 0xb3, 0x94, 0x20, 0x04, 0x9d, 0x90, 0x45, 0xa4, 0xef, 0x9d, 0x7a, 0x67, 0xdd,
	0x40, 0x3d, 0xa3, 0x5d, 0x68, 0x4f, 0xd3, 0x77, 0xfd, 0x96, 0x82, 0xe4, 0x23, 0xfa, 0x02, 0x3a,
	0x11, 0x16, 0xb8, 0xdf, 0x3e, 0xf5, 0xce, 0xb6, 0x2e, 0x0e, 0xcf, 0x71, 0x42, 0xcf, 0xeb, 0x94,
	0xaf, 0x70, 0xf8, 0x5b, 0xa0, 0xca, 0xfc, 0xaf, 0x60, 0xdf, 0x95, 0x45, 0x7d, 0x78, 0xf4, 0x2b,
	0x8d, 0xc9, 0x0d, 0x8f, 0xcd, 0xfb, 0xf2, 0xd0, 0x9f, 0xc2, 0x07, 0xfa, 0x17, 0x37, 0x29, 0xe1,
	0xeb, 0x28, 0x7c, 0x51, 0x51, 0xd8, 0xb7, 0x14, 0x16, 0x8c, 0x96, 0xc0, 0x2f, 0x61, 0xcf, 0x91,
	0x5c, 0xa1, 0x6f, 0x01, 0xc7, 0x56, 0x47, 0x6f, 0x05, 0x16, 0x34, 0x15, 0x34, 0x4c, 0x1f, 0xa8,
	0xf2, 0xa2, 0xa2, 0xf2, 0xa4, 0xee, 0x63, 0xc9, 0x6b, 0x69, 0xfd, 0x09, 0x0e, 0x1b, 0x4b, 0xd0,
	0x67, 0x86, 0xd0, 0x3b, 0x6d, 0x9f, 0x6d, 0x5d, 0xec, 0x29, 0x42, 0x5d, 0xf2, 0x8a, 0xfe, 0xf1,
	0x1a, 0xd3, 0x78, 0xa1, 0x59, 0xd0, 0x3e, 0x6c, 0x84, 0x2c, 0x9b, 0x09, 0xa5, 0xa6, 0x13, 0xe8,
	0xc0, 0xff, 0xb7, 0x05, 0x3b, 0xd5, 0x72, 0xb4, 0x03, 0x2d, 0x1a, 0x99, 0x36, 0x5a, 0x34, 0x42,
	0x9f, 0xc2, 0xce, 0x5c, 0xaf, 0x62, 0xc2, 0x52, 0x72, 0x99, 0x4d, 0x4d, 0x3f, 0x35, 0x14, 0x7d,
	0x0c, 0xdb, 0x0a, 0x19, 0xc6, 0x34, 0x14, 0xb2, 0xac, 0xad, 0xca, 0xaa, 0x20, 0xf2, 0xa1, 0xa7,
	0x80, 0x09, 0x25, 0xf7, 0xb2, 0xa8, 0xa3, 0x8a, 0x2a, 0x58, 0xc1, 0xf4, 0x06, 0xcf, 0x19, 0x97,
	0x45, 0x1b, 0x16, 0x53, 0x0e, 0xa2, 0x33, 0x78, 0x22, 0x87, 0x9c, 0xcc, 0x44, 0x51, 0xb7, 0xa9,
	0xea, 0xea, 0x30, 0x3a, 0x01, 0x30, 0x90, 0x2c, 0x7a, 0xa4, 0x8a, 0x2c, 0x44, 0x76, 0x28, 0x58,
	0x42, 0xc3, 0x37, 0x2c, 0x8e, 0x99, 0x52, 0xf5, 0x58, 0x77, 0x58, 0x45, 0x15, 0x0f, 0x27, 0x58,
	0x90, 0x31, 0x9d, 0x92, 0x7e, 0xd7, 0xf0, 0x14, 0x88, 0x7f, 0x0f, 0x47, 0xe5, 0x50, 0xad, 0x3d,
	0x22, 0x5f, 0x57, 0x46, 0xe4, 0xb8, 0x36, 0xc8, 0xce, 0x09, 0xb9, 0xc9, 0xf7, 0xf7, 0x72, 0x05,
	0x7a, 0x5e, 0x19, 0x90, 0x27, 0xd6, 0x80, 0xc8, 0xe2, 0x95, 0xc3, 0xf1, 0x8f, 0x07, 0x50, 0x96,
	0x2e, 0x0d, 0xc6, 0x00, 0x1e, 0x0b, 0x26, 0x70, 0x5c, 0x8e, 0x44, 0x11, 0xa3, 0x23, 0xe8, 0xe2,
	0x50, 0xd0, 0x39, 0x29, 0x07, 0xa1, 0x04, 0xd0, 0x33, 0xd8, 0x9c, 0xd9, 0xcb, 0x6f, 0xa2, 0x9a,
	0xc1, 0x1b, 0x4b, 0x06, 0xff, 0x09, 0x27, 0xba, 0xcf, 0x21, 0x9b, 0x09, 0x32, 0x13, 0x63, 0xb9,
	0x3e, 0xaf, 0xb1, 0xc0, 0x0f, 0xb4, 0xf8, 0x65, 0xc5, 0xe2, 0x0f, 0x2d, 0x8b, 0xeb, 0xc4, 0x96,
	0xc9, 0x7f, 0x7b, 0x30, 0x68, 0x2e, 0x72, 0xfa, 0xac, 0x2a, 0x46, 0xe2, 0x76, 0xb5, 0xcf, 0xf2,
	0xd4, 0x11, 0xa3, 0xa1, 0xc2, 0xdb, 0x0a, 0xcf, 0x43, 0x95, 0x19, 0xea, 0x4c, 0xc7, 0x64, 0x74,
	0xe8, 0xff, 0xe5, 0x01, 0x94, 0xf4, 0xd2, 0x6f, 0x35, 0xac, 0x97, 0x78, 0x9a, 0x37, 0x5f, 0x02,
	0xd2, 0x57, 0xbd, 0x0b, 0x8b, 0x77, 0x77, 0x03, 0x0b, 0x91, 0x2b, 0x79, 0x97, 0x91, 0x52, 0x41,
	0x37, 0x28, 0x62, 0xc9, 0x9c, 0xa5, 0x84, 0x97, 0x22, 0xba, 0x41, 0x09, 0x94, 0xc7, 0xa2, 0xf1,
	0xe4, 0x8a, 0xa5, 0x62, 0x8d, 0x05, 0x69, 0x3e, 0x16, 0x6b, 0xbc, 0xd6, 0x7a, 0xdc, 0xe5, 0xc7,
	0xa2, 0xa3, 0x44, 0x6e, 0xe9, 0x84, 0xa5, 0xfa, 0xc4, 0xd4, 0xd2, 0x3d, 0xe5, 0x5f, 0x0d, 0x45,
	0x2f, 0xe0, 0x69, 0x81, 0x5c, 0xe7, 0x16, 0xe8, 0xc5, 0x59, 0x4e, 0xf8, 0x3f, 0xe4, 0x97, 0xd4,
	0x55, 0x96, 0xde, 0x4e, 0x26, 0x3f, 0xd2, 0x54, 0x04, 0xe4, 0x2e, 0x23, 0xa9, 0x90, 0x7d, 0x46,
	0x58, 0x14, 0x7d, 0xca, 0x67, 0x69, 0x5d, 0x72, 0xcb, 0x04, 0x1b, 0x2f, 0x12, 0x62, 0xba, 0x2d,
	0x81, 0xf2, 0x52, 0xb6, 0xc9, 0xd6, 0xbc, 0x94, 0xdb, 0xb5, 0x4b, 0xb9, 0xa4, 0xb4, 0x0c, 0x4b,
	0xf2, 0x4b, 0xb9, 0x9a, 0x95, 0xc4, 0xf3, 0x62, 0x63, 0xcb, 0x47, 0x39, 0xa6, 0x69, 0x36, 0x9d,
	0x4c, 0xcc, 0xcb, 0x74, 0x20, 0x51, 0x41, 0x45, 0x4c, 0xcc, 0x88, 0xe8, 0x40, 0xce, 0x4e, 0x94,
	0x71, 0x2c, 0x28, 0x9b, 0x99, 0xf1, 0x28, 0x62, 0xff, 0xe7, 0xfc, 0x96, 0xd5, 0x6f, 0xcc, 0xbd,
	0x92, 0xf4, 0x6a, 0x87, 0x7b, 0x86, 0x5e, 0x06, 0x12, 0xd5, 0xfb, 0xde, 0xbc, 0x54, 0x05, 0x55,
	0x0f, 0xdb, 0x75, 0x0f, 0xdf, 0x55, 0x5b, 0x7a, 0xa0, 0x7f, 0x9f, 0x57, 0xfc, 0x3b, 0x58, 0xf2,
	0xcf, 0xf2, 0xee, 0x5b, 0xd8, 0xad, 0x67, 0x9c, 0x4b, 0xee, 0x74, 0xce, 0x8f, 0xe0, 0x40, 0xff,
	0x7a, 0x94, 0x8c, 0x59, 0x84, 0x17, 0x0f, 0xd4, 0xf9, 0x49, 0x65, 0x77, 0x3c, 0xb5, 0x74, 0x8e,
	0x12, 0x4b, 0xe3, 0xf7, 0xd0, 0xb3, 0x51, 0x79, 0x78, 0xe0, 0x38, 0x96, 0x82, 0x15, 0xff, 0x76,
	0x90, 0x87, 0xe8, 0x14, 0xb6, 0x6e, 0x71, 0x7a, 0x2d, 0x17, 0x43, 0x2e, 0x5b, 0x4b, 0x65, 0x6d,
	0xe8, 0xe2, 0xbf, 0x0d, 0xd8, 0x0e, 0xec, 0x8f, 0x4b, 0xf4, 0x0d, 0x6c, 0x73, 0xbb, 0x07, 0xd4,
	0x53, 0x3a, 0x2e, 0xb3, 0x38, 0x0e, 0xc8, 0xdd, 0x60, 0x50, 0x51, 0x55, 0xed, 0x72, 0x08, 0x3d,
	0x6e, 0x99, 0x87, 0xfa, 0x4b, 0x4e, 0x9b, 0xc9, 0x18, 0x1c, 0x3a, 0x32, 0x86, 0x64, 0x04, 0xbb,
	0xbc, 0x36, 0xbd, 0xe8, 0xc8, 0x39, 0xf2, 0x39, 0xd9, 0x71, 0x43, 0xd6, 0x10, 0x06, 0x70, 0xc0,
	0x5d, 0xe7, 0x07, 0xd2, 0x83, 0x70, 0x9d, 0x11, 0xbe, 0xb0, 0xe9, 0xfc, 0xe6, 0x53, 0xa9, 0xe0,
	0x1c, 0xc3, 0x33, 0xee, 0xbc, 0x22, 0x9a, 0x48, 0x9f, 0xaf, 0xb8, 0x7b, 0x0a, 0xd6, 0x2b, 0xd8,
	0xe7, 0x8e, 0xeb, 0xbd, 0x89, 0xf3, 0xa3, 0xc6, 0x4f, 0x86, 0xe5, 0xde, 0x6b, 0x9f, 0x94, 0xef,
	0xd3, 0x7b, 0xd3, 0x07, 0xf0, 0x15, 0x1c, 0xba, 0x54, 0xaa, 0x8f, 0xeb, 0x26, 0xde, 0x23, 0xd7,
	0x67, 0xba, 0xa5, 0x72, 0xe0, 0x54, 0xb9, 0x92, 0xf2, 0xd8, 0xf9, 0xdf, 0x24, 0xe7, 0xfc, 0x65,
	0x53, 0xfd, 0x23, 0x7a, 0xf9, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0x9c, 0x88, 0x42, 0x3b,
	0x0d, 0x00, 0x00,
}
