// Code generated by protoc-gen-twirp v5.4.1, DO NOT EDIT.
// source: spiderinput.proto

package budao

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"
import cityhash "github.com/zhenjl/cityhash"
import glog "github.com/sumaig/glog"
import strconv "strconv"

// ============================
// SpiderInputService Interface
// ============================

type SpiderInputService interface {
	InputVideoData(context.Context, *InputVideoRequest) (*InputVideoResponse, error)

	InputCommentData(context.Context, *InputCommentRequest) (*InputCommentResponse, error)

	InputAuditOfflineVideoData(context.Context, *InputAuditVideoRequest) (*InputAuditVideoResponse, error)
}

// ==================================
// SpiderInputService Protobuf Client
// ==================================

type spiderInputServiceProtobufClient struct {
	client HTTPClient
	urls   [3]string
}

// NewSpiderInputServiceProtobufClient creates a Protobuf client that implements the SpiderInputService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewSpiderInputServiceProtobufClient(addr string, client HTTPClient) SpiderInputService {
	prefix := urlBase(addr) + SpiderInputServicePathPrefix
	urls := [3]string{
		prefix + "InputVideoData",
		prefix + "InputCommentData",
		prefix + "InputAuditOfflineVideoData",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &spiderInputServiceProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &spiderInputServiceProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *spiderInputServiceProtobufClient) InputVideoData(ctx context.Context, in *InputVideoRequest) (*InputVideoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "SpiderInputService")
	ctx = ctxsetters.WithMethodName(ctx, "InputVideoData")
	out := new(InputVideoResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderInputServiceProtobufClient) InputCommentData(ctx context.Context, in *InputCommentRequest) (*InputCommentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "SpiderInputService")
	ctx = ctxsetters.WithMethodName(ctx, "InputCommentData")
	out := new(InputCommentResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderInputServiceProtobufClient) InputAuditOfflineVideoData(ctx context.Context, in *InputAuditVideoRequest) (*InputAuditVideoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "SpiderInputService")
	ctx = ctxsetters.WithMethodName(ctx, "InputAuditOfflineVideoData")
	out := new(InputAuditVideoResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==============================
// SpiderInputService JSON Client
// ==============================

type spiderInputServiceJSONClient struct {
	client HTTPClient
	urls   [3]string
}

// NewSpiderInputServiceJSONClient creates a JSON client that implements the SpiderInputService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewSpiderInputServiceJSONClient(addr string, client HTTPClient) SpiderInputService {
	prefix := urlBase(addr) + SpiderInputServicePathPrefix
	urls := [3]string{
		prefix + "InputVideoData",
		prefix + "InputCommentData",
		prefix + "InputAuditOfflineVideoData",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &spiderInputServiceJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &spiderInputServiceJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *spiderInputServiceJSONClient) InputVideoData(ctx context.Context, in *InputVideoRequest) (*InputVideoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "SpiderInputService")
	ctx = ctxsetters.WithMethodName(ctx, "InputVideoData")
	out := new(InputVideoResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderInputServiceJSONClient) InputCommentData(ctx context.Context, in *InputCommentRequest) (*InputCommentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "SpiderInputService")
	ctx = ctxsetters.WithMethodName(ctx, "InputCommentData")
	out := new(InputCommentResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderInputServiceJSONClient) InputAuditOfflineVideoData(ctx context.Context, in *InputAuditVideoRequest) (*InputAuditVideoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "SpiderInputService")
	ctx = ctxsetters.WithMethodName(ctx, "InputAuditOfflineVideoData")
	out := new(InputAuditVideoResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =================================
// SpiderInputService Server Handler
// =================================

type spiderInputServiceServer struct {
	SpiderInputService
	hooks *twirp.ServerHooks
}

func NewSpiderInputServiceServer(svc SpiderInputService, hooks *twirp.ServerHooks) TwirpServer {
	return &spiderInputServiceServer{
		SpiderInputService: svc,
		hooks:              hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *spiderInputServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// SpiderInputServicePathPrefix is used for all URL paths on a twirp SpiderInputService server.
// Requests are always: POST SpiderInputServicePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const SpiderInputServicePathPrefix = "/budao.SpiderInputService/"

func (s *spiderInputServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "budao")
	ctx = ctxsetters.WithServiceName(ctx, "SpiderInputService")
	ctx = ctxsetters.WithRequestIp(ctx, req.Header.Get("Remote_addr"))
	ctx = ctxsetters.WithSIG(ctx, req.Header.Get("sig"))
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/budao.SpiderInputService/InputVideoData":
		s.serveInputVideoData(ctx, resp, req)
		return
	case "/budao.SpiderInputService/InputCommentData":
		s.serveInputCommentData(ctx, resp, req)
		return
	case "/budao.SpiderInputService/InputAuditOfflineVideoData":
		s.serveInputAuditOfflineVideoData(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *spiderInputServiceServer) serveInputVideoData(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveInputVideoDataJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveInputVideoDataProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *spiderInputServiceServer) serveInputVideoDataJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "InputVideoData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(InputVideoRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *InputVideoResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.InputVideoData(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *InputVideoResponse and nil error while calling InputVideoData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *spiderInputServiceServer) serveInputVideoDataProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "InputVideoData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(InputVideoRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *InputVideoResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.InputVideoData(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *InputVideoResponse and nil error while calling InputVideoData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *spiderInputServiceServer) serveInputCommentData(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveInputCommentDataJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveInputCommentDataProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *spiderInputServiceServer) serveInputCommentDataJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "InputCommentData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(InputCommentRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *InputCommentResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.InputCommentData(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *InputCommentResponse and nil error while calling InputCommentData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *spiderInputServiceServer) serveInputCommentDataProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "InputCommentData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(InputCommentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *InputCommentResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.InputCommentData(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *InputCommentResponse and nil error while calling InputCommentData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *spiderInputServiceServer) serveInputAuditOfflineVideoData(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveInputAuditOfflineVideoDataJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveInputAuditOfflineVideoDataProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *spiderInputServiceServer) serveInputAuditOfflineVideoDataJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "InputAuditOfflineVideoData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(InputAuditVideoRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			fmt.Printf("req has bad_signature. req:%v, correct_sig:%d\n", req, ch)
		} else {
			fmt.Printf("req has correct_signature. req:%v\n", req)
		}
	} else {
		fmt.Printf("req has no_signature req:%v\n", req)
	}

	// Call service method
	var respContent *InputAuditVideoResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.InputAuditOfflineVideoData(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *InputAuditVideoResponse and nil error while calling InputAuditOfflineVideoData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *spiderInputServiceServer) serveInputAuditOfflineVideoDataProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "InputAuditOfflineVideoData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(InputAuditVideoRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// check client signature
	sig, _ := twirp.SIG(ctx)
	if sig != "" {
		buf, _ := proto.Marshal(reqContent)
		seed := uint64(307976497148328517)
		ch := cityhash.CityHash64WithSeed(buf, uint32(len(buf)), seed)
		sigNum, _ := strconv.ParseUint(sig, 10, 64)
		if sigNum != ch {
			glog.Error("req has bad_signature. req:%v, correct_sig:%d", req, ch)
		} else {
			glog.Debug("req has correct_signature. req:%v", req)
		}
	} else {
		glog.Error("req has no_signature req:%v", req)
	}

	// Call service method
	var respContent *InputAuditVideoResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.InputAuditOfflineVideoData(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *InputAuditVideoResponse and nil error while calling InputAuditOfflineVideoData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *spiderInputServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor9, 0
}

func (s *spiderInputServiceServer) ProtocGenTwirpVersion() string {
	return "v5.4.1"
}

var twirpFileDescriptor9 = []byte{
	// 1083 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdf, 0x6e, 0xe3, 0xc4,
	0x17, 0x96, 0x93, 0xe6, 0x8f, 0x4f, 0xd2, 0x34, 0x9d, 0xb6, 0x5b, 0x6f, 0xaa, 0xfe, 0x7e, 0x25,
	0xb0, 0xab, 0x0a, 0xa4, 0x22, 0xba, 0x08, 0xad, 0x40, 0x48, 0xac, 0x4a, 0x61, 0x03, 0xcb, 0x52,
	0xb9, 0xa5, 0x5c, 0x70, 0x61, 0xcd, 0xda, 0xd3, 0xcd, 0x08, 0xdb, 0x63, 0x66, 0xc6, 0x41, 0x79,
	0x00, 0x2e, 0xb9, 0xe3, 0x49, 0xb8, 0xe0, 0x86, 0x67, 0xe1, 0x59, 0x40, 0x73, 0x66, 0x52, 0x3b,
	0x4d, 0x8b, 0x54, 0xb1, 0x77, 0x9e, 0xef, 0x9c, 0xf9, 0xce, 0x99, 0x73, 0xbe, 0x39, 0x63, 0xd8,
	0x54, 0x05, 0x4f, 0x98, 0xe4, 0x79, 0x51, 0xea, 0xa3, 0x42, 0x0a, 0x2d, 0x48, 0xeb, 0x55, 0x99,
	0x50, 0x31, 0x1a, 0x68, 0x49, 0x73, 0x75, 0xc5, 0xa4, 0x85, 0x47, 0xfd, 0x58, 0x64, 0x99, 0xc8,
	0xdd, 0x6a, 0x50, 0x50, 0xa9, 0x58, 0x29, 0x53, 0xbb, 0x1e, 0x7f, 0x01, 0x9b, 0x13, 0xc3, 0x71,
	0xc9, 0x13, 0x26, 0x42, 0xf6, 0x53, 0xc9, 0x94, 0x26, 0x1f, 0x40, 0x6f, 0x66, 0xd6, 0x51, 0x42,
	0x35, 0x55, 0x81, 0x77, 0xd0, 0x3c, 0xec, 0x1d, 0x0f, 0x8f, 0x90, 0xff, 0x08, 0x3d, 0x3f, 0xa7,
	0x9a, 0x86, 0x30, 0x5b, 0x7c, 0xaa, 0xf1, 0x57, 0xb0, 0x85, 0x3c, 0x27, 0x22, 0xcb, 0x58, 0xae,
	0x17, 0x4c, 0x4f, 0x60, 0x3d, 0xb6, 0xc8, 0x12, 0xd7, 0xc0, 0x71, 0x2d, 0xbc, 0xfb, 0xce, 0xc9,
	0x72, 0x9d, 0xc1, 0x03, 0xe4, 0x7a, 0x56, 0x26, 0x7c, 0x39, 0xb1, 0x8f, 0x6e, 0x4b, 0x6c, 0xc7,
	0x91, 0x55, 0xee, 0x2b, 0xd9, 0xfd, 0xee, 0x01, 0xa9, 0x1f, 0x53, 0x15, 0x22, 0x57, 0x8c, 0x3c,
	0x82, 0xb6, 0xd2, 0x54, 0x97, 0x86, 0xc9, 0x3b, 0xec, 0x1d, 0xaf, 0x3b, 0xa6, 0x73, 0x04, 0x43,
	0x67, 0x24, 0x9f, 0x40, 0x3b, 0xa3, 0x45, 0xc4, 0x93, 0xa0, 0x81, 0x01, 0xdf, 0x71, 0x6e, 0xab,
	0x8c, 0x47, 0xdf, 0xd0, 0x62, 0x92, 0x9c, 0xe6, 0x5a, 0xce, 0xc3, 0x56, 0x66, 0xbe, 0x47, 0x4f,
	0x01, 0x2a, 0x90, 0x0c, 0xa1, 0xf9, 0x23, 0x9b, 0x63, 0x38, 0x3f, 0x34, 0x9f, 0x64, 0x1b, 0x5a,
	0x33, 0x9a, 0x96, 0x2c, 0x68, 0x20, 0x66, 0x17, 0x1f, 0x37, 0x9e, 0x7a, 0xe3, 0x3f, 0x3c, 0xd8,
	0x5e, 0xae, 0xe9, 0xfd, 0xd2, 0xfe, 0xf4, 0x46, 0xda, 0x8f, 0xeb, 0x69, 0xdf, 0xe0, 0x7c, 0xa3,
	0x89, 0x7f, 0x06, 0xbb, 0x2b, 0xfd, 0xbb, 0x57, 0xea, 0xe3, 0xbf, 0x5b, 0xe0, 0x5f, 0x77, 0x92,
	0xbc, 0x07, 0x6d, 0x25, 0x4a, 0x19, 0x33, 0xdc, 0x34, 0x38, 0xde, 0x72, 0x9b, 0x4e, 0xd1, 0xe5,
	0x1c, 0x4d, 0xa1, 0x73, 0x31, 0x89, 0xce, 0xf0, 0xc8, 0x98, 0xe8, 0x8c, 0x27, 0x64, 0x1f, 0x20,
	0x63, 0x09, 0xa7, 0x51, 0x4e, 0x33, 0x16, 0x34, 0xd1, 0xe0, 0x23, 0xf2, 0x92, 0x66, 0x8c, 0x3c,
	0x84, 0xae, 0x35, 0xf3, 0x24, 0x58, 0x43, 0x63, 0x07, 0xd7, 0x93, 0x84, 0xfc, 0x7f, 0x21, 0x37,
	0xcd, 0x75, 0xca, 0x82, 0x16, 0x5a, 0xad, 0xae, 0x2e, 0x0c, 0x62, 0xa8, 0x8b, 0x94, 0xce, 0xa3,
	0x58, 0x94, 0xb9, 0x0e, 0xda, 0x07, 0xde, 0x61, 0x33, 0xf4, 0x0d, 0x72, 0x62, 0x00, 0xf2, 0x08,
	0x06, 0x4e, 0xae, 0xa5, 0xa4, 0x9a, 0x8b, 0x3c, 0xe8, 0x1c, 0x78, 0x87, 0xad, 0x70, 0xdd, 0x4a,
	0xd3, 0x81, 0x64, 0x0f, 0x7c, 0x35, 0xa5, 0x92, 0x45, 0xa5, 0x4c, 0x83, 0x2e, 0x06, 0xe9, 0x22,
	0xf0, 0x9d, 0x4c, 0xab, 0x1c, 0x62, 0x31, 0x63, 0x32, 0xf0, 0x6b, 0x39, 0x9c, 0x18, 0xa4, 0x72,
	0xf8, 0x99, 0x27, 0x7a, 0x1a, 0x00, 0x46, 0xb0, 0x0e, 0xdf, 0x1b, 0x84, 0xbc, 0x05, 0x7d, 0xeb,
	0x30, 0x65, 0xfc, 0xf5, 0x54, 0x07, 0x3d, 0xf4, 0xb0, 0x9b, 0x9e, 0x23, 0x64, 0x38, 0x6c, 0xf9,
	0x22, 0x3d, 0x2f, 0x58, 0xd0, 0xb7, 0x41, 0x2c, 0x74, 0x31, 0x2f, 0x98, 0xe1, 0x28, 0x24, 0xe5,
	0x8a, 0xb9, 0xa3, 0xae, 0xe3, 0x51, 0x7b, 0x16, 0xb3, 0x87, 0xdd, 0x03, 0xff, 0x8a, 0xce, 0x9c,
	0x7d, 0x80, 0xf6, 0xee, 0x15, 0x9d, 0x59, 0xa3, 0x09, 0x80, 0x47, 0xb4, 0xe6, 0x0d, 0x34, 0x03,
	0x42, 0xd6, 0xe1, 0xed, 0x6a, 0x50, 0x58, 0x97, 0x21, 0xba, 0x2c, 0x06, 0xc3, 0x35, 0x4b, 0x2c,
	0x19, 0xd5, 0x2c, 0xd2, 0x3c, 0x63, 0xc1, 0xe6, 0x81, 0x77, 0xb8, 0x16, 0x82, 0x85, 0x2e, 0x78,
	0xc6, 0x4c, 0x0e, 0xf6, 0xa8, 0xa6, 0x92, 0xc4, 0x56, 0x12, 0x01, 0x53, 0xc9, 0x7d, 0x80, 0x78,
	0x4a, 0xf3, 0x9c, 0xa5, 0xa6, 0xd5, 0x5b, 0x56, 0x07, 0x0e, 0x99, 0x24, 0x46, 0xcf, 0x5a, 0x14,
	0x3c, 0x0e, 0xb6, 0xad, 0x9e, 0x71, 0x61, 0xf2, 0xc2, 0xd1, 0xc3, 0x45, 0x6e, 0x6b, 0xb3, 0x83,
	0xd6, 0xfe, 0x02, 0xc4, 0xea, 0xec, 0x81, 0x9f, 0x31, 0x4d, 0x71, 0x2a, 0x05, 0x0f, 0x6c, 0x58,
	0x03, 0xa0, 0x7a, 0x3f, 0x04, 0xc0, 0x99, 0x6b, 0xb7, 0xef, 0xa2, 0x82, 0x77, 0xea, 0xb3, 0xf4,
	0xcc, 0x58, 0xc3, 0x32, 0x65, 0xa1, 0x8f, 0x8e, 0x86, 0x72, 0xfc, 0x67, 0x03, 0x3a, 0xee, 0x8e,
	0xfe, 0x57, 0xfd, 0x0f, 0xa1, 0x19, 0xf3, 0xc4, 0x09, 0xdf, 0x7c, 0x92, 0x00, 0x3a, 0xb1, 0xc8,
	0x35, 0xcb, 0xf5, 0x42, 0xf1, 0x6e, 0xe9, 0x9a, 0x28, 0x64, 0x94, 0x97, 0x19, 0xea, 0xdd, 0x36,
	0x51, 0xc8, 0x97, 0x65, 0x46, 0x76, 0xa1, 0x53, 0x2a, 0x26, 0x4d, 0xf5, 0xda, 0xb8, 0xad, 0x6d,
	0x96, 0x93, 0xc4, 0xec, 0x42, 0x03, 0x5e, 0xb0, 0x8e, 0x3d, 0xbf, 0x01, 0xf0, 0x7e, 0xed, 0x03,
	0xa0, 0xb1, 0x98, 0x0a, 0x2d, 0x9c, 0xbc, 0xd1, 0xfd, 0xcc, 0x00, 0x66, 0xaf, 0x64, 0x45, 0x3a,
	0xc7, 0x88, 0xbe, 0x8d, 0x88, 0x80, 0x89, 0xb8, 0x03, 0x6d, 0xae, 0xa2, 0xa9, 0xd0, 0x28, 0xeb,
	0x6e, 0xd8, 0xe2, 0xea, 0xb9, 0x58, 0xd1, 0x41, 0xef, 0xa6, 0x0e, 0xc6, 0x2f, 0x60, 0xb0, 0xfc,
	0x1a, 0x98, 0x5b, 0x5e, 0x08, 0xa5, 0x23, 0x53, 0x1b, 0x0f, 0xa3, 0x74, 0xcc, 0xfa, 0x92, 0xdb,
	0x5b, 0xee, 0xd4, 0x5f, 0x55, 0x0e, 0x1c, 0x74, 0xc9, 0x93, 0xf1, 0x5f, 0x1e, 0xf4, 0x2f, 0x24,
	0xe5, 0xf9, 0x33, 0xa9, 0x79, 0x9c, 0xb2, 0xfb, 0x35, 0xc4, 0xdc, 0x6e, 0xcb, 0x7e, 0x4d, 0xde,
	0xb5, 0xc0, 0x24, 0x21, 0x8f, 0x61, 0xc3, 0x19, 0x5f, 0x4b, 0x51, 0xe2, 0xb0, 0xb6, 0x7d, 0x5a,
	0xb7, 0xf0, 0x97, 0x06, 0x9d, 0x24, 0xe4, 0x5d, 0xd8, 0x5c, 0xf2, 0xc3, 0x4a, 0xdb, 0xde, 0x6d,
	0xd4, 0x3c, 0xb1, 0xe0, 0x46, 0xc8, 0xb5, 0x79, 0x65, 0x17, 0xa6, 0x00, 0x5c, 0x45, 0x78, 0x19,
	0xb0, 0x7b, 0xdd, 0xb0, 0xc3, 0x15, 0xe6, 0x3b, 0xfe, 0x6d, 0x71, 0xbe, 0x85, 0xe0, 0xf6, 0xc1,
	0xdd, 0xfd, 0x28, 0x76, 0xe5, 0xf2, 0x43, 0x77, 0x88, 0x93, 0x65, 0xf9, 0x34, 0x96, 0xe5, 0x53,
	0x53, 0x48, 0xf3, 0x6e, 0x85, 0xac, 0xdd, 0x50, 0x48, 0xd5, 0xe5, 0x56, 0xad, 0xcb, 0xe3, 0x5f,
	0x3d, 0x18, 0xd6, 0xd3, 0x7a, 0xc1, 0x95, 0x7e, 0x83, 0xa5, 0x7f, 0x1f, 0xba, 0x6e, 0xb8, 0xa8,
	0xa0, 0x89, 0x0f, 0xe4, 0x82, 0xab, 0x1e, 0x34, 0xbc, 0x76, 0x3a, 0xfe, 0xa5, 0x01, 0xe4, 0x1c,
	0xff, 0xba, 0xf0, 0x75, 0x3b, 0x67, 0x72, 0xc6, 0x63, 0x46, 0x4e, 0x61, 0x50, 0xfd, 0x08, 0xa0,
	0xd6, 0x82, 0x5b, 0xfe, 0x0f, 0x70, 0x5e, 0x8c, 0x1e, 0xde, 0xf9, 0xe7, 0x40, 0xbe, 0x86, 0x61,
	0xfd, 0x61, 0x46, 0xa2, 0xd1, 0xad, 0x2f, 0xb6, 0xa5, 0xda, 0xfb, 0x97, 0xd7, 0x9c, 0xfc, 0x00,
	0xa3, 0xea, 0x05, 0xfe, 0xf6, 0xea, 0x2a, 0xe5, 0x39, 0xab, 0xf2, 0xdb, 0xaf, 0x6f, 0x5d, 0xf9,
	0xc9, 0x1a, 0xfd, 0xef, 0x2e, 0xb3, 0x25, 0x7f, 0xd5, 0xc6, 0x3f, 0xc7, 0x27, 0xff, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x08, 0x26, 0x12, 0x49, 0x83, 0x0a, 0x00, 0x00,
}
